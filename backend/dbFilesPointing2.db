{"file":{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n  "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","generator"],["content","pandoc"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0, user-scalable=yes"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"US20150330429A1"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    code {\n      white-space: pre-wrap;\n    }\n\n    span.smallcaps {\n      font-variant: small-caps;\n    }\n\n    span.underline {\n      text-decoration: underline;\n    }\n\n    div.column {\n      display: inline-block;\n      vertical-align: top;\n      width: 50%;\n    }\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":8,"nodeName":"#comment","nodeValue":"[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing remote screen content on touch- and pen-operated\n      systems"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated display\n    systems. They provide users with access to screen content that would otherwise be impossible or hard to reach, e.g.,\n    because it is located behind a bezel or far away from the user. Drag-and-pop is an extension of traditional\n    drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop responds by temporarily\n    moving potential target icons towards the user’s current cursor location, thereby allowing the user to interact with\n    these icons using comparably small hand movements. Drag-and-Pick extends the drag-and-pop interaction style such\n    that it allows activating icons, e.g., to open folders or launch applications. In this paper, we report the results\n    of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’ (4.50m) wide interactive display\n    wall. Participants where able to file icons up to 3.7 times faster when using the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen, heterogeneous display."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With the emergence of pen- and touch-operated personal digital assistants (PDAs), tablet computers, and wall-size\n    displays (e.g., Liveboard, Elrod et al., 1992; Smartboard, http://www.smarttech.com), touch and pen input have\n    gained popularity. Over the past years, more complex display systems have been created by combining multiple such\n    display units. Wall-size touch displays have been combined into display walls, such as the DynaWall (Streitz 2001),\n    or the iRoom Smartboard wall (Johanson, 2002b). Recent PDAs and tablet computers allow connecting additional\n    displays, such as another tablet or a monitor in order to extend the device’s internal display space."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple display units bring up a new class of input challenges that\n    cannot always be solved with existing techniques, because many of the existing techniques were designed for indirect\n    input devices, such as mice, track pads, or joysticks. Indirect input devices can be used on arbitrary display\n    configurations, because they can simply be mapped to the respective topology (e.g., PointRight, Johanson 2002a).\n    Touch/ pen input, however, is based on the immediate correspondence between input space and display space and thus\n    requires users to adapt their input behavior to the physicality of the display system. Here are three examples where\n    this can become problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["style","background-color: yellow;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction concept such that it allows activating\n    icons, e.g., to open a folder or to launch a program. While drag-and-pop is initiated by the user dragging an icon,\n    drag-and-pick starts with the user performing a drag interaction on empty screen space. The system’s response to\n    this drag interaction is similar to drag-and-pop, but with two differences. First, all icons located in the\n    direction of the drag motion will pop up, not only those of compatible type (Figure 3). Second, as the user drags\n    the mouse cursor over one of the targets and releases the mouse button, the folder, file, or application associated\n    with the icon is activated as if it had been double clicked. Figure 4 shows how this allows users to use the pen for\n    launching an application, the icon of which is located on a monitor not supporting pen input. In principle,\n    drag-and-pick can be applied to any type of widget, e.g., any buttons and menus located on a non-pen accessible\n    monitor. In this paper, however, we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["style","background-color: yellow;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed, drag-and-pop positions it on the\n    screen such that the center of the layout’s bounding box is located at the direct extension of the user’s current\n    mouse motion. The distance of the tip icon cluster to the user’s current cursor position is configurable. For\n    inexperienced users, we got best results with distances of around 100 pixels; shorter distances made these users\n    likely to overshoot the cluster. For more experienced users, we were able to reduce the distance to values around 30\n    pixels, which allowed these users to operate drag-and-pop with less effort, in a more “menu-like” fashion. In order\n    to reduce visual interference between tip icons and icons on the desktop, drag-and-pop diminishes desktop icons\n    while tip icons are visible. This may obscure the nearby icons on the desktop making it hard to access to."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Aborting Drag-and-Pop Interactions"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["style","background-color: yellow;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"As soon as tip icons and rubber bands are shown on the screen, drag-and-pop waits\n    for the user to acquire one of the tip icons to complete the ongoing drag-and-pop or drag-and-pick interaction.\n    There are two cases, however, in which users will want to abort the interaction without acquiring a tip icon. The\n    first case is when the user dragged the mouse at a wrong angle so that the desired target icon did not pop up. In\n    this case, the user may either drop the icon and try again or complete the interaction as a regular drag-and-drop\n    interaction, i.e., by dropping the icon onto the target icon’s base instead. The other case occurs if the user is\n    intending to perform a regular mouse drag operation, for example to rearrange icons on the desktop or to capture a\n    set of icons using a lasso operation. For these cases, drag-and-pop allows users to terminate tip icons onthe- fly\n    and to complete the interaction without dragand- pop/pick. To abort, users have to move the mouse cursor away from\n    the tip icon cluster while still keeping the mouse depressed. This can be done by overshooting the cluster or by\n    changing mouse direction. In particular, this allows users to switch to the normal drag-and-drop and lasso-select\n    functionality by introducing a simple zigzag gesture into their cursor path. The zigzag contains at least one motion\n    segment moving away from the tip icons, thus terminating tip icons as soon as they appear. The algorithm: the tip\n    icon cluster is kept alive as long as at least one of the following three rules is successful. The first rule checks\n    whether the mouse cursor has moved closer to the center of at least one of the icons in the tip icon cluster. This\n    rule makes sure that the cluster does not disappear while users approach their targets. The second rule checks if\n    the cursor is in the direct vicinity of an icon. This rule provides tolerance against users overshooting a tip icon\n    while acquiring it. The third and last rule keeps the cluster alive if the cursor is stationary or if it is moving\n    backwards very slowly (up to 5 pxl/frame). This rule makes drag-and-pop insensitive to jitter. Figure 7 illustrates\n    the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Method"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","attributes":[["style","background-color: yellow;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"At the end of the study, participants answered a short questionnaire about their\n    experience using the DynaWall and drag-and-pop. Participants were very enthusiastic about drag-and-pop. On a 7 point\n    Likert scale (where 7=strongly agree and 1=strongly disagree), there was a mean > 6 for questions such as, “I liked\n    using drag-and-pop”, “I always understood what was happening when drag-and-pop was on,”and “I would use drag-and-pop\n    for large displays.” There was a mean of less than 3 for “It took a long time to get used to drag-and-pop” and “It\n    was hard to control what the targets did when drag-and-pop was on.” Participants reported the drag-and-pop interface\n    to cause less manual stress and fatigue than the control interface. The most common problem with drag-and-pop was in\n    getting the right group of targets to pop up, and several participants requested a wider angle for destination\n    targets. This relates to an observation we made about how people interact with touch-sensitive wall-displays. On the\n    wall display, participants had to employ their whole arm to make a movement, resulting in targeting motions in the\n    shape of arcs. This means that the initial direction of the movement was not in the direction of the target. To\n    accommodate such arcs in the future, we have adapted the target selection algorithm of drag-and-pop by giving the\n    target sector extra tolerance for movements towards the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Conclusions and Future Work"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The substantial time-savings found in the user study confirm our expectations. Although when used within a single\n    screen unit drag-and-pop does not seem to by faster than traditional drag and drop (first pair of bars in Figure 10;\n    drag-and-pop’s capability of bridging distance to the target seems to be nullified by the need for re-orientation),\n    its advantages on very large screens and its capability of bridging across display units are apparent. On the\n    usability side, we were glad to see that participants had no trouble learning how to use the technique and that they\n    described the technique as understandable and predictable. The single biggest shortcoming, the target selection, is\n    the subjects of current work. In addition to the changes described above, we consider dropping the notion of a fixed\n    target sector size and replace it with a mechanism that adjusts the sector size dynamically based on the number of\n    matching targets. Given the recent advent of commercially available tablet computers, our next step will be to\n    explore how drag-and-pop and especially drag-andpick can help tablet computer users work with external monitors.\n    While this paper focused on icons, we plan to explore ways of operating menus, sliders, and entire applications\n    using the techniques described in this article."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"}]},"fileName":"drag-and-pop.html","index":0,"_id":"CVMrf64sjRAzUXr8"}
