{"file":{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n  "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","generator"],["content","pandoc"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0, user-scalable=yes"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"US20150330429A1"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":8,"nodeName":"#comment","nodeValue":"[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"AN EMPIRICAL COMPARISON OF PIE vs. LINEAR MENUS"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Menus are largely formatted in a linear fashion listing items from the top to bottom of the screen or window. Pull down menus are a common example of this format. Bitmapped computer displays, however, allow greater freedom in the placement, font, and general presentation of menus. A pie menu is a format where the items are placed along the circumference of a circle at equal radial distances from the center. Pie menus gain over traditional linear menus by reducing target seek time, lowering error rates by fixing the distance factor and increasing the target size in Fitts’s Law, minimizing the drift distance after target selection, and are, in general, subjectively equivalent to the linear style."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"KEYWORDS"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"menus, user interface, empirical studies, directional selection."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"INTRODUCTION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In presenting a list of choices to the user, most computer system designers have been limited, largely by the available hardware and software, to a linear format. The items are listed from top to bottom, sometimes with an index number for each to the item. OCcasionally, the lists are multi-columned, have multiple items per line, or are even hierarchical (i.e. indented sub-choices), but for the most part lie in a strictly one dimensional structure. hlany of these menus are static on the display screen or activated from mouse actions in two formats: pull-down (menu appears at a fixed label on screen when mouse directed) or pop-up (menu appears anywhere within a fixed area, occasionally the whole screen) [ll]. Some systems have used the two dimensional nature of the computer display to the advantage of certain menu applications. Many flight simulation programs, for example, lay out directional headings in a typical compass format."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM1.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM2.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Item placement in menus has been an important research topic for many years. Menu organization is typically divided into three types [4]: alpha/numeric, categorical (functional), and random ordering. It is generally agreed that the performance of subjects (i.e. time to seek a target) with different placement styles converges with practice [2,10]. Further studies [9] revealed that a functional placement of items is superior when the task domain is unambiguous to the user whereas an alphabetic organization can be useful in uncertain task descriptions. All of these studies have concentrated on the linear display format."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Has defaulting to a linear format (Figure 1) made some menus easier to use? Harder? By changing the menu format, can users find the item they seek faster? Is a particular menu format faster than other formats even with practice? What type of formats should be tested?"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"These are important questions for the designers of many systems. Software libraries of menu display routines are widely used as a default by programmers of many window systems and applications. Would it be worthwhile to present items in variable formats or perhaps in another fixed general format like the compass?"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A pie menu [7] is a system facility for pop-up menus built into MIT’s X windows [5] window management system, and Sun Microsystem’s NeWS window system [G] and SunView window system. The pie menu interface supplies a standard library of functions that can be used by programmers to format and display menus in a circular format. The system is written in C and Forth and currently runs on a Sun Microsystems workstation. Items in the menu are placed at equal radial distances along the circumference of a circlr (Figure 2). The starting cursor position is at the cellter of the menu as opposed to being at the menu title or first item as in traditional pull-down menus. The cursor is under the control of a three button optical mouse on a fixed size moveable pad."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM3.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Imaginative menus formats are an inevitable future with the latest advances in window management systems. Window imaging systems using technology from laser printing protocol standards such as PostScript [I] and Interpress [12] will make it possible to display a large variety of non-rectangular shaped windows effectively on a bitmapped display. There are some obvious advantages to this organization for particular applicaImaginative menus formats are an inevitable future with the latest advances in window management systems. Window imaging systems using technology from laser printing protocol standards such as PostScript [I] and Interpress [12] will make it possible to display a large variety of non-rectangular shaped windows effectively on a bitmapped display. There are some obvious advantages to this organization for particular applications: compass directions, time, angular degrees, and diametrically opposed or orthogonal function names are some groupings of items that seem to fit well into the mold of the pie menu design. Alternatively, items with a. sequential nature may not benefit and may in fact suffer from such a format. In addition, pie menus consume greater screen area and become polynomially larger than linear menus in both height and width with increased item isize and number of items."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Distance to and size of the target are important factors that give pie menus the advantage over traditional linear menus. Even with linear menu initial cursor placement schemes where the cursor may initially be in fhe middle or at the last item selected, there remain target, items at relatively great distances from the cursor location. Pie rnenus enjoy a two fold advantage because of their u:nique design: items are placed at equal radial distances, from the center of the menu and the user need only move the cursor by a small amount in some direction for the system to recognize the intended selection. The advantages of decreased distance and increased target size can be seen as an effect on positioning time as parameters to Fitts’s Law [3]."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The distance to an item in any menu style can be defined as the minimum distance needed to highlight the item as selected. In both menu styles, this is defined by a region rather than a point. This region is typically of greater area than the actual target (Figure 3). Once the cursor has entered the region, the item is highlighted as feedback to the user."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM4.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"EXPERIMENT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction and hypothesis"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This paper describes a controlled experiment to test two hypotheses: that pie menus decrease the seek time and error rates for menu items and that pie menus are especially useful in menu applications suited for a circular format, diametrically opposed item sets (e.g. open/close), directions (e.g. up/down) or even linear sets of items and conversely linear menus are useful for sets of linear items (e.g. one,two,three,etc.)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The experiment is a 2x3 randomized block design. Each cell is an element of the cross product of menu and task type. A typical pie task would be the compass example because it seems best suited functionally for pie menus. List of elements, like OPEN/CLOSE and UP/DOWN, whose meanings are antonyms are also classified as pie tasks. Lists, like numbers, letters and ordinals, are best suited for linear menus and are thus classified as linear tasks. Groups of menu items that have no relation to each other fall in the unclassified category. Table 1 shows an example of the groupings."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There are a total of 15 menus, a group of 5 for each task type. Subjects perform the experiment for all cells in the experiment matrix in random order in accordance with a randomized block design [S]. The subjects see each of the 15 menus four times, a total of twice in each menu format. Each cell in the experiment consists of 10 menus. Each subject therefore sees a total of GO menus. Ta.rgets are uniformly distributed over the eight possible items."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Pilot study results"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A pilot study of 16 subjects showed that users were approximately 15% faster with the pie menus and that errors were less frequent with pie menus. Statistically significant differences were found for item seek time but not task type. Subjects were split on their subjective preference of pie and linear menus. Some commented that they were able to visually isolate an item easier with linear menus and that it was hard to control the selection in pie menus because of the sensitivity of the pie menu selection mechanism. These subjects tended to be the most mouse naive of all whereas those who had heard of or seen a mouse/cursor controlled system but had not used one extensively tended to prefer pie menus. The most rnouse naive users, while finding linear menus easier, tended to be bctter at pie menus and commented that with practice, they would probably be superior and in fact prefer the pie menus because of their speed and minimization of hand movement with the mouse. Not surprisingly, therefore, most of those preferring linear menus did not have a strong preference on the scaled subjective questionnaire."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects were volunteers from the University of Maryland Psychology Department Subject Pool. All 33 subjects were undergraduate students with little or no mouse experience. They were rewarded with 1 extra credit point for participating."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Materials"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"AS stated, pie menus run on a Sun Rlicrosystems Workstation as pa.rt of an enhanced version of RfIT’s X windows system. The screen is a 19-inch bitmapped high resolution black-and-white display. Cursor location is controlled by a three button optical mouse on a moveable mousepad made of a specially formatted reflective material."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Procedures and problems"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Some changes were made from the pilot design of the experiment: a better distribution of menu targets and doubled number of menu trials, though the total number of menus remained constant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The process of selecting items from a pop-up menu, regardless of format, can be characterized in three stages: invocation, browsing, an cl confirmation. To make a selection, the user invokes the menu by pressing a mouse button (invoca2ion), continues to hold the mouse button down and moves to an item which is then highlighted (b rozusilzg) and releases the mouse button confirming the selection (confirmation)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The typical sequence of events for a subject is as follows:"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The target is displayed to the user in a fixed text window at the top of the screen. The cursor associated with the mouse is marked by a small hash mark “x” on the display screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The user invokes the menu by pressing and holding any one of three mouse buttons. The menu appears with the cursor location unchanged (escept near screen boundaries where the cursor must “jump awa.y” to accomodate the menu). The cursor is located in the center or menu title region of pie and linear menus respectively."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With the mouse button still depressed, the user moves the cursor with the mouse towards the textual target as indicated. Selections highlight as the cursor moves into distinct activation regions. As noted, the activations regions for pie menus are “pie” shaped sections that extend to the screen boundaries and are rectangular sections extending horizontally towards the screen boundaries for linear menus."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Once selection is made, the user releases the mouse button to confirm the selection. The menu disappears from the display screen. The cursor remains at the screen position relative to the selection location. If the selection is correct, the process begins again with a new target and possibly a new menu style. Otherwise, if the selection is not the requested target, an audible “beep” tone is heard and the user attempts the task aga.in."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Basically, the computer posts the target name at the top of the screen, the user invokes the current menu, moves to the target item, and confirms the selection by releasing the mouse button. This sequence, called a task, is repeated GO times by each subject. Each subject saw 6 sequences of .lO menus each. In each ten menu sequence, the menu type was the same, either pie or linear, and since there are only 5 menus per task type, each menu appears twice in the sequence."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM5.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The 10 menu sequences correspond to the cells in the experiment table design. Each subject performed a sequenc. e for all 6 cells in random order. 60 data point.s are collected per subject. A total of 33 subjects performed the experiment for a total of 19SO data points."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For each task, the time from the first mouse button down to the correct target selection is the seek time for the item. If the user selected the wrong item, the time is included in this interval. The number of errors made as well as the sub-interval times when errors are made is recorded during the experiment by the system. All subjects performed the test adequately and no person failed to finish the assignment."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"RESULTS AND DISCUSSION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A repeated measures analysis of variance was performed on the data. Table 2 shows the means per cell, per row, and per column. Table 3 displays the repeated measures ANOVA results. A Tukey analysis reveals that there is a statistical significant difference (P less than 0.01) between overall menu type performance and task type performance in target seek times. Pie tasks and linear tasks did not significantly differ from each other, but both organizations are an improvement over the unclassified menu tasks. Slight statistical significant difference (P=0.075) b et ween cells in the experiment design is also observed. No other interaction was observed to be significant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM6.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The statistically significant difference between menu type performance is the central result of this study. The task type difference reiterates earlier study results [2,9] that showed that some organization is helpful. Furthermore, the slight interaction between menu types and task types tends to confirm the hypothesis that certain task groupings perform well with particular menu formats. The reason for a lack of strong correlation is evident in the lower mean for pie menus even on linearly grouped tasks."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 4 displays the target location by item plotted against the mean seektime. The mean seektime across target location for pie menus is fairly constant. As expected for linear menus, the mean seek time increases proportionally to the distance of the target from the initial cursor location. Analysis of seektime v,s. number of menus seen shows that no strict convergence occurs between the two menu styles, though mean seektimes did decrease for both pie and linear menus with practice."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With error times removed from the results (measuring time from menu invocation to first correct clioi.ce), the menu styles compared relatively the same as the comparison which includes error times because of the error rates."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"An analysis of seek time based on Fitts’s Law T = KO + Klog2(D/S + 0.5) where T = time to position cursor using mouse (seek time), Ko = constant time to adjust grasp on mouse, Ir’ = constant normalization factor (positioning device dependent), S = size of target in pixeZs2, D = distance in screen pixels, helps explain our results because the ratio of the distance (D) to target size (S) is smaller for pie menus. The fixed target distance and increased size of targets for pie menus decreases the mean positioning time as compared with linear menus. In our experiment, the activation region for an item constitutes the target. All subjects were informed of the fact that their target was not necessarily the text, but the region containing the text target item. This was clearly understood by all participants. The font size for text items in both"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM7.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 5 displays the target location plotted against the total number of errors across all subjects. Pie and linear menus seem to suffer from a similar phenomenon - errors are made more often on items in the central they might prefer the pie menu structure. Those who preferred pie menus generally felt fairly confident in their assessment and this is reflected in the questionnaires."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM8.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM9.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One subject complained of having a problem with nlenu drift which is the phenomenon which occurs as the result of the cursor relocating to the relative screen location of the last selected target. With linear menus, this tends to “drift” the cursor towards the bottom of the screen. This may explain the higher error rate for linear menus, but the same problem occurs to a lesser degree with pie menus. This, in fact, we believe to be another positive feature of pie menus: the cursor drift distance is minimized. Most subjects had no problems coping with drift in either menu style. One area of further research is measuring the extent and effect of this problem."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"CONCLUSIONS"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"What does this mean? Should we program pie menus into our bitmapped window systems tomorrow and expect a 15-20% increase in productivity since users can select items slightly faster with pie menus. Pie menus seem promising, but more experiments are needed before issuing a strong recommendation."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["style","background-color: yellow;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"First, this experiment only addresses fixed length menus, in particular, menus consisting of 8 items - no more, no less. Secondly, there remains the problem of increased screen real estate usage, In one trial a subject complained because the pie menu obscured his view of the target prompt message. Finally, the questionnaire showed that the subjects were almost evenly divided between pie and linear menus in subjective satisfaction. Many found it difficult to “home in on” a particular item because of the unusual activation region characteristics of the pie menu."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One assumption of this study concerns the use of a mouse/cursor control device and the use of pop-up style menus (as opposed to menus invoked from a fsed screen location or permanent menus). Certainly, pie menus can and in fact have been incorporated to use keyed input [7] and fixed “pull-down” style presentation (the pie menu becomes a semicircle menu). These variations are areas for further research."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM10.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One continuing issue with pie menus is the limit on the number of items that can be placed in a circular format before the size of the menu window is impractical. Perhaps, like the limiting factors in linear menus concerning their lengths, pie menus reach a sim.- ilar “breaking point” beyond which other menu styles would be more useful. Hierarchical organization, arbitrarily shaped windows (Figure S), numeric item assignment and other menu refinements as well as further analysis is contained in [7]. Pie menus offer a novel alternative worthy of further exploration."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"}]},"fileName":"pieMenu.html","index":0,"_id":"vSqBBCeisSXCF1hH"}
{"file":{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n  "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","generator"],["content","pandoc"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0, user-scalable=yes"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"US20150330429A1"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":8,"nodeName":"#comment","nodeValue":"[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing remote screen content on touch- and pen-operated systems"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated display systems. They provide users with access to screen content that would otherwise be impossible or hard to reach, e.g., because it is located behind a bezel or far away from the user. Drag-and-pop is an extension of traditional drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop responds by temporarily moving potential target icons towards the user’s current cursor location, thereby allowing the user to interact with these icons using comparably small hand movements. Drag-and-Pick extends the drag-and-pop interaction style such that it allows activating icons, e.g., to open folders or launch applications. In this paper, we report the results of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’ (4.50m) wide interactive display wall. Participants where able to file icons up to 3.7 times faster when using the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen, heterogeneous display."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With the emergence of pen- and touch-operated personal digital assistants (PDAs), tablet computers, and wall-size displays (e.g., Liveboard, Elrod et al., 1992; Smartboard, http://www.smarttech.com), touch and pen input have gained popularity. Over the past years, more complex display systems have been created by combining multiple such display units. Wall-size touch displays have been combined into display walls, such as the DynaWall (Streitz 2001), or the iRoom Smartboard wall (Johanson, 2002b). Recent PDAs and tablet computers allow connecting additional displays, such as another tablet or a monitor in order to extend the device’s internal display space."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple display units bring up a new class of input challenges that cannot always be solved with existing techniques, because many of the existing techniques were designed for indirect input devices, such as mice, track pads, or joysticks. Indirect input devices can be used on arbitrary display configurations, because they can simply be mapped to the respective topology (e.g., PointRight, Johanson 2002a). Touch/ pen input, however, is based on the immediate correspondence between input space and display space and thus requires users to adapt their input behavior to the physicality of the display system. Here are three examples where this can become problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 1: External monitors. One or more display units within a display system may not be equipped with a touch or pen sensor. Connecting an external monitor to a tablet computer or PDA, for example, allows users to see more material, but requires them to use an indirect input device, such as a mouse, when interacting with content on the external monitor. Since some tablet-specific tasks, such as scribbling, are hard to accomplish with a mouse, users find themselves continuously switching between pen and mouse."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 2: Interactions across display units. Some interaction techniques, such as drag-and-drop, require users to interact with two or more icons in a single pen-down interaction. If these icons are distributed across physically separate pen/touch input display units, users first have to bring all involved icons to the same display unit, a potentially timeconsuming activity (Figure 2a-c)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 3: Bridging long distances. Accessing icons located far away from the user, e.g., on the opposite side of a 15’ DynaWall, requires users to physically walk over, the time for which may in some circumstances increase linearly with distance (Guiard et at, 2001). In addition, drag interactions get more error-prone with distance, because users drop objects accidentally when failing to continuously keep the pen tip in contact with the display surface (Rekimoto 1997)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop & drag-and-pick"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop and drag-and-pick are interaction techniques that address these issues. We will begin by giving an overview; more detailed descriptions of both techniques can be found in Section 4"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"extends traditional drag-and-drop as illustrated by Figure 1. (a) The user intends to delete a Word memo by dragging it into the recycle bin. (b) As the user starts dragging the memo’s icon towards the recycle bin, icons that are of compatible type and located in the direction of the user’s drag motion “pop up”. This means that for each of these icons a link icon is created (tip icon) that appears in front of the user’s cursor. Tip icons are connected to the original icon (base icon) using a rubber band. (c) The user drags the memo over the recycle bin and releases the mouse button. The recycle bin accepts the memo. Alternatively, the user could have dropped the memo over the word processor or the web browser icon, which would have launched the respective application with the memo. (d) When the user drops the icon, all tip icons disappear instantly. Figure 2d shows how drag-and-pop simplifies dropping icons onto targets located at the other side"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["style","background-color: yellow;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction concept such that it allows activating icons, e.g., to open a folder or to launch a program. While drag-and-pop is initiated by the user dragging an icon, drag-and-pick starts with the user performing a drag interaction on empty screen space. The system’s response to this drag interaction is similar to drag-and-pop, but with two differences. First, all icons located in the direction of the drag motion will pop up, not only those of compatible type (Figure 3). Second, as the user drags the mouse cursor over one of the targets and releases the mouse button, the folder, file, or application associated with the icon is activated as if it had been double clicked. Figure 4 shows how this allows users to use the pen for launching an application, the icon of which is located on a monitor not supporting pen input. In principle, drag-and-pick can be applied to any type of widget, e.g., any buttons and menus located on a non-pen accessible monitor. In this paper, however, we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Related Work"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-drop is a well-know interaction technique for transferring or copying information using a pointing device, while avoiding the use of a hidden clipboard (Wagner, 1995; Beaudouin-Lafon, 2000). Hyperdragging (Rekimoto, 1999), allows extending drag-and-drop across physically separate displays (Scenario 2), but requires an indirect input device, such as a mouse. Most techniques compatible with pen usage are based on point-and-click, e.g., pickand- drop (Rekimoto, 1997) and take-and-put (Streitz et al., 2001). These techniques, however, cannot be used to access material on a display unit not providing pen support (Scenario 1)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A different set of interaction techniques have been proposed to help users overcome large distances (Scenario 3). Manual And Gaze Input Cascaded (MAGIC) pointing (Zhai et al., 1999) uses eye tracking to move the cursor to the target area, from where the user guides the cursor manually (which requires an indirect input device). Gesture input techniques allow selecting a target and a command in a single interaction and are generally compatible with pen input (Rubine, 1991). ‘Throwing’ allows users to accelerate an object with a small gesture; the object then continues its trajectory based on its inertia (Gei ler, 1998). The imprecision of human motor skills has prevented throwing from being used for reliable target acquisition. Myers et al. (2002) used laser pointers to acquire targets on a Smartboard, but found them to be slower than touch input. A variety of mouse-based interaction techniques use destination prediction to simplify navigation (e.g., Jul, 2002). Dulberg et al. (1999) proposed a flying click or flick for snapping the mouse to target locations. Swaminathan and Sato (1997) proposed making relevant controls on the screen “sticky”. As an alternative way of launching applications, today’s operating systems offer menus containing lists of available application or documents. A ‘send to’ option (Microsoft Windows) allows sending an icon to a target selected from a predefined list. Compared to 2D desktops, which typically use a larger amount of screen space than pull-down or pop-up menus, menus are limited to a smaller selection of choices unless they use a hierarchical menu organization, which makes their usage less transparent and often less efficient. Furthermore, invoking a content-menu may require hitting a qualifier key, which can be problematic on touch-based systems."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Design and Algorithms"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In this section, we will take a more detailed look at the design and algorithms behind drag-and-pop/pick. 4.1 Selecting candidates In order to reduce clutter, drag-and-pop creates tip icons only for a subset of the icons on the screen. Drag-and-pop’s candidate selection algorithm is initialized with the entire set of icons on the screen; it then successively eliminates candidates using the following four rules. First, icons of incompatible type are eliminated. If the user drags a text file, the icon of a text processor can create a tip icon; the recycle bin icon can create a tip icon; the icon of another text file, however, cannot, because dragging two text files onto each other is usually not associated with any behavior. Drag-and-pick bypasses this selection step in order to allow users to activate any type of icon. Second, icons located between the cursor and the location where the tip icons cluster will appear (see following section) are eliminated. This rule avoids creating tip icons that move away from the cursor. Third, only icons that are located within a certain angle from the initial drag direction (the target sector) are considered. The initial drag direction is determined the moment the user drags an icon further than a given threshold (default 15 pixels). During preliminary testing on a Smartboard, we got good results with first-time users when using sector sizes of  30 to  45 degrees. The sector size could be reduced to sector sizes of  20 degrees as users gained more experience. Forth, if the number of qualifying icons is above some hard limit, drag-and-pop eliminates tip icon candidates until the hard limit is met. Icons are removed in an order starting at the outside of the target sector moving inwards. This rule assures the scalability of drag-and-pop to densely populated displays, but requires drag-and-pop users working with densely populated screens to aim more precisely. We typically use hard limits between 5 and 10."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Computing The Tip Icon Layout"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Once tip icon candidates have been selected, dragand- pop determines where on the screen to place the tip icons. In order to avoid interference between tip icons, the location of all tip icons is computed in a centralized fashion. Our drag-and-pop prototype uses the following algorithm that is illustrated by Figure 5: (1) Snap icons to a grid and store them in a two-dimensional array, with each array element representing one cell of the grid. If two or more icons fall into the same cell, refine the grid. (2) Shrink the icon layout by eliminating all array columns and rows that contain no icons. (3) Translate icon positions back to 2D space by mapping the array onto a regular grid. By default, the output grid is chosen to be slightly tighter than the input grid, which gives extra compression."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We chose this algorithm, because it preserves alignment, proximity, and spatial arrangement between icons, which allows users to use their spatial memory when identifying the desired target within the tip icon cluster. This is especially useful when tip icons look alike (e.g., a folder in a cluster of folders). In order to help users distinguish local icon clusters from surrounding icons more easily, the algorithm may be adjusted to shrink empty rows and columns during layout computation instead of removing them entirely."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["style","background-color: yellow;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed, drag-and-pop positions it on the screen such that the center of the layout’s bounding box is located at the direct extension of the user’s current mouse motion. The distance of the tip icon cluster to the user’s current cursor position is configurable. For inexperienced users, we got best results with distances of around 100 pixels; shorter distances made these users likely to overshoot the cluster. For more experienced users, we were able to reduce the distance to values around 30 pixels, which allowed these users to operate drag-and-pop with less effort, in a more “menu-like” fashion. In order to reduce visual interference between tip icons and icons on the desktop, drag-and-pop diminishes desktop icons while tip icons are visible. This may obscure the nearby icons on the desktop making it hard to access to."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The Rubber Band"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"When the tip icon cluster is displayed, users need to re-identify their targets within the tip icon cluster in order to be able to successfully acquire them. Our first implementation of drag-and-pop created tip icons on top of their bases and used slow-inslow- out animation (Shneiderman 1998) to move tip icons to their final location. While this approach allowed users to locate the final position of the desired tip icon by visually tracking it on its way from basis to final position, it also required users to either wait for the animation to complete or to acquire a moving target. We therefore chose to abandon the animation and immediately display tip icons at their final destinations. In lieu of the animation, we provided tip icons with rubber bands. The design prototype of the rubber band is shown in Figure 6. For performance reasons, our prototype, which is shown in all other screenshots, uses rubber bands of a lower level of graphical detail, i.e., a tape and three lines in the color scheme of the corresponding icon. The purpose of the rubber band is to offer the functionality of the animation, but without the problems alluded to above. The rubber band, decorated with the respective icon’s texture, can be thought of as having been created by taking a photograph of the tip icon animation with a very long shutter speed (so-called motion blur, e.g., Dachille and Kaufman, 2000). Like the animation, the rubber band allows users to trace the path from base to tip icon. However, users can do this at their own pace and the customized texturing of the rubber band allows users to start tracing it anywhere, not only at the base."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The rubber band is provided with a narrow midriff section, suggesting that the rubber band is elastic. This design was chosen to help users understand that tip icons have retracted to their bases when they disappear at the end of the interaction. This feature may also help users find their way to the tip icon faster, because it provides users with a visual cue about how far away the tip icon is located. A thick rubber band section implies that the tip icon (or base) is close; a thin rubber band section indicates that the target is further away."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Aborting Drag-and-Pop Interactions"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["style","background-color: yellow;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"As soon as tip icons and rubber bands are shown on the screen, drag-and-pop waits for the user to acquire one of the tip icons to complete the ongoing drag-and-pop or drag-and-pick interaction. There are two cases, however, in which users will want to abort the interaction without acquiring a tip icon. The first case is when the user dragged the mouse at a wrong angle so that the desired target icon did not pop up. In this case, the user may either drop the icon and try again or complete the interaction as a regular drag-and-drop interaction, i.e., by dropping the icon onto the target icon’s base instead. The other case occurs if the user is intending to perform a regular mouse drag operation, for example to rearrange icons on the desktop or to capture a set of icons using a lasso operation. For these cases, drag-and-pop allows users to terminate tip icons onthe- fly and to complete the interaction without dragand- pop/pick. To abort, users have to move the mouse cursor away from the tip icon cluster while still keeping the mouse depressed. This can be done by overshooting the cluster or by changing mouse direction. In particular, this allows users to switch to the normal drag-and-drop and lasso-select functionality by introducing a simple zigzag gesture into their cursor path. The zigzag contains at least one motion segment moving away from the tip icons, thus terminating tip icons as soon as they appear. The algorithm: the tip icon cluster is kept alive as long as at least one of the following three rules is successful. The first rule checks whether the mouse cursor has moved closer to the center of at least one of the icons in the tip icon cluster. This rule makes sure that the cluster does not disappear while users approach their targets. The second rule checks if the cursor is in the direct vicinity of an icon. This rule provides tolerance against users overshooting a tip icon while acquiring it. The third and last rule keeps the cluster alive if the cursor is stationary or if it is moving backwards very slowly (up to 5 pxl/frame). This rule makes drag-and-pop insensitive to jitter. Figure 7 illustrates the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"User Study"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In this section, we report the results of a user study comparing drag-and-pop with the traditional dragand- drop technique. To examine the effects of bezelcrossing as well as distance, as described in Scenarios 2 and 3, we chose to run the study on a tiled wall-size display. During the study, in which participants filed icons into folders or dragged them onto the icons of matching applications, we recorded the time and accuracy of these movements. Our main hypothesis was that participants would perform faster when using the drag-and-pop interface, primarily because it would avoid the need for crossing the bezels, but also because it would bridge the space to very distant icons more efficiently."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Desktop Layout"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"To obtain a representative set of icon arrangements for the study, we gathered desktop screenshots from 25 coworkers who volunteered their participation (15 single, 6 dual, and 4 triple monitor users). Overall resolutions ranged from 800,000 pixels to 3,900,000 pixels (66% more than the display wall used in the experiment)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We clustered the obtained desktops by number of icons and arrangement pattern. Then we chose representatives from each of the three resulting main clusters for the study (Figure 8). The “sparse” desktop reflected the desktops of roughly two thirds of the participants. It contained only 11 icons, most of which were lined up in the top left corner of the screen. The “frame” desktop reflected the desktops of three of the participants. It contained 28 icons arranged around the top, left, and right edge of the screen. The “cluttered” desktop, finally, contained 35 icons that were spread primarily across the top and left half of the screen. Five participants had chosen this style of arranging their icons. Icon layouts were stretched to fit the aspect ratio of the display wall used in the experiment. An area at the bottom right of the screen was reserved for the starting locations of the icons to be filed during the study (dashed shape in Figure 8)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Eight colleagues with no experience using drag-andpop were recruited for this experiment. Due to technical problems, the data from one of these participants had to be dropped leaving us with 7. There were 2 female and 5 male participants ranging in age between 18 and 35. All were right handed with normal or corrected-to-normal vision."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Method"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The test was run on the DynaWall (Streitz, 2001), a display wall consisting of three Smartboard units (Figure 9). Each Smartboard consisted of a backprojected 72”display with resistive touch input, so that the entire display was 15’ (4.50m) long and 45” (1.12m) high. Display units could be operated by touching the display, but for easier handling participants were provided with color-free felt pens. Each of the three display units ran at a resolution of 1024x768 pixels, offering an overall resolution of 3072x768 pixels. The three display units were connected to a single PC equipped with two Matrox Millennium graphics cards and running WindowsXP. During the experiment, the DynaWall ran a simulated Windows desktop. We compared dragand- pop to a control condition of drag-and-drop. Since our preliminary Windows-based version of drag-and-pop did not support the full functionality required for the study, we implemented a simulation using Macromedia Flash (www.macromedia.com). The drag-and-pop interface used in the experiment was configured to a  30 degree target sector, 35 pixel target distance, and a maximum number of 5 tip icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"To each desktop layout we added 10 document icons in the lower right quadrant of the screen. These appeared in six different arrangements (Figure 8 shows 2 of them). The participants’ task was to drag these icons into a given target folder or application. Icons of image files, for example, were to be filed in a folder labeled “My Pictures” and all Word documents should be dropped onto the Word application. To counterbalance for order effects, we required participants to file the documents in a randomized order. That is, for each movement, the item to be filed was highlighted along with the target icon. All other document icons were frozen, so that participants could only move the highlighted icon. As soon as participants began moving an item, all highlighting was removed, forcing participants to remember the destination item. We did this to assure that participants would have to re-identify tip icons when using the drag-and-pop interface, just as they would in a real-world task."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants were allowed several minutes to practice moving and filing icons in the prototype to get them accustomed to both the DynaWall display and the drag-and-pop interface. Once it was clear that users understood how to use the display and the interfaces, they were allowed to go on to the study. Participants filed 2 sets of icons for each interface (drag-and-pop and control), for each of the three desktops. Thus participants filed 2 x 10 icons x 2 interface x 3 desktops for a total of 120 movements. To mitigate learning effects associated with new desktop arrangements or a new interface, we omitted the first 5 trials for any desktop-interface combination from our analyses, yielding ~15 correct trials per cell or 90 movements per participant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Results"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Task Performance"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Task performance was evaluated through speed and accuracy measurements. Error rates were considerably larger for drag-and-pop than for the control (6.7% vs. 1%). We observed two things that made this type of error more likely in the drag-and-pop condition. First, in the drag-and-pop condition candidate targets were brought closer together, making it easier to accidentally drop an item on the wrong target. Second, because drag-and-pop targets had been translated away from their “home” location, participants would sometimes forget which item was in fact the target, especially if visually similar icons (e.g., other folders) had created tip icons as well. All data analyses for movement times were performed on the median movement times for each participant in each condition to normalize the typical skewing associated with response time data. Summary statistics report the means of these times. Target icons could be located in the same display unit as the icon to be filed, in a neighbor display unit, or in the display unit at the other end of the display wall, requiring users to cross 0, 1, or 2 bezels in order to file the icon. To test the effect of bezel crossing on performance, we ran a 2 (Condition) x 3 (Bezels Crossed) within subjects ANOVA on the median movement data. This revealed a significant main effect for condition, F(1,6) = 18.2, p less than 0.01 Collapsed across all distances, drag-and-pop was significantly faster than the control. There was also a significant main effect of bezels crossed, F(2,12)=19.5, p less than 0.01; movement time increased as the number of bezels participants had to cross to get to the target icon increased. As hypothesized, we also saw a significant interaction between condition and number of bezels crossed, F(2,12)=15.2, p less than 0.01. As seen in Figure 10, an increase in the number of crossed bezels resulted in only a small increase in movement time for drag-and-pop, whereas it had a huge effect for the control interface. When no bezels had to be crossed, drag-and-pop appeared to be slightly slower than control, although follow-up t-tests showed that this difference was not significant, t(6)=1.73, ns. When 1 or 2 bezels had to be crossed, drag-and-pop was significantly faster than drag-and-drop (t(6)=4.02, p less than 0.01 & t(6)=4.12, p less than 0.01, respectively). With 1 bezel crossed, dragand- pop was twice as fast as the control and with 2 bezels it was 3.7 times as fast."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 11 shows a scatter plot of movement time versus target distance for both conditions. The best linear fit for drag-and-drop was f(x)=0.007x-1.76, r2=0.23. The linear fit for drag-and-pop was f(x)=4.19, r2 less than 0.0001. This reinforces what can be seen in Figure 10—movement time increases with distance for the control interface, but stays relatively constant for the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Questionnaire and Subjective Feedback"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","attributes":[["style","background-color: yellow;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"At the end of the study, participants answered a short questionnaire about their experience using the DynaWall and drag-and-pop. Participants were very enthusiastic about drag-and-pop. On a 7 point Likert scale (where 7=strongly agree and 1=strongly disagree), there was a mean > 6 for questions such as, “I liked using drag-and-pop”, “I always understood what was happening when drag-and-pop was on,”and “I would use drag-and-pop for large displays.” There was a mean of less than 3 for “It took a long time to get used to drag-and-pop” and “It was hard to control what the targets did when drag-and-pop was on.” Participants reported the drag-and-pop interface to cause less manual stress and fatigue than the control interface. The most common problem with drag-and-pop was in getting the right group of targets to pop up, and several participants requested a wider angle for destination targets. This relates to an observation we made about how people interact with touch-sensitive wall-displays. On the wall display, participants had to employ their whole arm to make a movement, resulting in targeting motions in the shape of arcs. This means that the initial direction of the movement was not in the direction of the target. To accommodate such arcs in the future, we have adapted the target selection algorithm of drag-and-pop by giving the target sector extra tolerance for movements towards the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Conclusions and Future Work"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The substantial time-savings found in the user study confirm our expectations. Although when used within a single screen unit drag-and-pop does not seem to by faster than traditional drag and drop (first pair of bars in Figure 10; drag-and-pop’s capability of bridging distance to the target seems to be nullified by the need for re-orientation), its advantages on very large screens and its capability of bridging across display units are apparent. On the usability side, we were glad to see that participants had no trouble learning how to use the technique and that they described the technique as understandable and predictable. The single biggest shortcoming, the target selection, is the subjects of current work. In addition to the changes described above, we consider dropping the notion of a fixed target sector size and replace it with a mechanism that adjusts the sector size dynamically based on the number of matching targets. Given the recent advent of commercially available tablet computers, our next step will be to explore how drag-and-pop and especially drag-andpick can help tablet computer users work with external monitors. While this paper focused on icons, we plan to explore ways of operating menus, sliders, and entire applications using the techniques described in this article."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"}]},"fileName":"drag-and-pop.html","index":1,"_id":"uMkZleQCsd0cp4RK"}
