{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n  "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","generator"],["content","pandoc"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0, user-scalable=yes"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"US20150330429A1"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":8,"nodeName":"#comment","nodeValue":"[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The \"Prince\" Technique: Fitts' Law and Selection Using Area Cursors"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In most GUIs, selection is effected by placing the point of the mouse-driven cursor over the area of the object to be selected. Fitts' law is commonly used to model such target acquisition, with the term A representing the amplitude, or distance, of the target from the cursor, and W the width of the target area. As the W term gets smaller, the index of difficulty of the task increases. The extreme case of this is when the target is a point. In this paper, we show that selection in such cases can be facilitated if the cursor is an area, rather than a point. Furthermore, we show that when the target is a point and the width of the cursor is W, that Fitts' law still holds. An experiment is presented and the implications of the technique are discussed for both 2D and 3D interfaces."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"KEYWORDS:"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Input techniques, graphical user interfaces, Fitts' law, haptic input."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"INTRODUCTION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Although the traditional method of selection in direct- manipulation systems is generally effective, there are certain conditions where it breaks down. One of these is when the target is very small. The extreme case of this is when the target is a point. The reason for the problem can best be explained by Fitts' law [3, 8]"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We see that the index of difficulty (ID) of a target acquisition task is a function of the amplitude (A), or distance, of the target from the cursor, and the width of the target (W). The index of difficulty rises as the width of the target gets smaller."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor1.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With most conventional GUIs, the selection tool is a point, such as represented by the point of an arrow shaped cursor, or the intersection of the lines in a cross-hair cursor (Figure 1). In the extreme case, therefore, we are selecting a point with a point."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The purpose of the research described in this paper is to explore an alternative approach whereby (in the 2D case) the cursor is represented by an area, rather than by a point. Just as the area of a fly-swatter makes it easier to swat a small fly, likewise the area of such a cursor should make it easier to select small targets and points."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"More formally, it is our claim that selecting a small target with an area cursor can be modeled by a slight twist of Fitts' law, namely, that the W term now applies to the width of the cursor, rather than the width of the target. Figure 2 illustrates the approach using an area cursor, as well as the traditional approach"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In what follows, we report on an experiment that demonstrates the applicability of Fitts' law to selecting point targets with an area cursor. We follow this with a discussion of the design implications of our findings to other 2D and 3D tasks."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Finally, due to the similarity of their benefits, we name the use of area cursors after the first manufacturer of oversized tennis rackets: the Prince technique"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"THE EXPERIMENT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Twelve students from the University of Toronto participated as paid volunteers. All had experience using the mouse and were strongly right handed based on the Edinburgh Handedness Inventory [10]."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Apparatus"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Equipment was an Apple Macintosh llfx with 13-inch RGB monitor. Subjects performed the tasks using their right hand and a standard mouse. The control/display ratio of the mouse was adjusted to the second fastest setting on the Macintosh Control Panel. Since even small lags (75 ms) in display response have been found to degrade human performance on Fitts' law tasks [5, 9], the software was optimized to ensure that drawing updates did not delay movement of the Prince cursor."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Before the experiment, we tested for animation delays by making the system \"arrow\" pointer visible in the center of the paddle and found that it was not possible to shake the paddle from the arrow, even at movement speeds likely to be much faster than those encountered during the experiment."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Procedure"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects performed a reciprocal point-select task using both the Fitts and Prince techniques (Figure 2). They were given written instructions and several warm-up trials prior to data collection. In addition, they performed one practice session on each technique."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For each technique, two targets appeared on either side of the monitor. Subjects moved the cursor back and forth between the targets and selected each target by pressing and releasing the mouse button. They were instructed to balance speed and accuracy for an error rate around 4%, and an error beep sounded if selection occurred outside the target. Results of movement time and error rate were given to subjects at the end of each session."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The cursor and the target were represented in the two techniques using different objects. In the Fitts condition the cursor was a small black dot with radius 2 pixels, and the targets were rectangles having width W and height 200 pixels. The Prince condition reversed these objects exactly (see Figure 2b), so that subjects controlled a rectangular cursor (width W, height 200 pixels) and used it to capture two target dots (radius 2 pixels). In both conditions, the rectangles were unframed and shaded light blue. The Prince cursor was transparent, so that the targets could be clearly seen beneath it. When the target and cursor overlapped, their appearance in the two techniques was nearly indistinguishable, the primary difference being which object moved or was stationary."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Design"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A fully-crossed, within-subjects factorial design with repeated measures was used. Factors were movement amplitude (64, 128, 256, and 512 pixels), target or cursor width (8, 16, 32, and 64 pixels), and technique (Fitts and Prince). The amplitude and width conditions yielded seven levels of task difficulty, ranging from I bit to 6.02 bits. The A-W conditions were presented in random order with a block of ten trials performed at each condition. A session consisted of a sequence of sixteen blocks covering all A-W conditions. After training, ten sessions were performed in all, alternating between the Fitts (five sessions) and the Prince (five sessions) techniques. The order of techniques was counterbalanced, with half of the subjects beginning with the Prince technique and the other half with the Fitts technique. Subjects took about one hour to complete the experiment."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Dependent variables were movement time (M7), error rate (£/?), constant error (C£), and variable error (VE). The latter two measures were used to describe the quality of placement of the response selections [11], CE was measured in the horizontal axis, as the signed distance between target and cursor centers at the moment a selection occurred, and was used to detect systematic trends towards undershooting or overshooting the target center. VE captures the endpoint variability of responses and corresponds to effective target width (Wg = 4.133 x SDx, see [8])."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Results"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There were significant main effects of tecfinique on all four dependent variables. While subjects were slower using the Prince technique (900 ms vs. 841 ms; F i j o = 273.5, p < .001), they produced fewer errors (2.8% vs. 3.6%; = 15.7, p < .005) and tended to aim nearer to the target centers (CE = -.922 vs. -1.787 pixels; F i j o = 27.0, p < .001). Subjects therefore appear to have been more careful when making selections with the Prince technique. This did not however provide an advantage in terms of motor response variability. With both techniques, VE was very close to the average nominal width of 30 pixels. However, VE was 30.9 pixels in the Prince technique and 29.5 pixels in the Fitts technique, so subjects were somewhat less variable in endpoint placement using the Fitts technique (FI,io = 9.40,/><.02)."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor3.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This suggests that the bias towards accuracy rather than speed in the Prince technique was due to its unfamiliarity. We investigated this possibility further, by examining performance in relation to learning phase over the five sessions (Figure 3). The analysis revealed a main effect of session on Afr(F4 4o= 11.8, p < .001) representing a small improvement for both techniques, in total less than 8% from sessions 1 to 5. A significant effect of session on CE (F4^4o = 10.4, p < .001) suggests that subjects also increasingly undershot the targets as they grew more confident with the task. They were able to do so without incurring greater errors or endpoint variability, as evidenced by the lack of session effects on ER {F^^^q = 1.07, p > .05) and VE (F4,4o = .543). However, the'two- way interaction of technique x session was not significant for any of the four dependent variables (^4^40 < 1.06, p > .05), implying that the speed-accuracy tradeoff in the Prince technique did not change relative to the Fitts technique even as subjects progressed through the trials. Thus, it is unclear from the present data to what extent further practice with the Prince technique would have altered its accuracy bias."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Discussion"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"While the results clearly demonstrate that Fitts' law applies to the Prince technique, a question remains as to why the performance differences between techniques were reflected in the intercept of the regression lines, rather than the slope."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One interpretation of the intercept is that it represents time spent on the targets rather than time spent moving between them [13, p. 146]. Considered in this way, \"time on target\" includes only the time the cursor is held motionless over the target."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For the reciprocal aiming task used in this experiment, time on target would include the time necessary for the subject to verify that the cursor is over the target, the time to execute the button press itself, as well as preparation time to program the next movement, as in [1]. There is evidence that the verification component, in particular, is sensitive to the accuracy demands and objectives of the task [1, 6, 12]. Thus, if subjects in our experiment were in fact being somewhat more careful with the Prince technique than the Fitts technique, this may have increased their verification time and hence the intercept."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"DESIGN IMPLICATIONS"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\"The Prince and the Pointer\""}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Having established that the area and standard cursors follow similar prediction models, we now consider some of the properties of using an area cursor as a positioning and selecting tool."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There appear to be two main benefits of applying the Prince technique. The first is illustrated in Figure 5 and contrasts the difficulty of acquiring a small target using the standard cross-hair cursor and a rectangular area cursor. For such tasks, the area cursor approach is clearly much easier."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We can use the results from the experiment to quantify the difference between the two approaches. Assume the target has width W, the area cursor width W', and the distance moved in both cases is A. Then, when A/Wis large (i.e., the task is hard), the difference in index of difficulty {ID, equation 1) for the two tasks will approach \\og2{WIW)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For example, if W is 6 pixels and W is 96 pixels, the Prince technique represents a savings of about 4 bits as rated by Fitts' law. Given the performance level arrived at in the experiment (4.9 bits/s), this translates to a movement time savings of roughly .75 s per mouse selection. In the case of A = 384 pixels, for instance, this is a 93% reduction. (Of course, the movement time savings will be even larger with a device that does not perform as well as the mouse; e.g., using IP = 1.5 bits/s, reported in [7] for trackball performance during a dragging task, the predicted savings are well over 2 s per selection.)"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A second capability of the area cursor is that it may function as a \"net.\" Used in this way, an area cursor can group and select a collection of points or small objects with a single pointing movement, much as the \"lasso\" tool is used in drawing applications like MacDraw. This capability, however, also serves to illustrate a drawback with using the area cursor as the only selection tool in a GUI. This is that the Prince technique is inappropriate for fine positioning tasks, because selections may become ambiguous when displays are cluttered."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Our belief is that an effective way of exploiting the Prince technique is to combine it with the traditional point-cursor approach. Where fine positioning is not required, it may be possible to replace it by coarse positioning and the Prince technique. Furthermore, by dynamically switching between Prince and point-cursor positioning techniques, the difficulty of positioning tasks can be matched more closely to task context."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor4.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"CONCLUSION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"An alternative approach to pointing, called the Prince technique, was investigated and found to be comparable to traditional pointing methods. Because the Prince technique uses a cursor of large area or volume, it is suitable for tasks that are normally difficult with the standard pointer, such as acquiring small targets or points. We feel that the Prince technique may be especially valuable when used in conjunction with traditional pointing techniques, where it can be used to tailor task difficulty more closely to the accuracy demands of the task. The examples presented three distinct methods suggesting how this might be accomplished."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The current study is an initial probe into a rich design space. Many questions and issues remain. We investigated selection tasks involving one width parameter, either the target or the cursor. What happens when there are two width parameters, defined by moving and stationary objects? The whole issue of \"grasping\" isolated objects from among a close cluster requires much more investigation. Likewise, the 3D case of the volume cursor deserves study. It would also be worthwhile to compare and/or combine the technique with gravitational \"snapping\" techniques. Finally, for the full potential of the technique to be realized, it is likely that new affordances (such as supporting \"grasping\") need to be built into input devices, such as mice. This also requires further study."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"}],"_id":"sxvZQssp6VwOEP8z"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n  "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","generator"],["content","pandoc"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0, user-scalable=yes"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"US20150330429A1"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":8,"nodeName":"#comment","nodeValue":"[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The \"Prince\" Technique: Fitts' Law and Selection Using Area Cursors"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In most GUIs, selection is effected by placing the point of the mouse-driven cursor over the area of the object to be selected. Fitts' law is commonly used to model such target acquisition, with the term A representing the amplitude, or distance, of the target from the cursor, and W the width of the target area. As the W term gets smaller, the index of difficulty of the task increases. The extreme case of this is when the target is a point. In this paper, we show that selection in such cases can be facilitated if the cursor is an area, rather than a point. Furthermore, we show that when the target is a point and the width of the cursor is W, that Fitts' law still holds. An experiment is presented and the implications of the technique are discussed for both 2D and 3D interfaces."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"KEYWORDS:"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Input techniques, graphical user interfaces, Fitts' law, haptic input."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"INTRODUCTION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Although the traditional method of selection in direct- manipulation systems is generally effective, there are certain conditions where it breaks down. One of these is when the target is very small. The extreme case of this is when the target is a point. The reason for the problem can best be explained by Fitts' law [3, 8]"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We see that the index of difficulty (ID) of a target acquisition task is a function of the amplitude (A), or distance, of the target from the cursor, and the width of the target (W). The index of difficulty rises as the width of the target gets smaller."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor1.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With most conventional GUIs, the selection tool is a point, such as represented by the point of an arrow shaped cursor, or the intersection of the lines in a cross-hair cursor (Figure 1). In the extreme case, therefore, we are selecting a point with a point."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The purpose of the research described in this paper is to explore an alternative approach whereby (in the 2D case) the cursor is represented by an area, rather than by a point. Just as the area of a fly-swatter makes it easier to swat a small fly, likewise the area of such a cursor should make it easier to select small targets and points."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"More formally, it is our claim that selecting a small target with an area cursor can be modeled by a slight twist of Fitts' law, namely, that the W term now applies to the width of the cursor, rather than the width of the target. Figure 2 illustrates the approach using an area cursor, as well as the traditional approach"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In what follows, we report on an experiment that demonstrates the applicability of Fitts' law to selecting point targets with an area cursor. We follow this with a discussion of the design implications of our findings to other 2D and 3D tasks."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Finally, due to the similarity of their benefits, we name the use of area cursors after the first manufacturer of oversized tennis rackets: the Prince technique"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"THE EXPERIMENT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Twelve students from the University of Toronto participated as paid volunteers. All had experience using the mouse and were strongly right handed based on the Edinburgh Handedness Inventory [10]."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Apparatus"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Equipment was an Apple Macintosh llfx with 13-inch RGB monitor. Subjects performed the tasks using their right hand and a standard mouse. The control/display ratio of the mouse was adjusted to the second fastest setting on the Macintosh Control Panel. Since even small lags (75 ms) in display response have been found to degrade human performance on Fitts' law tasks [5, 9], the software was optimized to ensure that drawing updates did not delay movement of the Prince cursor."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Before the experiment, we tested for animation delays by making the system \"arrow\" pointer visible in the center of the paddle and found that it was not possible to shake the paddle from the arrow, even at movement speeds likely to be much faster than those encountered during the experiment."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Procedure"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects performed a reciprocal point-select task using both the Fitts and Prince techniques (Figure 2). They were given written instructions and several warm-up trials prior to data collection. In addition, they performed one practice session on each technique."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For each technique, two targets appeared on either side of the monitor. Subjects moved the cursor back and forth between the targets and selected each target by pressing and releasing the mouse button. They were instructed to balance speed and accuracy for an error rate around 4%, and an error beep sounded if selection occurred outside the target. Results of movement time and error rate were given to subjects at the end of each session."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The cursor and the target were represented in the two techniques using different objects. In the Fitts condition the cursor was a small black dot with radius 2 pixels, and the targets were rectangles having width W and height 200 pixels. The Prince condition reversed these objects exactly (see Figure 2b), so that subjects controlled a rectangular cursor (width W, height 200 pixels) and used it to capture two target dots (radius 2 pixels). In both conditions, the rectangles were unframed and shaded light blue. The Prince cursor was transparent, so that the targets could be clearly seen beneath it. When the target and cursor overlapped, their appearance in the two techniques was nearly indistinguishable, the primary difference being which object moved or was stationary."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Design"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A fully-crossed, within-subjects factorial design with repeated measures was used. Factors were movement amplitude (64, 128, 256, and 512 pixels), target or cursor width (8, 16, 32, and 64 pixels), and technique (Fitts and Prince). The amplitude and width conditions yielded seven levels of task difficulty, ranging from I bit to 6.02 bits. The A-W conditions were presented in random order with a block of ten trials performed at each condition. A session consisted of a sequence of sixteen blocks covering all A-W conditions. After training, ten sessions were performed in all, alternating between the Fitts (five sessions) and the Prince (five sessions) techniques. The order of techniques was counterbalanced, with half of the subjects beginning with the Prince technique and the other half with the Fitts technique. Subjects took about one hour to complete the experiment."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Dependent variables were movement time (M7), error rate (£/?), constant error (C£), and variable error (VE). The latter two measures were used to describe the quality of placement of the response selections [11], CE was measured in the horizontal axis, as the signed distance between target and cursor centers at the moment a selection occurred, and was used to detect systematic trends towards undershooting or overshooting the target center. VE captures the endpoint variability of responses and corresponds to effective target width (Wg = 4.133 x SDx, see [8])."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Results"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There were significant main effects of tecfinique on all four dependent variables. While subjects were slower using the Prince technique (900 ms vs. 841 ms; F i j o = 273.5, p < .001), they produced fewer errors (2.8% vs. 3.6%; = 15.7, p < .005) and tended to aim nearer to the target centers (CE = -.922 vs. -1.787 pixels; F i j o = 27.0, p < .001). Subjects therefore appear to have been more careful when making selections with the Prince technique. This did not however provide an advantage in terms of motor response variability. With both techniques, VE was very close to the average nominal width of 30 pixels. However, VE was 30.9 pixels in the Prince technique and 29.5 pixels in the Fitts technique, so subjects were somewhat less variable in endpoint placement using the Fitts technique (FI,io = 9.40,/><.02)."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor3.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This suggests that the bias towards accuracy rather than speed in the Prince technique was due to its unfamiliarity. We investigated this possibility further, by examining performance in relation to learning phase over the five sessions (Figure 3). The analysis revealed a main effect of session on Afr(F4 4o= 11.8, p < .001) representing a small improvement for both techniques, in total less than 8% from sessions 1 to 5. A significant effect of session on CE (F4^4o = 10.4, p < .001) suggests that subjects also increasingly undershot the targets as they grew more confident with the task. They were able to do so without incurring greater errors or endpoint variability, as evidenced by the lack of session effects on ER {F^^^q = 1.07, p > .05) and VE (F4,4o = .543). However, the'two- way interaction of technique x session was not significant for any of the four dependent variables (^4^40 < 1.06, p > .05), implying that the speed-accuracy tradeoff in the Prince technique did not change relative to the Fitts technique even as subjects progressed through the trials. Thus, it is unclear from the present data to what extent further practice with the Prince technique would have altered its accuracy bias."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Discussion"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"While the results clearly demonstrate that Fitts' law applies to the Prince technique, a question remains as to why the performance differences between techniques were reflected in the intercept of the regression lines, rather than the slope."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One interpretation of the intercept is that it represents time spent on the targets rather than time spent moving between them [13, p. 146]. Considered in this way, \"time on target\" includes only the time the cursor is held motionless over the target."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For the reciprocal aiming task used in this experiment, time on target would include the time necessary for the subject to verify that the cursor is over the target, the time to execute the button press itself, as well as preparation time to program the next movement, as in [1]. There is evidence that the verification component, in particular, is sensitive to the accuracy demands and objectives of the task [1, 6, 12]. Thus, if subjects in our experiment were in fact being somewhat more careful with the Prince technique than the Fitts technique, this may have increased their verification time and hence the intercept."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"DESIGN IMPLICATIONS"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\"The Prince and the Pointer\""}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Having established that the area and standard cursors follow similar prediction models, we now consider some of the properties of using an area cursor as a positioning and selecting tool."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There appear to be two main benefits of applying the Prince technique. The first is illustrated in Figure 5 and contrasts the difficulty of acquiring a small target using the standard cross-hair cursor and a rectangular area cursor. For such tasks, the area cursor approach is clearly much easier."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We can use the results from the experiment to quantify the difference between the two approaches. Assume the target has width W, the area cursor width W', and the distance moved in both cases is A. Then, when A/Wis large (i.e., the task is hard), the difference in index of difficulty {ID, equation 1) for the two tasks will approach \\og2{WIW)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For example, if W is 6 pixels and W is 96 pixels, the Prince technique represents a savings of about 4 bits as rated by Fitts' law. Given the performance level arrived at in the experiment (4.9 bits/s), this translates to a movement time savings of roughly .75 s per mouse selection. In the case of A = 384 pixels, for instance, this is a 93% reduction. (Of course, the movement time savings will be even larger with a device that does not perform as well as the mouse; e.g., using IP = 1.5 bits/s, reported in [7] for trackball performance during a dragging task, the predicted savings are well over 2 s per selection.)"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A second capability of the area cursor is that it may function as a \"net.\" Used in this way, an area cursor can group and select a collection of points or small objects with a single pointing movement, much as the \"lasso\" tool is used in drawing applications like MacDraw. This capability, however, also serves to illustrate a drawback with using the area cursor as the only selection tool in a GUI. This is that the Prince technique is inappropriate for fine positioning tasks, because selections may become ambiguous when displays are cluttered."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Our belief is that an effective way of exploiting the Prince technique is to combine it with the traditional point-cursor approach. Where fine positioning is not required, it may be possible to replace it by coarse positioning and the Prince technique. Furthermore, by dynamically switching between Prince and point-cursor positioning techniques, the difficulty of positioning tasks can be matched more closely to task context."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor4.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"CONCLUSION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"An alternative approach to pointing, called the Prince technique, was investigated and found to be comparable to traditional pointing methods. Because the Prince technique uses a cursor of large area or volume, it is suitable for tasks that are normally difficult with the standard pointer, such as acquiring small targets or points. We feel that the Prince technique may be especially valuable when used in conjunction with traditional pointing techniques, where it can be used to tailor task difficulty more closely to the accuracy demands of the task. The examples presented three distinct methods suggesting how this might be accomplished."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The current study is an initial probe into a rich design space. Many questions and issues remain. We investigated selection tasks involving one width parameter, either the target or the cursor. What happens when there are two width parameters, defined by moving and stationary objects? The whole issue of \"grasping\" isolated objects from among a close cluster requires much more investigation. Likewise, the 3D case of the volume cursor deserves study. It would also be worthwhile to compare and/or combine the technique with gravitational \"snapping\" techniques. Finally, for the full potential of the technique to be realized, it is likely that new affordances (such as supporting \"grasping\") need to be built into input devices, such as mice. This also requires further study."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"}],"_id":"byUNkWRHQtTm25zl"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n  "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","generator"],["content","pandoc"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0, user-scalable=yes"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"US20150330429A1"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":8,"nodeName":"#comment","nodeValue":"[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The \"Prince\" Technique: Fitts' Law and Selection Using Area Cursors"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In most GUIs, selection is effected by placing the point of the mouse-driven cursor over the area of the object to be selected. Fitts' law is commonly used to model such target acquisition, with the term A representing the amplitude, or distance, of the target from the cursor, and W the width of the target area. As the W term gets smaller, the index of difficulty of the task increases. The extreme case of this is when the target is a point. In this paper, we show that selection in such cases can be facilitated if the cursor is an area, rather than a point. Furthermore, we show that when the target is a point and the width of the cursor is W, that Fitts' law still holds. An experiment is presented and the implications of the technique are discussed for both 2D and 3D interfaces."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"KEYWORDS:"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Input techniques, graphical user interfaces, Fitts' law, haptic input."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"INTRODUCTION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Although the traditional method of selection in direct- manipulation systems is generally effective, there are certain conditions where it breaks down. One of these is when the target is very small. The extreme case of this is when the target is a point. The reason for the problem can best be explained by Fitts' law [3, 8]"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We see that the index of difficulty (ID) of a target acquisition task is a function of the amplitude (A), or distance, of the target from the cursor, and the width of the target (W). The index of difficulty rises as the width of the target gets smaller."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor1.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With most conventional GUIs, the selection tool is a point, such as represented by the point of an arrow shaped cursor, or the intersection of the lines in a cross-hair cursor (Figure 1). In the extreme case, therefore, we are selecting a point with a point."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The purpose of the research described in this paper is to explore an alternative approach whereby (in the 2D case) the cursor is represented by an area, rather than by a point. Just as the area of a fly-swatter makes it easier to swat a small fly, likewise the area of such a cursor should make it easier to select small targets and points."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"More formally, it is our claim that selecting a small target with an area cursor can be modeled by a slight twist of Fitts' law, namely, that the W term now applies to the width of the cursor, rather than the width of the target. Figure 2 illustrates the approach using an area cursor, as well as the traditional approach"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In what follows, we report on an experiment that demonstrates the applicability of Fitts' law to selecting point targets with an area cursor. We follow this with a discussion of the design implications of our findings to other 2D and 3D tasks."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Finally, due to the similarity of their benefits, we name the use of area cursors after the first manufacturer of oversized tennis rackets: the Prince technique"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"THE EXPERIMENT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Twelve students from the University of Toronto participated as paid volunteers. All had experience using the mouse and were strongly right handed based on the Edinburgh Handedness Inventory [10]."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Apparatus"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Equipment was an Apple Macintosh llfx with 13-inch RGB monitor. Subjects performed the tasks using their right hand and a standard mouse. The control/display ratio of the mouse was adjusted to the second fastest setting on the Macintosh Control Panel. Since even small lags (75 ms) in display response have been found to degrade human performance on Fitts' law tasks [5, 9], the software was optimized to ensure that drawing updates did not delay movement of the Prince cursor."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Before the experiment, we tested for animation delays by making the system \"arrow\" pointer visible in the center of the paddle and found that it was not possible to shake the paddle from the arrow, even at movement speeds likely to be much faster than those encountered during the experiment."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Procedure"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects performed a reciprocal point-select task using both the Fitts and Prince techniques (Figure 2). They were given written instructions and several warm-up trials prior to data collection. In addition, they performed one practice session on each technique."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For each technique, two targets appeared on either side of the monitor. Subjects moved the cursor back and forth between the targets and selected each target by pressing and releasing the mouse button. They were instructed to balance speed and accuracy for an error rate around 4%, and an error beep sounded if selection occurred outside the target. Results of movement time and error rate were given to subjects at the end of each session."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The cursor and the target were represented in the two techniques using different objects. In the Fitts condition the cursor was a small black dot with radius 2 pixels, and the targets were rectangles having width W and height 200 pixels. The Prince condition reversed these objects exactly (see Figure 2b), so that subjects controlled a rectangular cursor (width W, height 200 pixels) and used it to capture two target dots (radius 2 pixels). In both conditions, the rectangles were unframed and shaded light blue. The Prince cursor was transparent, so that the targets could be clearly seen beneath it. When the target and cursor overlapped, their appearance in the two techniques was nearly indistinguishable, the primary difference being which object moved or was stationary."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Design"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A fully-crossed, within-subjects factorial design with repeated measures was used. Factors were movement amplitude (64, 128, 256, and 512 pixels), target or cursor width (8, 16, 32, and 64 pixels), and technique (Fitts and Prince). The amplitude and width conditions yielded seven levels of task difficulty, ranging from I bit to 6.02 bits. The A-W conditions were presented in random order with a block of ten trials performed at each condition. A session consisted of a sequence of sixteen blocks covering all A-W conditions. After training, ten sessions were performed in all, alternating between the Fitts (five sessions) and the Prince (five sessions) techniques. The order of techniques was counterbalanced, with half of the subjects beginning with the Prince technique and the other half with the Fitts technique. Subjects took about one hour to complete the experiment."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Dependent variables were movement time (M7), error rate (£/?), constant error (C£), and variable error (VE). The latter two measures were used to describe the quality of placement of the response selections [11], CE was measured in the horizontal axis, as the signed distance between target and cursor centers at the moment a selection occurred, and was used to detect systematic trends towards undershooting or overshooting the target center. VE captures the endpoint variability of responses and corresponds to effective target width (Wg = 4.133 x SDx, see [8])."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Results"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There were significant main effects of tecfinique on all four dependent variables. While subjects were slower using the Prince technique (900 ms vs. 841 ms; F i j o = 273.5, p < .001), they produced fewer errors (2.8% vs. 3.6%; = 15.7, p < .005) and tended to aim nearer to the target centers (CE = -.922 vs. -1.787 pixels; F i j o = 27.0, p < .001). Subjects therefore appear to have been more careful when making selections with the Prince technique. This did not however provide an advantage in terms of motor response variability. With both techniques, VE was very close to the average nominal width of 30 pixels. However, VE was 30.9 pixels in the Prince technique and 29.5 pixels in the Fitts technique, so subjects were somewhat less variable in endpoint placement using the Fitts technique (FI,io = 9.40,/><.02)."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor3.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This suggests that the bias towards accuracy rather than speed in the Prince technique was due to its unfamiliarity. We investigated this possibility further, by examining performance in relation to learning phase over the five sessions (Figure 3). The analysis revealed a main effect of session on Afr(F4 4o= 11.8, p < .001) representing a small improvement for both techniques, in total less than 8% from sessions 1 to 5. A significant effect of session on CE (F4^4o = 10.4, p < .001) suggests that subjects also increasingly undershot the targets as they grew more confident with the task. They were able to do so without incurring greater errors or endpoint variability, as evidenced by the lack of session effects on ER {F^^^q = 1.07, p > .05) and VE (F4,4o = .543). However, the'two- way interaction of technique x session was not significant for any of the four dependent variables (^4^40 < 1.06, p > .05), implying that the speed-accuracy tradeoff in the Prince technique did not change relative to the Fitts technique even as subjects progressed through the trials. Thus, it is unclear from the present data to what extent further practice with the Prince technique would have altered its accuracy bias."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Discussion"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"While the results clearly demonstrate that Fitts' law applies to the Prince technique, a question remains as to why the performance differences between techniques were reflected in the intercept of the regression lines, rather than the slope."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One interpretation of the intercept is that it represents time spent on the targets rather than time spent moving between them [13, p. 146]. Considered in this way, \"time on target\" includes only the time the cursor is held motionless over the target."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For the reciprocal aiming task used in this experiment, time on target would include the time necessary for the subject to verify that the cursor is over the target, the time to execute the button press itself, as well as preparation time to program the next movement, as in [1]. There is evidence that the verification component, in particular, is sensitive to the accuracy demands and objectives of the task [1, 6, 12]. Thus, if subjects in our experiment were in fact being somewhat more careful with the Prince technique than the Fitts technique, this may have increased their verification time and hence the intercept."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"DESIGN IMPLICATIONS"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\"The Prince and the Pointer\""}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Having established that the area and standard cursors follow similar prediction models, we now consider some of the properties of using an area cursor as a positioning and selecting tool."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There appear to be two main benefits of applying the Prince technique. The first is illustrated in Figure 5 and contrasts the difficulty of acquiring a small target using the standard cross-hair cursor and a rectangular area cursor. For such tasks, the area cursor approach is clearly much easier."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We can use the results from the experiment to quantify the difference between the two approaches. Assume the target has width W, the area cursor width W', and the distance moved in both cases is A. Then, when A/Wis large (i.e., the task is hard), the difference in index of difficulty {ID, equation 1) for the two tasks will approach \\og2{WIW)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For example, if W is 6 pixels and W is 96 pixels, the Prince technique represents a savings of about 4 bits as rated by Fitts' law. Given the performance level arrived at in the experiment (4.9 bits/s), this translates to a movement time savings of roughly .75 s per mouse selection. In the case of A = 384 pixels, for instance, this is a 93% reduction. (Of course, the movement time savings will be even larger with a device that does not perform as well as the mouse; e.g., using IP = 1.5 bits/s, reported in [7] for trackball performance during a dragging task, the predicted savings are well over 2 s per selection.)"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A second capability of the area cursor is that it may function as a \"net.\" Used in this way, an area cursor can group and select a collection of points or small objects with a single pointing movement, much as the \"lasso\" tool is used in drawing applications like MacDraw. This capability, however, also serves to illustrate a drawback with using the area cursor as the only selection tool in a GUI. This is that the Prince technique is inappropriate for fine positioning tasks, because selections may become ambiguous when displays are cluttered."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Our belief is that an effective way of exploiting the Prince technique is to combine it with the traditional point-cursor approach. Where fine positioning is not required, it may be possible to replace it by coarse positioning and the Prince technique. Furthermore, by dynamically switching between Prince and point-cursor positioning techniques, the difficulty of positioning tasks can be matched more closely to task context."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor4.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"CONCLUSION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"An alternative approach to pointing, called the Prince technique, was investigated and found to be comparable to traditional pointing methods. Because the Prince technique uses a cursor of large area or volume, it is suitable for tasks that are normally difficult with the standard pointer, such as acquiring small targets or points. We feel that the Prince technique may be especially valuable when used in conjunction with traditional pointing techniques, where it can be used to tailor task difficulty more closely to the accuracy demands of the task. The examples presented three distinct methods suggesting how this might be accomplished."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The current study is an initial probe into a rich design space. Many questions and issues remain. We investigated selection tasks involving one width parameter, either the target or the cursor. What happens when there are two width parameters, defined by moving and stationary objects? The whole issue of \"grasping\" isolated objects from among a close cluster requires much more investigation. Likewise, the 3D case of the volume cursor deserves study. It would also be worthwhile to compare and/or combine the technique with gravitational \"snapping\" techniques. Finally, for the full potential of the technique to be realized, it is likely that new affordances (such as supporting \"grasping\") need to be built into input devices, such as mice. This also requires further study."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"}],"_id":"R1K8lzH3FBsvUmDN"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n  "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","generator"],["content","pandoc"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0, user-scalable=yes"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"US20150330429A1"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":8,"nodeName":"#comment","nodeValue":"[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The \"Prince\" Technique: Fitts' Law and Selection Using Area Cursors"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In most GUIs, selection is effected by placing the point of the mouse-driven cursor over the area of the object to be selected. Fitts' law is commonly used to model such target acquisition, with the term A representing the amplitude, or distance, of the target from the cursor, and W the width of the target area. As the W term gets smaller, the index of difficulty of the task increases. The extreme case of this is when the target is a point. In this paper, we show that selection in such cases can be facilitated if the cursor is an area, rather than a point. Furthermore, we show that when the target is a point and the width of the cursor is W, that Fitts' law still holds. An experiment is presented and the implications of the technique are discussed for both 2D and 3D interfaces."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"KEYWORDS:"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Input techniques, graphical user interfaces, Fitts' law, haptic input."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"INTRODUCTION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Although the traditional method of selection in direct- manipulation systems is generally effective, there are certain conditions where it breaks down. One of these is when the target is very small. The extreme case of this is when the target is a point. The reason for the problem can best be explained by Fitts' law [3, 8]"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We see that the index of difficulty (ID) of a target acquisition task is a function of the amplitude (A), or distance, of the target from the cursor, and the width of the target (W). The index of difficulty rises as the width of the target gets smaller."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor1.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With most conventional GUIs, the selection tool is a point, such as represented by the point of an arrow shaped cursor, or the intersection of the lines in a cross-hair cursor (Figure 1). In the extreme case, therefore, we are selecting a point with a point."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The purpose of the research described in this paper is to explore an alternative approach whereby (in the 2D case) the cursor is represented by an area, rather than by a point. Just as the area of a fly-swatter makes it easier to swat a small fly, likewise the area of such a cursor should make it easier to select small targets and points."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"More formally, it is our claim that selecting a small target with an area cursor can be modeled by a slight twist of Fitts' law, namely, that the W term now applies to the width of the cursor, rather than the width of the target. Figure 2 illustrates the approach using an area cursor, as well as the traditional approach"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In what follows, we report on an experiment that demonstrates the applicability of Fitts' law to selecting point targets with an area cursor. We follow this with a discussion of the design implications of our findings to other 2D and 3D tasks."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Finally, due to the similarity of their benefits, we name the use of area cursors after the first manufacturer of oversized tennis rackets: the Prince technique"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"THE EXPERIMENT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Twelve students from the University of Toronto participated as paid volunteers. All had experience using the mouse and were strongly right handed based on the Edinburgh Handedness Inventory [10]."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Apparatus"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Equipment was an Apple Macintosh llfx with 13-inch RGB monitor. Subjects performed the tasks using their right hand and a standard mouse. The control/display ratio of the mouse was adjusted to the second fastest setting on the Macintosh Control Panel. Since even small lags (75 ms) in display response have been found to degrade human performance on Fitts' law tasks [5, 9], the software was optimized to ensure that drawing updates did not delay movement of the Prince cursor."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Before the experiment, we tested for animation delays by making the system \"arrow\" pointer visible in the center of the paddle and found that it was not possible to shake the paddle from the arrow, even at movement speeds likely to be much faster than those encountered during the experiment."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Procedure"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects performed a reciprocal point-select task using both the Fitts and Prince techniques (Figure 2). They were given written instructions and several warm-up trials prior to data collection. In addition, they performed one practice session on each technique."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For each technique, two targets appeared on either side of the monitor. Subjects moved the cursor back and forth between the targets and selected each target by pressing and releasing the mouse button. They were instructed to balance speed and accuracy for an error rate around 4%, and an error beep sounded if selection occurred outside the target. Results of movement time and error rate were given to subjects at the end of each session."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The cursor and the target were represented in the two techniques using different objects. In the Fitts condition the cursor was a small black dot with radius 2 pixels, and the targets were rectangles having width W and height 200 pixels. The Prince condition reversed these objects exactly (see Figure 2b), so that subjects controlled a rectangular cursor (width W, height 200 pixels) and used it to capture two target dots (radius 2 pixels). In both conditions, the rectangles were unframed and shaded light blue. The Prince cursor was transparent, so that the targets could be clearly seen beneath it. When the target and cursor overlapped, their appearance in the two techniques was nearly indistinguishable, the primary difference being which object moved or was stationary."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Design"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A fully-crossed, within-subjects factorial design with repeated measures was used. Factors were movement amplitude (64, 128, 256, and 512 pixels), target or cursor width (8, 16, 32, and 64 pixels), and technique (Fitts and Prince). The amplitude and width conditions yielded seven levels of task difficulty, ranging from I bit to 6.02 bits. The A-W conditions were presented in random order with a block of ten trials performed at each condition. A session consisted of a sequence of sixteen blocks covering all A-W conditions. After training, ten sessions were performed in all, alternating between the Fitts (five sessions) and the Prince (five sessions) techniques. The order of techniques was counterbalanced, with half of the subjects beginning with the Prince technique and the other half with the Fitts technique. Subjects took about one hour to complete the experiment."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Dependent variables were movement time (M7), error rate (£/?), constant error (C£), and variable error (VE). The latter two measures were used to describe the quality of placement of the response selections [11], CE was measured in the horizontal axis, as the signed distance between target and cursor centers at the moment a selection occurred, and was used to detect systematic trends towards undershooting or overshooting the target center. VE captures the endpoint variability of responses and corresponds to effective target width (Wg = 4.133 x SDx, see [8])."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Results"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There were significant main effects of tecfinique on all four dependent variables. While subjects were slower using the Prince technique (900 ms vs. 841 ms; F i j o = 273.5, p < .001), they produced fewer errors (2.8% vs. 3.6%; = 15.7, p < .005) and tended to aim nearer to the target centers (CE = -.922 vs. -1.787 pixels; F i j o = 27.0, p < .001). Subjects therefore appear to have been more careful when making selections with the Prince technique. This did not however provide an advantage in terms of motor response variability. With both techniques, VE was very close to the average nominal width of 30 pixels. However, VE was 30.9 pixels in the Prince technique and 29.5 pixels in the Fitts technique, so subjects were somewhat less variable in endpoint placement using the Fitts technique (FI,io = 9.40,/><.02)."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor3.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This suggests that the bias towards accuracy rather than speed in the Prince technique was due to its unfamiliarity. We investigated this possibility further, by examining performance in relation to learning phase over the five sessions (Figure 3). The analysis revealed a main effect of session on Afr(F4 4o= 11.8, p < .001) representing a small improvement for both techniques, in total less than 8% from sessions 1 to 5. A significant effect of session on CE (F4^4o = 10.4, p < .001) suggests that subjects also increasingly undershot the targets as they grew more confident with the task. They were able to do so without incurring greater errors or endpoint variability, as evidenced by the lack of session effects on ER {F^^^q = 1.07, p > .05) and VE (F4,4o = .543). However, the'two- way interaction of technique x session was not significant for any of the four dependent variables (^4^40 < 1.06, p > .05), implying that the speed-accuracy tradeoff in the Prince technique did not change relative to the Fitts technique even as subjects progressed through the trials. Thus, it is unclear from the present data to what extent further practice with the Prince technique would have altered its accuracy bias."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Discussion"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"While the results clearly demonstrate that Fitts' law applies to the Prince technique, a question remains as to why the performance differences between techniques were reflected in the intercept of the regression lines, rather than the slope."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One interpretation of the intercept is that it represents time spent on the targets rather than time spent moving between them [13, p. 146]. Considered in this way, \"time on target\" includes only the time the cursor is held motionless over the target."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For the reciprocal aiming task used in this experiment, time on target would include the time necessary for the subject to verify that the cursor is over the target, the time to execute the button press itself, as well as preparation time to program the next movement, as in [1]. There is evidence that the verification component, in particular, is sensitive to the accuracy demands and objectives of the task [1, 6, 12]. Thus, if subjects in our experiment were in fact being somewhat more careful with the Prince technique than the Fitts technique, this may have increased their verification time and hence the intercept."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"DESIGN IMPLICATIONS"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\"The Prince and the Pointer\""}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Having established that the area and standard cursors follow similar prediction models, we now consider some of the properties of using an area cursor as a positioning and selecting tool."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There appear to be two main benefits of applying the Prince technique. The first is illustrated in Figure 5 and contrasts the difficulty of acquiring a small target using the standard cross-hair cursor and a rectangular area cursor. For such tasks, the area cursor approach is clearly much easier."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We can use the results from the experiment to quantify the difference between the two approaches. Assume the target has width W, the area cursor width W', and the distance moved in both cases is A. Then, when A/Wis large (i.e., the task is hard), the difference in index of difficulty {ID, equation 1) for the two tasks will approach \\og2{WIW)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For example, if W is 6 pixels and W is 96 pixels, the Prince technique represents a savings of about 4 bits as rated by Fitts' law. Given the performance level arrived at in the experiment (4.9 bits/s), this translates to a movement time savings of roughly .75 s per mouse selection. In the case of A = 384 pixels, for instance, this is a 93% reduction. (Of course, the movement time savings will be even larger with a device that does not perform as well as the mouse; e.g., using IP = 1.5 bits/s, reported in [7] for trackball performance during a dragging task, the predicted savings are well over 2 s per selection.)"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A second capability of the area cursor is that it may function as a \"net.\" Used in this way, an area cursor can group and select a collection of points or small objects with a single pointing movement, much as the \"lasso\" tool is used in drawing applications like MacDraw. This capability, however, also serves to illustrate a drawback with using the area cursor as the only selection tool in a GUI. This is that the Prince technique is inappropriate for fine positioning tasks, because selections may become ambiguous when displays are cluttered."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Our belief is that an effective way of exploiting the Prince technique is to combine it with the traditional point-cursor approach. Where fine positioning is not required, it may be possible to replace it by coarse positioning and the Prince technique. Furthermore, by dynamically switching between Prince and point-cursor positioning techniques, the difficulty of positioning tasks can be matched more closely to task context."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor4.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"CONCLUSION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"An alternative approach to pointing, called the Prince technique, was investigated and found to be comparable to traditional pointing methods. Because the Prince technique uses a cursor of large area or volume, it is suitable for tasks that are normally difficult with the standard pointer, such as acquiring small targets or points. We feel that the Prince technique may be especially valuable when used in conjunction with traditional pointing techniques, where it can be used to tailor task difficulty more closely to the accuracy demands of the task. The examples presented three distinct methods suggesting how this might be accomplished."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The current study is an initial probe into a rich design space. Many questions and issues remain. We investigated selection tasks involving one width parameter, either the target or the cursor. What happens when there are two width parameters, defined by moving and stationary objects? The whole issue of \"grasping\" isolated objects from among a close cluster requires much more investigation. Likewise, the 3D case of the volume cursor deserves study. It would also be worthwhile to compare and/or combine the technique with gravitational \"snapping\" techniques. Finally, for the full potential of the technique to be realized, it is likely that new affordances (such as supporting \"grasping\") need to be built into input devices, such as mice. This also requires further study."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"}],"_id":"lZlLWr8dp7bySSIF"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n  "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","generator"],["content","pandoc"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0, user-scalable=yes"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"US20150330429A1"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":8,"nodeName":"#comment","nodeValue":"[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The \"Prince\" Technique: Fitts' Law and Selection Using Area Cursors"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In most GUIs, selection is effected by placing the point of the mouse-driven cursor over the area of the object to be selected. Fitts' law is commonly used to model such target acquisition, with the term A representing the amplitude, or distance, of the target from the cursor, and W the width of the target area. As the W term gets smaller, the index of difficulty of the task increases. The extreme case of this is when the target is a point. In this paper, we show that selection in such cases can be facilitated if the cursor is an area, rather than a point. Furthermore, we show that when the target is a point and the width of the cursor is W, that Fitts' law still holds. An experiment is presented and the implications of the technique are discussed for both 2D and 3D interfaces."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"KEYWORDS:"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Input techniques, graphical user interfaces, Fitts' law, haptic input."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"INTRODUCTION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Although the traditional method of selection in direct- manipulation systems is generally effective, there are certain conditions where it breaks down. One of these is when the target is very small. The extreme case of this is when the target is a point. The reason for the problem can best be explained by Fitts' law [3, 8]"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We see that the index of difficulty (ID) of a target acquisition task is a function of the amplitude (A), or distance, of the target from the cursor, and the width of the target (W). The index of difficulty rises as the width of the target gets smaller."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor1.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With most conventional GUIs, the selection tool is a point, such as represented by the point of an arrow shaped cursor, or the intersection of the lines in a cross-hair cursor (Figure 1). In the extreme case, therefore, we are selecting a point with a point."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The purpose of the research described in this paper is to explore an alternative approach whereby (in the 2D case) the cursor is represented by an area, rather than by a point. Just as the area of a fly-swatter makes it easier to swat a small fly, likewise the area of such a cursor should make it easier to select small targets and points."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"More formally, it is our claim that selecting a small target with an area cursor can be modeled by a slight twist of Fitts' law, namely, that the W term now applies to the width of the cursor, rather than the width of the target. Figure 2 illustrates the approach using an area cursor, as well as the traditional approach"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In what follows, we report on an experiment that demonstrates the applicability of Fitts' law to selecting point targets with an area cursor. We follow this with a discussion of the design implications of our findings to other 2D and 3D tasks."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Finally, due to the similarity of their benefits, we name the use of area cursors after the first manufacturer of oversized tennis rackets: the Prince technique"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"THE EXPERIMENT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Twelve students from the University of Toronto participated as paid volunteers. All had experience using the mouse and were strongly right handed based on the Edinburgh Handedness Inventory [10]."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Apparatus"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Equipment was an Apple Macintosh llfx with 13-inch RGB monitor. Subjects performed the tasks using their right hand and a standard mouse. The control/display ratio of the mouse was adjusted to the second fastest setting on the Macintosh Control Panel. Since even small lags (75 ms) in display response have been found to degrade human performance on Fitts' law tasks [5, 9], the software was optimized to ensure that drawing updates did not delay movement of the Prince cursor."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Before the experiment, we tested for animation delays by making the system \"arrow\" pointer visible in the center of the paddle and found that it was not possible to shake the paddle from the arrow, even at movement speeds likely to be much faster than those encountered during the experiment."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Procedure"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects performed a reciprocal point-select task using both the Fitts and Prince techniques (Figure 2). They were given written instructions and several warm-up trials prior to data collection. In addition, they performed one practice session on each technique."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For each technique, two targets appeared on either side of the monitor. Subjects moved the cursor back and forth between the targets and selected each target by pressing and releasing the mouse button. They were instructed to balance speed and accuracy for an error rate around 4%, and an error beep sounded if selection occurred outside the target. Results of movement time and error rate were given to subjects at the end of each session."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The cursor and the target were represented in the two techniques using different objects. In the Fitts condition the cursor was a small black dot with radius 2 pixels, and the targets were rectangles having width W and height 200 pixels. The Prince condition reversed these objects exactly (see Figure 2b), so that subjects controlled a rectangular cursor (width W, height 200 pixels) and used it to capture two target dots (radius 2 pixels). In both conditions, the rectangles were unframed and shaded light blue. The Prince cursor was transparent, so that the targets could be clearly seen beneath it. When the target and cursor overlapped, their appearance in the two techniques was nearly indistinguishable, the primary difference being which object moved or was stationary."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Design"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A fully-crossed, within-subjects factorial design with repeated measures was used. Factors were movement amplitude (64, 128, 256, and 512 pixels), target or cursor width (8, 16, 32, and 64 pixels), and technique (Fitts and Prince). The amplitude and width conditions yielded seven levels of task difficulty, ranging from I bit to 6.02 bits. The A-W conditions were presented in random order with a block of ten trials performed at each condition. A session consisted of a sequence of sixteen blocks covering all A-W conditions. After training, ten sessions were performed in all, alternating between the Fitts (five sessions) and the Prince (five sessions) techniques. The order of techniques was counterbalanced, with half of the subjects beginning with the Prince technique and the other half with the Fitts technique. Subjects took about one hour to complete the experiment."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Dependent variables were movement time (M7), error rate (£/?), constant error (C£), and variable error (VE). The latter two measures were used to describe the quality of placement of the response selections [11], CE was measured in the horizontal axis, as the signed distance between target and cursor centers at the moment a selection occurred, and was used to detect systematic trends towards undershooting or overshooting the target center. VE captures the endpoint variability of responses and corresponds to effective target width (Wg = 4.133 x SDx, see [8])."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Results"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There were significant main effects of tecfinique on all four dependent variables. While subjects were slower using the Prince technique (900 ms vs. 841 ms; F i j o = 273.5, p < .001), they produced fewer errors (2.8% vs. 3.6%; = 15.7, p < .005) and tended to aim nearer to the target centers (CE = -.922 vs. -1.787 pixels; F i j o = 27.0, p < .001). Subjects therefore appear to have been more careful when making selections with the Prince technique. This did not however provide an advantage in terms of motor response variability. With both techniques, VE was very close to the average nominal width of 30 pixels. However, VE was 30.9 pixels in the Prince technique and 29.5 pixels in the Fitts technique, so subjects were somewhat less variable in endpoint placement using the Fitts technique (FI,io = 9.40,/><.02)."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor3.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This suggests that the bias towards accuracy rather than speed in the Prince technique was due to its unfamiliarity. We investigated this possibility further, by examining performance in relation to learning phase over the five sessions (Figure 3). The analysis revealed a main effect of session on Afr(F4 4o= 11.8, p < .001) representing a small improvement for both techniques, in total less than 8% from sessions 1 to 5. A significant effect of session on CE (F4^4o = 10.4, p < .001) suggests that subjects also increasingly undershot the targets as they grew more confident with the task. They were able to do so without incurring greater errors or endpoint variability, as evidenced by the lack of session effects on ER {F^^^q = 1.07, p > .05) and VE (F4,4o = .543). However, the'two- way interaction of technique x session was not significant for any of the four dependent variables (^4^40 < 1.06, p > .05), implying that the speed-accuracy tradeoff in the Prince technique did not change relative to the Fitts technique even as subjects progressed through the trials. Thus, it is unclear from the present data to what extent further practice with the Prince technique would have altered its accuracy bias."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Discussion"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"While the results clearly demonstrate that Fitts' law applies to the Prince technique, a question remains as to why the performance differences between techniques were reflected in the intercept of the regression lines, rather than the slope."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One interpretation of the intercept is that it represents time spent on the targets rather than time spent moving between them [13, p. 146]. Considered in this way, \"time on target\" includes only the time the cursor is held motionless over the target."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For the reciprocal aiming task used in this experiment, time on target would include the time necessary for the subject to verify that the cursor is over the target, the time to execute the button press itself, as well as preparation time to program the next movement, as in [1]. There is evidence that the verification component, in particular, is sensitive to the accuracy demands and objectives of the task [1, 6, 12]. Thus, if subjects in our experiment were in fact being somewhat more careful with the Prince technique than the Fitts technique, this may have increased their verification time and hence the intercept."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"DESIGN IMPLICATIONS"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\"The Prince and the Pointer\""}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Having established that the area and standard cursors follow similar prediction models, we now consider some of the properties of using an area cursor as a positioning and selecting tool."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There appear to be two main benefits of applying the Prince technique. The first is illustrated in Figure 5 and contrasts the difficulty of acquiring a small target using the standard cross-hair cursor and a rectangular area cursor. For such tasks, the area cursor approach is clearly much easier."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We can use the results from the experiment to quantify the difference between the two approaches. Assume the target has width W, the area cursor width W', and the distance moved in both cases is A. Then, when A/Wis large (i.e., the task is hard), the difference in index of difficulty {ID, equation 1) for the two tasks will approach \\og2{WIW)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For example, if W is 6 pixels and W is 96 pixels, the Prince technique represents a savings of about 4 bits as rated by Fitts' law. Given the performance level arrived at in the experiment (4.9 bits/s), this translates to a movement time savings of roughly .75 s per mouse selection. In the case of A = 384 pixels, for instance, this is a 93% reduction. (Of course, the movement time savings will be even larger with a device that does not perform as well as the mouse; e.g., using IP = 1.5 bits/s, reported in [7] for trackball performance during a dragging task, the predicted savings are well over 2 s per selection.)"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A second capability of the area cursor is that it may function as a \"net.\" Used in this way, an area cursor can group and select a collection of points or small objects with a single pointing movement, much as the \"lasso\" tool is used in drawing applications like MacDraw. This capability, however, also serves to illustrate a drawback with using the area cursor as the only selection tool in a GUI. This is that the Prince technique is inappropriate for fine positioning tasks, because selections may become ambiguous when displays are cluttered."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Our belief is that an effective way of exploiting the Prince technique is to combine it with the traditional point-cursor approach. Where fine positioning is not required, it may be possible to replace it by coarse positioning and the Prince technique. Furthermore, by dynamically switching between Prince and point-cursor positioning techniques, the difficulty of positioning tasks can be matched more closely to task context."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor4.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"CONCLUSION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"An alternative approach to pointing, called the Prince technique, was investigated and found to be comparable to traditional pointing methods. Because the Prince technique uses a cursor of large area or volume, it is suitable for tasks that are normally difficult with the standard pointer, such as acquiring small targets or points. We feel that the Prince technique may be especially valuable when used in conjunction with traditional pointing techniques, where it can be used to tailor task difficulty more closely to the accuracy demands of the task. The examples presented three distinct methods suggesting how this might be accomplished."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The current study is an initial probe into a rich design space. Many questions and issues remain. We investigated selection tasks involving one width parameter, either the target or the cursor. What happens when there are two width parameters, defined by moving and stationary objects? The whole issue of \"grasping\" isolated objects from among a close cluster requires much more investigation. Likewise, the 3D case of the volume cursor deserves study. It would also be worthwhile to compare and/or combine the technique with gravitational \"snapping\" techniques. Finally, for the full potential of the technique to be realized, it is likely that new affordances (such as supporting \"grasping\") need to be built into input devices, such as mice. This also requires further study."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"}],"_id":"RyXzXoN8ZLYrubhI"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n  "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","generator"],["content","pandoc"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0, user-scalable=yes"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"US20150330429A1"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":8,"nodeName":"#comment","nodeValue":"[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The \"Prince\" Technique: Fitts' Law and Selection Using Area Cursors"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In most GUIs, selection is effected by placing the point of the mouse-driven cursor over the area of the object to be selected. Fitts' law is commonly used to model such target acquisition, with the term A representing the amplitude, or distance, of the target from the cursor, and W the width of the target area. As the W term gets smaller, the index of difficulty of the task increases. The extreme case of this is when the target is a point. In this paper, we show that selection in such cases can be facilitated if the cursor is an area, rather than a point. Furthermore, we show that when the target is a point and the width of the cursor is W, that Fitts' law still holds. An experiment is presented and the implications of the technique are discussed for both 2D and 3D interfaces."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"KEYWORDS:"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Input techniques, graphical user interfaces, Fitts' law, haptic input."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"INTRODUCTION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Although the traditional method of selection in direct- manipulation systems is generally effective, there are certain conditions where it breaks down. One of these is when the target is very small. The extreme case of this is when the target is a point. The reason for the problem can best be explained by Fitts' law [3, 8]"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We see that the index of difficulty (ID) of a target acquisition task is a function of the amplitude (A), or distance, of the target from the cursor, and the width of the target (W). The index of difficulty rises as the width of the target gets smaller."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor1.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With most conventional GUIs, the selection tool is a point, such as represented by the point of an arrow shaped cursor, or the intersection of the lines in a cross-hair cursor (Figure 1). In the extreme case, therefore, we are selecting a point with a point."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The purpose of the research described in this paper is to explore an alternative approach whereby (in the 2D case) the cursor is represented by an area, rather than by a point. Just as the area of a fly-swatter makes it easier to swat a small fly, likewise the area of such a cursor should make it easier to select small targets and points."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"More formally, it is our claim that selecting a small target with an area cursor can be modeled by a slight twist of Fitts' law, namely, that the W term now applies to the width of the cursor, rather than the width of the target. Figure 2 illustrates the approach using an area cursor, as well as the traditional approach"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In what follows, we report on an experiment that demonstrates the applicability of Fitts' law to selecting point targets with an area cursor. We follow this with a discussion of the design implications of our findings to other 2D and 3D tasks."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Finally, due to the similarity of their benefits, we name the use of area cursors after the first manufacturer of oversized tennis rackets: the Prince technique"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"THE EXPERIMENT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Twelve students from the University of Toronto participated as paid volunteers. All had experience using the mouse and were strongly right handed based on the Edinburgh Handedness Inventory [10]."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Apparatus"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Equipment was an Apple Macintosh llfx with 13-inch RGB monitor. Subjects performed the tasks using their right hand and a standard mouse. The control/display ratio of the mouse was adjusted to the second fastest setting on the Macintosh Control Panel. Since even small lags (75 ms) in display response have been found to degrade human performance on Fitts' law tasks [5, 9], the software was optimized to ensure that drawing updates did not delay movement of the Prince cursor."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Before the experiment, we tested for animation delays by making the system \"arrow\" pointer visible in the center of the paddle and found that it was not possible to shake the paddle from the arrow, even at movement speeds likely to be much faster than those encountered during the experiment."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Procedure"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects performed a reciprocal point-select task using both the Fitts and Prince techniques (Figure 2). They were given written instructions and several warm-up trials prior to data collection. In addition, they performed one practice session on each technique."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For each technique, two targets appeared on either side of the monitor. Subjects moved the cursor back and forth between the targets and selected each target by pressing and releasing the mouse button. They were instructed to balance speed and accuracy for an error rate around 4%, and an error beep sounded if selection occurred outside the target. Results of movement time and error rate were given to subjects at the end of each session."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The cursor and the target were represented in the two techniques using different objects. In the Fitts condition the cursor was a small black dot with radius 2 pixels, and the targets were rectangles having width W and height 200 pixels. The Prince condition reversed these objects exactly (see Figure 2b), so that subjects controlled a rectangular cursor (width W, height 200 pixels) and used it to capture two target dots (radius 2 pixels). In both conditions, the rectangles were unframed and shaded light blue. The Prince cursor was transparent, so that the targets could be clearly seen beneath it. When the target and cursor overlapped, their appearance in the two techniques was nearly indistinguishable, the primary difference being which object moved or was stationary."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Design"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A fully-crossed, within-subjects factorial design with repeated measures was used. Factors were movement amplitude (64, 128, 256, and 512 pixels), target or cursor width (8, 16, 32, and 64 pixels), and technique (Fitts and Prince). The amplitude and width conditions yielded seven levels of task difficulty, ranging from I bit to 6.02 bits. The A-W conditions were presented in random order with a block of ten trials performed at each condition. A session consisted of a sequence of sixteen blocks covering all A-W conditions. After training, ten sessions were performed in all, alternating between the Fitts (five sessions) and the Prince (five sessions) techniques. The order of techniques was counterbalanced, with half of the subjects beginning with the Prince technique and the other half with the Fitts technique. Subjects took about one hour to complete the experiment."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Dependent variables were movement time (M7), error rate (£/?), constant error (C£), and variable error (VE). The latter two measures were used to describe the quality of placement of the response selections [11], CE was measured in the horizontal axis, as the signed distance between target and cursor centers at the moment a selection occurred, and was used to detect systematic trends towards undershooting or overshooting the target center. VE captures the endpoint variability of responses and corresponds to effective target width (Wg = 4.133 x SDx, see [8])."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Results"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There were significant main effects of tecfinique on all four dependent variables. While subjects were slower using the Prince technique (900 ms vs. 841 ms; F i j o = 273.5, p < .001), they produced fewer errors (2.8% vs. 3.6%; = 15.7, p < .005) and tended to aim nearer to the target centers (CE = -.922 vs. -1.787 pixels; F i j o = 27.0, p < .001). Subjects therefore appear to have been more careful when making selections with the Prince technique. This did not however provide an advantage in terms of motor response variability. With both techniques, VE was very close to the average nominal width of 30 pixels. However, VE was 30.9 pixels in the Prince technique and 29.5 pixels in the Fitts technique, so subjects were somewhat less variable in endpoint placement using the Fitts technique (FI,io = 9.40,/><.02)."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor3.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This suggests that the bias towards accuracy rather than speed in the Prince technique was due to its unfamiliarity. We investigated this possibility further, by examining performance in relation to learning phase over the five sessions (Figure 3). The analysis revealed a main effect of session on Afr(F4 4o= 11.8, p < .001) representing a small improvement for both techniques, in total less than 8% from sessions 1 to 5. A significant effect of session on CE (F4^4o = 10.4, p < .001) suggests that subjects also increasingly undershot the targets as they grew more confident with the task. They were able to do so without incurring greater errors or endpoint variability, as evidenced by the lack of session effects on ER {F^^^q = 1.07, p > .05) and VE (F4,4o = .543). However, the'two- way interaction of technique x session was not significant for any of the four dependent variables (^4^40 < 1.06, p > .05), implying that the speed-accuracy tradeoff in the Prince technique did not change relative to the Fitts technique even as subjects progressed through the trials. Thus, it is unclear from the present data to what extent further practice with the Prince technique would have altered its accuracy bias."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Discussion"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"While the results clearly demonstrate that Fitts' law applies to the Prince technique, a question remains as to why the performance differences between techniques were reflected in the intercept of the regression lines, rather than the slope."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One interpretation of the intercept is that it represents time spent on the targets rather than time spent moving between them [13, p. 146]. Considered in this way, \"time on target\" includes only the time the cursor is held motionless over the target."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For the reciprocal aiming task used in this experiment, time on target would include the time necessary for the subject to verify that the cursor is over the target, the time to execute the button press itself, as well as preparation time to program the next movement, as in [1]. There is evidence that the verification component, in particular, is sensitive to the accuracy demands and objectives of the task [1, 6, 12]. Thus, if subjects in our experiment were in fact being somewhat more careful with the Prince technique than the Fitts technique, this may have increased their verification time and hence the intercept."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"DESIGN IMPLICATIONS"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\"The Prince and the Pointer\""}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Having established that the area and standard cursors follow similar prediction models, we now consider some of the properties of using an area cursor as a positioning and selecting tool."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There appear to be two main benefits of applying the Prince technique. The first is illustrated in Figure 5 and contrasts the difficulty of acquiring a small target using the standard cross-hair cursor and a rectangular area cursor. For such tasks, the area cursor approach is clearly much easier."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We can use the results from the experiment to quantify the difference between the two approaches. Assume the target has width W, the area cursor width W', and the distance moved in both cases is A. Then, when A/Wis large (i.e., the task is hard), the difference in index of difficulty {ID, equation 1) for the two tasks will approach \\og2{WIW)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For example, if W is 6 pixels and W is 96 pixels, the Prince technique represents a savings of about 4 bits as rated by Fitts' law. Given the performance level arrived at in the experiment (4.9 bits/s), this translates to a movement time savings of roughly .75 s per mouse selection. In the case of A = 384 pixels, for instance, this is a 93% reduction. (Of course, the movement time savings will be even larger with a device that does not perform as well as the mouse; e.g., using IP = 1.5 bits/s, reported in [7] for trackball performance during a dragging task, the predicted savings are well over 2 s per selection.)"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A second capability of the area cursor is that it may function as a \"net.\" Used in this way, an area cursor can group and select a collection of points or small objects with a single pointing movement, much as the \"lasso\" tool is used in drawing applications like MacDraw. This capability, however, also serves to illustrate a drawback with using the area cursor as the only selection tool in a GUI. This is that the Prince technique is inappropriate for fine positioning tasks, because selections may become ambiguous when displays are cluttered."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Our belief is that an effective way of exploiting the Prince technique is to combine it with the traditional point-cursor approach. Where fine positioning is not required, it may be possible to replace it by coarse positioning and the Prince technique. Furthermore, by dynamically switching between Prince and point-cursor positioning techniques, the difficulty of positioning tasks can be matched more closely to task context."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor4.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"CONCLUSION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"An alternative approach to pointing, called the Prince technique, was investigated and found to be comparable to traditional pointing methods. Because the Prince technique uses a cursor of large area or volume, it is suitable for tasks that are normally difficult with the standard pointer, such as acquiring small targets or points. We feel that the Prince technique may be especially valuable when used in conjunction with traditional pointing techniques, where it can be used to tailor task difficulty more closely to the accuracy demands of the task. The examples presented three distinct methods suggesting how this might be accomplished."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The current study is an initial probe into a rich design space. Many questions and issues remain. We investigated selection tasks involving one width parameter, either the target or the cursor. What happens when there are two width parameters, defined by moving and stationary objects? The whole issue of \"grasping\" isolated objects from among a close cluster requires much more investigation. Likewise, the 3D case of the volume cursor deserves study. It would also be worthwhile to compare and/or combine the technique with gravitational \"snapping\" techniques. Finally, for the full potential of the technique to be realized, it is likely that new affordances (such as supporting \"grasping\") need to be built into input devices, such as mice. This also requires further study."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"}],"_id":"lV7Ra9UWdal8gMsV"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n  "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","generator"],["content","pandoc"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0, user-scalable=yes"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"US20150330429A1"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n  "},{"nodeType":8,"nodeName":"#comment","nodeValue":"[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The \"Prince\" Technique: Fitts' Law and Selection Using Area Cursors"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In most GUIs, selection is effected by placing the point of the mouse-driven cursor over the area of the object to be selected. Fitts' law is commonly used to model such target acquisition, with the term A representing the amplitude, or distance, of the target from the cursor, and W the width of the target area. As the W term gets smaller, the index of difficulty of the task increases. The extreme case of this is when the target is a point. In this paper, we show that selection in such cases can be facilitated if the cursor is an area, rather than a point. Furthermore, we show that when the target is a point and the width of the cursor is W, that Fitts' law still holds. An experiment is presented and the implications of the technique are discussed for both 2D and 3D interfaces."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"KEYWORDS:"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Input techniques, graphical user interfaces, Fitts' law, haptic input."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"INTRODUCTION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Although the traditional method of selection in direct- manipulation systems is generally effective, there are certain conditions where it breaks down. One of these is when the target is very small. The extreme case of this is when the target is a point. The reason for the problem can best be explained by Fitts' law [3, 8]"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We see that the index of difficulty (ID) of a target acquisition task is a function of the amplitude (A), or distance, of the target from the cursor, and the width of the target (W). The index of difficulty rises as the width of the target gets smaller."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor1.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With most conventional GUIs, the selection tool is a point, such as represented by the point of an arrow shaped cursor, or the intersection of the lines in a cross-hair cursor (Figure 1). In the extreme case, therefore, we are selecting a point with a point."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The purpose of the research described in this paper is to explore an alternative approach whereby (in the 2D case) the cursor is represented by an area, rather than by a point. Just as the area of a fly-swatter makes it easier to swat a small fly, likewise the area of such a cursor should make it easier to select small targets and points."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"More formally, it is our claim that selecting a small target with an area cursor can be modeled by a slight twist of Fitts' law, namely, that the W term now applies to the width of the cursor, rather than the width of the target. Figure 2 illustrates the approach using an area cursor, as well as the traditional approach"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"In what follows, we report on an experiment that demonstrates the applicability of Fitts' law to selecting point targets with an area cursor. We follow this with a discussion of the design implications of our findings to other 2D and 3D tasks."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Finally, due to the similarity of their benefits, we name the use of area cursors after the first manufacturer of oversized tennis rackets: the Prince technique"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"THE EXPERIMENT"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Twelve students from the University of Toronto participated as paid volunteers. All had experience using the mouse and were strongly right handed based on the Edinburgh Handedness Inventory [10]."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Apparatus"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Equipment was an Apple Macintosh llfx with 13-inch RGB monitor. Subjects performed the tasks using their right hand and a standard mouse. The control/display ratio of the mouse was adjusted to the second fastest setting on the Macintosh Control Panel. Since even small lags (75 ms) in display response have been found to degrade human performance on Fitts' law tasks [5, 9], the software was optimized to ensure that drawing updates did not delay movement of the Prince cursor."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Before the experiment, we tested for animation delays by making the system \"arrow\" pointer visible in the center of the paddle and found that it was not possible to shake the paddle from the arrow, even at movement speeds likely to be much faster than those encountered during the experiment."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Procedure"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects performed a reciprocal point-select task using both the Fitts and Prince techniques (Figure 2). They were given written instructions and several warm-up trials prior to data collection. In addition, they performed one practice session on each technique."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For each technique, two targets appeared on either side of the monitor. Subjects moved the cursor back and forth between the targets and selected each target by pressing and releasing the mouse button. They were instructed to balance speed and accuracy for an error rate around 4%, and an error beep sounded if selection occurred outside the target. Results of movement time and error rate were given to subjects at the end of each session."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The cursor and the target were represented in the two techniques using different objects. In the Fitts condition the cursor was a small black dot with radius 2 pixels, and the targets were rectangles having width W and height 200 pixels. The Prince condition reversed these objects exactly (see Figure 2b), so that subjects controlled a rectangular cursor (width W, height 200 pixels) and used it to capture two target dots (radius 2 pixels). In both conditions, the rectangles were unframed and shaded light blue. The Prince cursor was transparent, so that the targets could be clearly seen beneath it. When the target and cursor overlapped, their appearance in the two techniques was nearly indistinguishable, the primary difference being which object moved or was stationary."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Design"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A fully-crossed, within-subjects factorial design with repeated measures was used. Factors were movement amplitude (64, 128, 256, and 512 pixels), target or cursor width (8, 16, 32, and 64 pixels), and technique (Fitts and Prince). The amplitude and width conditions yielded seven levels of task difficulty, ranging from I bit to 6.02 bits. The A-W conditions were presented in random order with a block of ten trials performed at each condition. A session consisted of a sequence of sixteen blocks covering all A-W conditions. After training, ten sessions were performed in all, alternating between the Fitts (five sessions) and the Prince (five sessions) techniques. The order of techniques was counterbalanced, with half of the subjects beginning with the Prince technique and the other half with the Fitts technique. Subjects took about one hour to complete the experiment."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Dependent variables were movement time (M7), error rate (£/?), constant error (C£), and variable error (VE). The latter two measures were used to describe the quality of placement of the response selections [11], CE was measured in the horizontal axis, as the signed distance between target and cursor centers at the moment a selection occurred, and was used to detect systematic trends towards undershooting or overshooting the target center. VE captures the endpoint variability of responses and corresponds to effective target width (Wg = 4.133 x SDx, see [8])."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Results"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There were significant main effects of tecfinique on all four dependent variables. While subjects were slower using the Prince technique (900 ms vs. 841 ms; F i j o = 273.5, p < .001), they produced fewer errors (2.8% vs. 3.6%; = 15.7, p < .005) and tended to aim nearer to the target centers (CE = -.922 vs. -1.787 pixels; F i j o = 27.0, p < .001). Subjects therefore appear to have been more careful when making selections with the Prince technique. This did not however provide an advantage in terms of motor response variability. With both techniques, VE was very close to the average nominal width of 30 pixels. However, VE was 30.9 pixels in the Prince technique and 29.5 pixels in the Fitts technique, so subjects were somewhat less variable in endpoint placement using the Fitts technique (FI,io = 9.40,/><.02)."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor3.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This suggests that the bias towards accuracy rather than speed in the Prince technique was due to its unfamiliarity. We investigated this possibility further, by examining performance in relation to learning phase over the five sessions (Figure 3). The analysis revealed a main effect of session on Afr(F4 4o= 11.8, p < .001) representing a small improvement for both techniques, in total less than 8% from sessions 1 to 5. A significant effect of session on CE (F4^4o = 10.4, p < .001) suggests that subjects also increasingly undershot the targets as they grew more confident with the task. They were able to do so without incurring greater errors or endpoint variability, as evidenced by the lack of session effects on ER {F^^^q = 1.07, p > .05) and VE (F4,4o = .543). However, the'two- way interaction of technique x session was not significant for any of the four dependent variables (^4^40 < 1.06, p > .05), implying that the speed-accuracy tradeoff in the Prince technique did not change relative to the Fitts technique even as subjects progressed through the trials. Thus, it is unclear from the present data to what extent further practice with the Prince technique would have altered its accuracy bias."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Discussion"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"While the results clearly demonstrate that Fitts' law applies to the Prince technique, a question remains as to why the performance differences between techniques were reflected in the intercept of the regression lines, rather than the slope."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One interpretation of the intercept is that it represents time spent on the targets rather than time spent moving between them [13, p. 146]. Considered in this way, \"time on target\" includes only the time the cursor is held motionless over the target."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For the reciprocal aiming task used in this experiment, time on target would include the time necessary for the subject to verify that the cursor is over the target, the time to execute the button press itself, as well as preparation time to program the next movement, as in [1]. There is evidence that the verification component, in particular, is sensitive to the accuracy demands and objectives of the task [1, 6, 12]. Thus, if subjects in our experiment were in fact being somewhat more careful with the Prince technique than the Fitts technique, this may have increased their verification time and hence the intercept."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"DESIGN IMPLICATIONS"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\"The Prince and the Pointer\""}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Having established that the area and standard cursors follow similar prediction models, we now consider some of the properties of using an area cursor as a positioning and selecting tool."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There appear to be two main benefits of applying the Prince technique. The first is illustrated in Figure 5 and contrasts the difficulty of acquiring a small target using the standard cross-hair cursor and a rectangular area cursor. For such tasks, the area cursor approach is clearly much easier."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We can use the results from the experiment to quantify the difference between the two approaches. Assume the target has width W, the area cursor width W', and the distance moved in both cases is A. Then, when A/Wis large (i.e., the task is hard), the difference in index of difficulty {ID, equation 1) for the two tasks will approach \\og2{WIW)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"For example, if W is 6 pixels and W is 96 pixels, the Prince technique represents a savings of about 4 bits as rated by Fitts' law. Given the performance level arrived at in the experiment (4.9 bits/s), this translates to a movement time savings of roughly .75 s per mouse selection. In the case of A = 384 pixels, for instance, this is a 93% reduction. (Of course, the movement time savings will be even larger with a device that does not perform as well as the mouse; e.g., using IP = 1.5 bits/s, reported in [7] for trackball performance during a dragging task, the predicted savings are well over 2 s per selection.)"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A second capability of the area cursor is that it may function as a \"net.\" Used in this way, an area cursor can group and select a collection of points or small objects with a single pointing movement, much as the \"lasso\" tool is used in drawing applications like MacDraw. This capability, however, also serves to illustrate a drawback with using the area cursor as the only selection tool in a GUI. This is that the Prince technique is inappropriate for fine positioning tasks, because selections may become ambiguous when displays are cluttered."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Our belief is that an effective way of exploiting the Prince technique is to combine it with the traditional point-cursor approach. Where fine positioning is not required, it may be possible to replace it by coarse positioning and the Prince technique. Furthermore, by dynamically switching between Prince and point-cursor positioning techniques, the difficulty of positioning tasks can be matched more closely to task context."}]},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/areacursor4.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"CONCLUSION"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"An alternative approach to pointing, called the Prince technique, was investigated and found to be comparable to traditional pointing methods. Because the Prince technique uses a cursor of large area or volume, it is suitable for tasks that are normally difficult with the standard pointer, such as acquiring small targets or points. We feel that the Prince technique may be especially valuable when used in conjunction with traditional pointing techniques, where it can be used to tailor task difficulty more closely to the accuracy demands of the task. The examples presented three distinct methods suggesting how this might be accomplished."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The current study is an initial probe into a rich design space. Many questions and issues remain. We investigated selection tasks involving one width parameter, either the target or the cursor. What happens when there are two width parameters, defined by moving and stationary objects? The whole issue of \"grasping\" isolated objects from among a close cluster requires much more investigation. Likewise, the 3D case of the volume cursor deserves study. It would also be worthwhile to compare and/or combine the technique with gravitational \"snapping\" techniques. Finally, for the full potential of the technique to be realized, it is likely that new affordances (such as supporting \"grasping\") need to be built into input devices, such as mice. This also requires further study."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"}],"_id":"eWHRbJvmSrST5isn"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\t"},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t"},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-drop notes across windows"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t"},{"nodeType":1,"tagName":"style","attributes":[["type","text/css"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\tbody {\n\t\t\ttext-align: center;\t/* This is a hack for older browsers to center the page */\n\t\t}\n\n\t\t#container {\n\t\t\tmargin: 0 auto;\t\t/* This centers the page in modern browsers */\n\t\t\ttext-align: left;\t/* This is a hack for older browsers to center the page */\n\t\t\twidth: 960px;\t\t/* This sets our total page width */\n\t\t}\n\n\t\t#header {\n\t\t\twidth: 960px;\t\t/* This sets the header to stretch the full page width */\n\t\t}\n\n\t\t#content {\n\t\t\tposition: relative;\t/* This creates a block-level ancestor so that notes are positioned with respect to it */\n\t\t\tfloat: left; \t\t/* This causes the content to move to the left */\n\t\t\twidth: 680px;\t\t/* We need to set the width whenever we float an element */\n\t\t\theight: 500px;\n\t\t\tborder: 1px solid black;\n\t\t\tpadding: 5px;\n\t\t\toverflow: scroll;\n\t\t}\n\n\t\t#sidebar {\n\t\t\tfloat: right;\t\t/* This causes the sidebar to move to the right */\n\t\t\twidth: 258px;\t\t/* We need to set the width whenever we float an element */\n\t\t\theight: 500px;\n\t\t\tbackground-color: lightgrey;\n\t\t\tpadding: 5px;\n\t\t}\n\n\t\t#footer {\n\t\t\tclear: both;\t\t/* This makes sure that the footer clears both the sidebar and content floats */\n\t\t\twidth: 960px;\t\t/* This sets the footer to stretch the full page width */\n\t\t}\n\n\t\t.note {\n\t\t\tbackground-color: yellow;\n\t\t}\n\n\t\t.note .note-content {\n\t\t\twidth: 100%;\n\t\t\theight:  75px;\t\t/* 100px - 15px (draghandle) - 2*5px (padding) */\n\t\t\tpadding: 5px;\n\t\t\toverflow: scroll;\n\t\t}\n\n\t\t#content .note {\n\t\t\tposition: absolute;\t/* This makes the note float over the container */\n\t\t\twidth: 150px;\n\t\t\theight: 100px;\n\t\t}\n\n\t\t#sidebar .note {\n\t\t\tmargin: 10px;\n\t\t\theight: 100px;\n\t\t}\n\n\t\t/* for managing drag-and-drop */\n\t\t.note .draghandle {\n\t\t\twidth: 100%;\n\t\t\theight: 15px;\n\t\t\tbackground-color: lightsalmon;\n\t\t\tcursor: grab;\n\t\t}\n\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t"},{"nodeType":1,"tagName":"script","attributes":[["src","http://localhost:3000/viewer/lib/jquery-3.4.1.min.js"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t"},{"nodeType":1,"tagName":"script","attributes":[["type","text/javascript"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\t\t// This name will be passed to the destination window during drag-and-drop\n\t\t// and can be used to distinguish among several source windows\n\t\tlet windowId = 'demo'\n\n\t\t// Return the id of the closest enclosing dropzone, if any\n\t\tfunction getDropZoneId(elem) {\n\t\t\treturn $(elem).closest('.dropzone').attr('id')\n\t\t}\n\n\t\t// Move jQuery `elem` by deltaX, deltaY\n\t\tfunction moveElem(elem, deltaX, deltaY) {\n\t\t\tlet offset = elem.offset()\n\t\t\toffset.left += deltaX\n\t\t\toffset.top += deltaY\n\t\t\telem.offset(offset)\n\t\t}\n\n\t\t// Create a note with the given content and optional position\n\t\tfunction createNote(content, left, top) {\n\t\t\tlet style = ''\n\t\t\tif (top !== undefined && left !== undefined)\n\t\t\t\tstyle = `style=\"top: ${top}px; left: ${left}px\"`\n\t\t\tlet html = \n\t\t\t`<div class=\"note draggable\" draggable=\"true\" ${style}>\n\t\t\t\t<div class=\"draghandle\"></div>\n\t\t\t\t<div class=\"note-content\">\n\t\t\t\t\t${content}\n\t\t\t\t</div>\n\t\t\t</div>`\n\t\t\treturn html\n\t\t}\n\n\t\t// Return the HTML content of a note\n\t\tfunction getNoteContent(note) {\n\t\t\treturn $(note).find('.note-content').html()\n\t\t}\n\n\t\t// Move a note from the content pane to the sidebar\n\t\tfunction moveNoteToSidebar(note, sidebar, ev, dnd) {\n\t\t\t// Copy note and append it to sidebar\n\t\t\tlet html = createNote(getNoteContent(note))\n\t\t\t$('#sidebar').append(html)\n\n\t\t\t// Remove it with the 0 timeout otherwise the dragend event is lost (because the note does not exist)\n\t\t\tsetTimeout(() => note.remove(), 0)\n\t\t}\n\n\t\t// Move a note from the sidebar to the content pane\n\t\tfunction moveNoteToContent(note, sidebar, ev, dnd) {\n\t\t\t// Compute destination position\n\t\t\t// NOTE: this does account for scrolling of content, but not of scrolling in a parent element\n\t\t\tlet offset = $('#content').offset()\n\t\t\tlet scroll = {x: $('#content').scrollLeft(), y: $('#content').scrollTop()}\n\t\t\tlet x = ev.originalEvent.clientX - offset.left + scroll.x - dnd.cursorOffset.x\n\t\t\tlet y = ev.originalEvent.clientY - offset.top + scroll.y - dnd.cursorOffset.y\n\n\t\t\t// Copy note and append it to sidebar\n\t\t\tlet html = createNote(getNoteContent(note), x, y)\n\t\t\t$('#content').append(html)\n\n\t\t\t// Remove it with the 0 timeout otherwise the dragend event is lost (because the note does not exist)\n\t\t\tsetTimeout(() => note.remove(), 0)\n\t\t}\n\n\t\t// Copy a note from a remote window to the sidebar\n\t\tfunction copyNoteToSidebar(xferData, sidebar, ev, dnd) {\n\t\t\t// Copy note and append it to sidebar\n\t\t\tlet html = createNote(xferData.content)\n\t\t\t$('#sidebar').append(html)\n\t\t}\n\n\t\t// Copy a note from a remote window to the content pane\n\t\tfunction copyNoteToContent(xferData, sidebar, ev, dnd) {\n\t\t\t// Compute destination position\n\t\t\t// NOTE: this does account for scrolling of content, but not of scrolling in a parent element\n\t\t\tlet offset = $('#content').offset()\n\t\t\tlet scroll = {x: $('#content').scrollLeft(), y: $('#content').scrollTop()}\n\t\t\tlet x = ev.originalEvent.clientX - offset.left + scroll.x - xferData.cursorOffset.x\n\t\t\tlet y = ev.originalEvent.clientY - offset.top + scroll.y - xferData.cursorOffset.y\n\n\t\t\t// Copy note and append it to sidebar\n\t\t\tlet html = createNote(xferData.content, x, y)\n\t\t\t$('#content').append(html)\n\t\t}\n\n\t\t// Global holding the current drag-and-drop interaction, if any\n\t\tlet dnd = null\n\n\t\t// Singleton class holding the state for a drag-and-drop interaction\n\t\tclass DragAndDropInteraction {\n\t\t\tdraggedElem = null\n\t\t\tdropZone = null\n\n\t\t\tconstructor(ev) {\n\t\t\t\tconsole.log(ev.type+': new dnd interaction', ev)\n\t\t\t\tthis.draggedElem = ev.target\n\t\t\t\tthis.dropZone = null\n\n\t\t\t\t// absolute position of cursor (used for local move)\n\t\t\t\tthis.startPos = {x: ev.originalEvent.screenX, y: ev.originalEvent.screenY}\n\n\t\t\t\t// position of cursor relative to dragged element (used for non-local move)\n\t\t\t\tlet offset = $(this.draggedElem).offset()\n\t\t\t\tthis.cursorOffset = {x: ev.originalEvent.pageX - offset.left, y: ev.originalEvent.pageY - offset.top}\n\n\t\t\t\t// fill out dataTransfor info in case we drag out of the window\n\t\t\t\tev.originalEvent.dataTransfer.effectAllowed = 'copy'\n\t\t\t\tlet xferData = {\n\t\t\t\t\twindowId: windowId,\n\t\t\t\t\tcontent: getNoteContent(this.draggedElem),\n\t\t\t\t\tcursorOffset: this.cursorOffset,\n\t\t\t\t}\n\t\t\t\tev.originalEvent.dataTransfer.setData('text/plain', JSON.stringify(xferData))\n\t\t\t}\n\n\t\t\t// ==== utilities ====\n\n\t\t\tgetMovement() { // return a string sourceDropZone->destinationDropZone\n\t\t\t\tlet from = getDropZoneId(this.draggedElem)\n\t\t\t\tlet to = getDropZoneId(this.dropZone)\n\t\t\t\tif (from && to)\n\t\t\t\t\treturn from+'->'+to\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\t// ==== Event Handlers ===\n\t\t\tdrag(ev) {\n\t\t\t\t// console.log('drag')\n\t\t\t}\n\n\t\t\tdragEnd(ev) {\n\t\t\t\tconsole.log('dragEnd', ev)\n\t\t\t\tdnd = null\t// reset interaction\n\t\t\t}\n\n\t\t\tdragEnter(ev) {\n\t\t\t\tconsole.log('dragEnter', ev)\n\t\t\t\tthis.dragOver(ev)\n\t\t\t}\n\n\t\t\tdragOver(ev) {\n\t\t\t\tthis.dropZone = ev.currentTarget\n\t\t\t\tlet mvt = this.getMovement()\n\t\t\t\tconsole.log(ev.type, mvt, ev)\n\t\t\t\tif (mvt && mvt !== 'sidebar->sidebar') {\n\t\t\t\t\t// this signals that we are able to handle a drop here\n\t\t\t\t\tev.preventDefault()\n\t\t\t\t\tev.stopPropagation()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdragLeave(ev) {\n\t\t\t\t// console.log('dragLeave', ev)\n\t\t\t\t// this.dropZone = null\n\t\t\t\t// ev.preventDefault()\n\t\t\t}\n\n\t\t\tdrop(ev) {\n\t\t\t\tconsole.log('drop', ev)\n\t\t\t\tif (! this.dropZone)\n\t\t\t\t\treturn\n\n\t\t\t\t// let e = ev.originalEvent\n\t\t\t\t// console.log(`client ${e.x} ${e.y} - layer ${e.layerX} ${e.layerY} - offset ${e.offsetX} ${e.offsetY} - screen ${e.screenX} ${e.screenY}`)\n\n\t\t\t\tlet movement = this.getMovement()\n\t\t\t\tconsole.log(movement)\n\t\t\t\tswitch(movement) {\n\t\t\t\t\tcase 'content->content': // move note withing the content pane\n\t\t\t\t\t\t// simply move the note\n\t\t\t\t\t\tmoveElem($(this.draggedElem), ev.screenX - this.startPos.x, ev.screenY - this.startPos.y)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'content->sidebar': // move note from content pane to sidebar\n\t\t\t\t\t\t// remove note from content and append it to sidebar\n\t\t\t\t\t\tmoveNoteToSidebar(this.draggedElem, this.dropZone, ev, this)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'sidebar->content': // move note from sidebar to content pane\n\t\t\t\t\t\t// remove note from sidebar and append it to panel\n\t\t\t\t\t\tmoveNoteToContent(this.draggedElem, this.dropZone, ev, this)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'sidebar->sidebar': // move note within sidebar: do nothing\n\t\t\t\t\t\t//break\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log('unknown/unsupported movement ')\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Singleton class holding the state for a drag-and-drop interaction\n\t\t// when dragging from another window\n\t\tclass DropInteraction {\n\t\t\tdropZone = null\n\n\t\t\tconstructor(ev) {\n\t\t\t\tconsole.log(ev.type+': new drop interaction', ev)\n\t\t\t\tthis.dragOver(ev)\n\t\t\t}\n\n\t\t\t// ==== utilities ====\n\n\t\t\tgetMovement() { // return a string sourceDropZone->destinationDropZone\n\t\t\t\tlet to = getDropZoneId(this.dropZone)\n\t\t\t\tif (to)\n\t\t\t\t\treturn '->'+to\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\t// ==== Event Handlers ===\n\n\t\t\tdragEnter(ev) {\n\t\t\t\tthis.dragOver(ev)\n\t\t\t}\n\n\t\t\tdragOver(ev) {\n\t\t\t\tthis.dropZone = ev.currentTarget\n\t\t\t\tlet mvt = this.getMovement()\n\t\t\t\tconsole.log(ev.type, mvt, ev)\n\t\t\t\tif (mvt) {\n\t\t\t\t\t// this tells that we can drop remotely\n\t\t\t\t\tev.originalEvent.dataTransfer.dropEffect = 'copy'\n\n\t\t\t\t\t// this signals that we are able to handle a drop here\n\t\t\t\t\tev.preventDefault()\n\t\t\t\t\tev.stopPropagation()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdragLeave(ev) {\n\t\t\t\tconsole.log('remote dragLeave', ev)\n\t\t\t\tev.preventDefault()\n\t\t\t}\n\n\t\t\tdrop(ev) {\n\t\t\t\tconsole.log('remote drop', ev)\n\t\t\t\tif (! this.dropZone) {\n\t\t\t\t\tdnd = null\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Parse transfer data\n\t\t\t\tlet xferData = ev.originalEvent.dataTransfer.getData('text/plain')\n\t\t\t\tlet data = null\n\t\t\t\tif (xferData && xferData.length > 0)\n\t\t\t\t\tdata = JSON.parse(xferData)\n\t\t\t\tif (!data) {\n\t\t\t\t\tdnd = null\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tlet movement = this.getMovement()\n\t\t\t\tconsole.log(movement)\n\t\t\t\tswitch(movement) {\n\t\t\t\t\tcase '->sidebar': // copy remote note to sidebar\n\t\t\t\t\t\t// remove note from content and append it to sidebar\n\t\t\t\t\t\tcopyNoteToSidebar(data, this.dropZone, ev, this)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase '->content': // copy remote note to content pane\n\t\t\t\t\t\t// remove note from sidebar and append it to panel\n\t\t\t\t\t\tcopyNoteToContent(data, this.dropZone, ev, this)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log('unknown/unsupported movement ')\n\t\t\t\t}\n\n\t\t\t\tdnd = null\n\t\t\t}\n\t\t}\n\n\t\t$(function() {\n\t\t\t// this disables dragging a note by clicking its content\n\t\t\t$('.note-content').on('mousedown', ev => { console.log('note-content'); ev.preventDefault() } )\n\n\t\t\t// we set these handlers on the container so that they are inherited by any new draggable item\n\t\t\t$('#container').on('dragstart', '.draggable', ev => dnd ? console.warn('spurious dragstart event') : dnd = new DragAndDropInteraction(ev))\n\t\t\t$('#container').on('drag',      '.draggable', ev => dnd ? dnd.drag(ev)      : console.warn('spurious drag event'))\n\t\t\t$('#container').on('dragend',   '.draggable', ev => dnd ? dnd.dragEnd(ev)   : console.warn('spurious dragend event'))\n\n\t\t\t// these handlers are the only ones that are called when we receive a remote drag\n\t\t\t$('.dropzone').on('dragenter',  ev => dnd ? dnd.dragEnter(ev) : dnd = new DropInteraction(ev))\n\t\t\t$('.dropzone').on('dragover',   ev => dnd ? dnd.dragOver(ev)  : console.warn('spurious dragover event'))\n\t\t\t$('.dropzone').on('dragleave',  ev => dnd ? dnd.dragLeave(ev) : console.warn('spurious dragleave event'))\n\n\t\t\t$('.dropzone').on('drop',       ev => dnd ? dnd.drop(ev)      : console.warn('spurious drop event'))\n\t\t})\n\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\t"},{"nodeType":1,"tagName":"div","attributes":[["id","container"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t"},{"nodeType":1,"tagName":"div","attributes":[["id","header"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-drop demo"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"button","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"New note"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t"},{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","dropzone"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Si tu peux voir détruit l’ouvrage de ta vie "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tEt sans dire un seul mot te mettre à rebâtir, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tOu perdre en un seul coup le gain de cent parties "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSans un geste et sans un soupir ;"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Si tu peux être amant sans être fou d’amour, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSi tu peux être fort sans cesser d’être tendre, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tEt, te sentant haï, sans haïr à ton tour, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tPourtant lutter et te défendre ;"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Si tu peux supporter d’entendre tes paroles "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tTravesties par des gueux pour exciter des sots, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tEt d’entendre mentir sur toi leurs bouches folles "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSans mentir toi-même d’un mot ;"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Si tu peux rester digne en étant populaire, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSi tu peux rester peuple en conseillant les rois, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tEt si tu peux aimer tous tes amis en frère, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSans qu’aucun d’eux soit tout pour toi ;"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Si tu sais méditer, observer et connaître, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSans jamais devenir sceptique ou destructeur, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tRêver, mais sans laisser ton rêve être ton maître,"},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":" \n\t\t\tPenser sans n’être qu’un penseur ;"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Si tu peux être dur sans jamais être en rage, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSi tu peux être brave et jamais imprudent, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSi tu sais être bon, si tu sais être sage, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSans être moral ni pédant ;"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Si tu peux rencontrer Triomphe après Défaite "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tEt recevoir ces deux menteurs d’un même front, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSi tu peux conserver ton courage et ta tête "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tQuand tous les autres les perdront,"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Alors les Rois, les Dieux, la Chance et la Victoire "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tSeront à tous jamais tes esclaves soumis, "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tEt, ce qui vaut mieux que les Rois et la Gloire"},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\tTu seras un homme, mon fils."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"i","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Rudyard Kipling"}]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"},{"nodeType":1,"tagName":"div","attributes":[["class","note draggable"],["draggable",true],["style","top: 20px; left: 200px;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t"},{"nodeType":1,"tagName":"div","attributes":[["class","draghandle"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t"},{"nodeType":1,"tagName":"div","attributes":[["class","note-content"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This is a note"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This is a note"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This is a note"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This is a note"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"},{"nodeType":1,"tagName":"div","attributes":[["class","note draggable"],["draggable",true],["style","top: 200px; left: 20px;"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t"},{"nodeType":1,"tagName":"div","attributes":[["class","draghandle"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t"},{"nodeType":1,"tagName":"div","attributes":[["class","note-content"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This is another note"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t"},{"nodeType":1,"tagName":"div","attributes":[["id","sidebar"],["class","dropzone"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"},{"nodeType":1,"tagName":"div","attributes":[["class","note draggable"],["draggable",true]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t"},{"nodeType":1,"tagName":"div","attributes":[["class","draghandle"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t"},{"nodeType":1,"tagName":"div","attributes":[["class","note-content"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"This is yet another note"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t"},{"nodeType":1,"tagName":"div","attributes":[["id","footer"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t\t"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag notes within the page and to/from a similar page"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\t"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"}],"_id":"XXPp05Xvbq0PZoSC"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"l,mkl,klm"}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"br"}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"a","attributes":[["id","elementId0"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"C-clamps marked 4."}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"br"}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"jij"}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"br"}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"a","attributes":[["id","elementId1"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"mbly of a closed chamber such as a glove box for the manipulation of radioactive material, this chamber comprising a structure with a plane panel that is applied onto a frame of this structure and is clamped on this frame by clamping means."}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "}]}],"_id":"gKLouAkZD5qDfRp0"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":1,"tagName":"meta"},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The “Silk Cursor”: Investigating Transparency for 3D Target Acquisition"}]},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" This study investigates dynamic 3D target acquisition. The focus is on the relative effect of specific perceptual cues. A novel technique is introduced and we report on an experiment that evaluates its effectiveness. There are two aspects to the new technique. First, in contrast to normal practice, the tracking symbol is a volume rather than a point. Second, the surface of this volume is semi-transparent, thereby affording occlusion cues during target acquisition. The experiment shows that the volumehcclusioneffective in both monocular and stereoscopic conditions. For some tasks where stereoscopic presentation is unavailable or infeasible, the new techniaue offers an effective alternative."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" : Dsemi-transparency, translucency, partial occlusion, stereopsis, depth perception, 3D interfaces."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" With the advent of modem workstations and increasing demands for computer-based applications, 3D techniques are moving from the restricted domain of graphics to mainstream applications (e.g. [2]). However, as we move to 3D, we see a breakdown in many of the interaction techniques that have traditionally been used in 2D direct manipulation systems. Tasks such as inking, target acquisition, pursuit tracking, sweeping out regions, orientation, navigation and docking present new challenges to the interaction designer."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Largely as an outgrowth of computer graphics, a body of research is developing which is beginning to address some of the interaction issues confronting the designer. Representative examples are found in [4, 8, 11, 131. However, there remain large gaps both in the literature and in practice, and of the techniques described, there has been little in the way of experimental evaluation. Chen, Mountford & Sellen [3] is one of a few notable exceptions."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" In the study reported below, our intent is to contribute to this body of research. We introduce a new technique for dynamic 3D target acquisition. After describing the technique, we report on an experiment that evaluates its effectiveness under various circumstances."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The technique described is novel in two respects. First, the tracking symbol used is a volume rather than a point, as is the case in conventional systems. Second, the surface of the tracking volume is semi-transparent, thereby providing additional depth cues beyond what is achievable with conventional techniques, primarily due to partial occlusion of the tracking volume by the object being tracked."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" After a brief discussion of these two novel aspects of our design, we proceed to describe the experiment in which the technique which usesthem was tested."}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The “Prince” Volume Technique: the Cursor as Region or Volume "}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" One of the most studied aspects of HCI is target acquisition using Fitts’ Law [5]. According to this law, the movement time between two targets of width “W,” separated by amplitude “A”, can be modelled as follows [7]:"}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" This is illustrated in Fig. l(a)."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" In this paper, we introduce a variation on the conditions to which this model pertains. As is illustrated in Fig. l(b), we have reversed the situation such that the objects being selected are points (separated by distance “A”), and the cursor is a region of width” W“. Our assumption is that Fitts’ Law holds under this new condition. We have dubbed this the “Prince” technique, after the first company to make over-size tennis rackets (which epitomize the underlying principle). We believe the idea of using a region for the cursor has value in cases where one is selecting individual points, or small objects, or collections of points. We also believe that the concept will extend to 3D by having the cursor be a volume."}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/SC1.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The \"Silk Stocking Effect: Using Occlusion for Enhanced Depth Cues "}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The second novel aspect of the technique which we introduce is our proposed means for obtaining depth cues through the use of occlusion. The simplest way to describe our technique is to imagine that the surface of the cursor’s volume is covered by a nearly transparent material, like a silk stocking. This is illustrated in Fig. 2."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/SC2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Using this technique, which has recently been enabled by the power of modem graphics workstations, one can easily tell if an object is behind, inside or in front of the cursor. (seeColour plates)."}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" EXPERIMENT "}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Experimental Hypothesis "}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The primary goal of our experiment was to evaluate the effectiveness of the silk surface on a volume cursor in a 3D dynamic target acquisition task. We tested the volume cursor both with the silk surface and without it (i.e., in an outline “wire frame” version). Since stereoscopic projection is widely recognised as one of the most effective and common 3D interface techniques[12, 14, 15], we tested each in both mono and stereo display conditions. Thus, the experiment had four conditions: stereo display with silk cursor (SS), stereo display with wire frame cursor (SW), mono display with silk cursor (MS) and mono display with wire frame cursor (MW)."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Our hypothesis was that the silk-like surface and the stereoscopic display would each significantly improve 3D target acquisition, and that the two factors together would enhance each other. What was of particular interest to us was whether or not the silk surface effect alone (i.e. the MS condition) would generate superior, or in any case comparable, performance to the SW condition, which would confirm to us the potential advantages of the silk cursor on its own as a 3D target acquisition technique."}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Experimental Task "}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" A 3D dynamic target acquisition task, “virtual fishing”, was designed for the experiment. In each trial of the experiment, an “angel fish” with random size and color appears swimming around randomly within a 3D environment, as shown in Fig. 3"}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/SC3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The subjects were asked to move a 3D volume cursor to envelop the fish and “grasp it” when the fish was perceived to be completely inside of the cursor. Subjects wore a special glove, and “grasping” was done by closing the hand."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The subjects were asked to move a 3D volume cursor to envelop the fish and “grasp it” when the fish was perceived to be completely inside of the cursor. Subjects wore a special glove, and “grasping” was done by closing the hand."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" If the fish was entirely inside of the cursor volume, the trial was successful and the fish stayed “caught” inside of the cursor. The time score of the trials was displayed to the subject, along with a short beep. If the fish was not completely inside of the cursor when grasped, the fish disappeared. In this case, which was considered a “miss”, a long beep was sounded and error magnitude in each x, y, and z dimension was displayed. Subjects pressed the spacebarontheworkstation toactivateeachnewtrial."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The origin of the {x y z} coordinate system was located at the center of the computer screen surface, with positive x axis pointing to right, y pointing up and z pointing to the user. All objects were drawn using polar projection and were modelled in units of centimeters, where 1 cm in the virtual fish tank corresponded to 1 cm in the real world for any line segment appeming within the same plane as the surface of the screen. The x (from lips to tail end), y (vertical) and z (from left fin tip to right fin tip) dimensions of the largest “adult” fish were 10 cm, 15 cm and 1.3 cm respectively. The smallest “baby” fish was 30 percent of the size of the largest “adult” fish. The cursor had a constant size of 11.3 cm, 16.3 cm and 2.6 cm in x, y and z dimensions."}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Experiment Platform "}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The experiment was conducted using the MITS (Manipulation in Three Space) system [16, 17] developed by the authors. MITS is a non-immersive stereoscopic virtual environment, based on a SGI IRIS 4D Crimson/VGX graphics workstation equipped with CrystalEyesTM stereoscopic glasses. In this experimen~ the cursor was driven by a self designed glove based on an Ascension Technology BirdTM. Only translations were involved in the fishing task. The graphics update rate was controlled at 15 Hz."}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Experimental Design and Procedure "}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Eleven male and one female paid volunteers served as subjects in this experiment. The subjects were screened through the Bausch & Lomb Orthorator visual acuity and stereopsis tests. Subjects ages ranged from 18 to 36, with the majority in their early and mid-20’s. One of the 12 subjects was left handed and the rest were right handed, as determined by the Edinburgh inventory. Subjects were asked to wear the input glove on their dominant hand"}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" A balanced within subjects design was used. The 12 subjects were randomly assigned to a unique order of the four conditions (SS, SW, MS, MW) by a hyper-Graeco- Latin square pattern, which resulted in every condition being presented an equal number of times as fiist, second, third and finat condition."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Following a 2 minute demonstration of all experimental conditions, the experiments with each subject were divided into four sessions, with one experimental condition in each session. There was a 1 minute rest between every two sessions. Each session comprised 5 tests. Test 1 started when the subject had no experience with the particulw experimental condition. Test 2, 3, 4, and 5 started after the subjects had 3, 6, 9 and 12 minutes experience respective y. Practice trials occurred between the tests. Each test had 15 trials of fish catching. At the end of each test, the number fish both caught and missed (as both an absolute number and a relative percentage) and mean trial time were displayed to the subject."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" At the end of the experiment, a short questionnaire was conducted to colleci users’ subjective preferences for all experimental conditions."}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Performance Measures "}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Task performance was measured by trial completion time, error rate (capture and miss percentage) and error magnitude. Trial completion time was defined as the time duration from the beginning of the trial to the moment when the subject grasped. Error rate was defined as the percentage of fish missed in a test."}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Experimental Results "}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" In total our experiment, which comprised 3600 experi- mental trials (i.e. 2 (cursor types) x 2 (display modes) x 12 (subjects) x 5 (tests) x 15 (trials per test)), with 3 performance measures per trial (i.e. trial completion time, error rate, and error magnitude), yielded 10,800 data points. Linear variance analysis was used to evaluate the statistical significance of the independent variables and their potential interactions for each of the three performance measures. Logarithmic non-linear transformations were applied to completion time and error magnitude scores in analyzing statistical significance, since residual analysis showed that these two measures were skewed towards the short fitted values. This section presents the primary results of the statistical analysis."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Trial Completion Time. The variance analysis indicated that cursor type (F(l, 3567) = 1148.5, p<.0001), display mode (F(l, 3567)=630.3, p<.0001), cursor type and display mode interaction (F(l, 3567)=253.5, p<.0001), subjects (F(l 1, 3567)=96.1, p<.0001), learning phase (F(4, 3567)=70.1, p<.0001) and triat number (different fish size) all very significantly affected trial completion time. Fig. 4 illustrates the effect of cursor type (silk vs. wire frame) and display mode (stereo vs. mono) to completion time."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/SC4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Ranking these results in the order from best to worst, the mean completion time for each of the four interfaces were as follows. SS: 2.09 sec.; MS: 2.38 sec.; SW: 2.90 sec.; MW: 4.61 sec. Post hoc analysis shows that the differences between every pair of interfaces were significan~ all at the p <.0001 level."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Error Rate. The statistically significant factors affecting error rate were: cursor type (F(l, 221) = 122.1, p<.0001), display mode (F(l, 221)=67.9, p<.0001), cursor type and display mode interaction (F(l, 221)=33.0, p<.0001), subjects (F(l 1, 221)=5.75, p<.0001), and learaing phase F(4, 221)=3.69, p=0.0062). Fig. 5 illustrates the effect of cursor type and display mode on error rate."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The performance order of the four interfaces measured in terms of error rate was exactly the same as that measured by trial completion time. The mean error rate for each combination of the four interfaces were SS: 12.7%, MS: 16.1%, SW: 20%, MW: 39.3%. The results of the Post- hoc pairwise comparison on error rate were as follows. SS VS. MS: p = .0795; SS’ VS. SW: p = .0002; SS VS. MW: p < .()()o~; MS VS. SW: p=.0479; MS VS. MW: p < .0001; SW vs. MW: p <.0001. The statistical significance of the difference between SS and MS was rather weak; however, all other pairwise differences were significant to greater degrees."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/SC5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/SC6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Error Magnitude. The effect of cursor type and display mode on error magnitude are shown in Fig. 6. Error magnitude was significantly affected by cursor type (Ill, 761) = 19.9, p<.0001), display mode (F(l, 761)=39.2, p<.0001), subjects (F(l 1, 761)=3.60, p<.0001), and experimental phase (F(4, 761)=3.88, p=0.004). No significance for cursor type and display mode interaction (F(l, 761)=.009, p=.92) was foundjho”wever."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The means of error magnitude were 0.197, 0,337, 0.577, and 0.68 for SS, SW, MS, and MW interfaces respectively.Note that, in contrast to the other two error measures, SW produced smaller errors than MS; however, the pairwise difference between SW and MS was not statistically significant (p = 0:16). All other pairwise differences were significant (from p = .003 to p < .0001)."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" earning Effects. Fig. 7 demonstrates subjects’ completion time performances in relation to the learning phase. It shows that the relative scores between the interfaces were consistent over the experimental tests. Subjects improved their time score in SS, MS and SW mode as they gained more experience, and presumably more confidence. Little improvement in completion time was found with the MW condition."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Fig. 8 gives error rate in relation to learning phase. Again the relative rank of each mode was consistent across alt five phases of the experiment. Interestingly, error rate for the MW condition showed the most obvious improvement over the experiment. A small amount of improvement was found in the MS condition, and essentially none in the SS and SW modes."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/SC7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/SC8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Comparing Fig. 7 with Fig. 8 reveals important information about speed accuracy tradeoff patterns with respect to learning. For the MW mode, subjects had more than a 35% error rate, which apparently caused them to focus on improving the accuracy aspect of the task at the expense of time performance. In the other three cases (SS, MS, and SW), subjects already had less than a 25% error rate and it appeafs that they were more satisfied with this level of accuracy, and thus were devoting more effort to shorting their trial completion times."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Subjective Preference. Subjective evaluations (Table 1) are consistent with the other performance measures. SS was the most preferred and MW was the least liked. Of special interest is the fact that MS was ranked higher than SW."}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/SC9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Summary of Resu/ts. The experiment largely confirmed our initial hypothesis. In general, the “silk surface” was the most effective factor for successful acquisition. While stereo presentation in combination with the silk surface improved performance significantly, performance with the silk surface in mono display mode was in fact better than the stereo wire frame case for all measures except error magnitude, for which no significant difference was found."}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"DISCUSSION"}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Even though comparatively little perceptual research has been carried out on the relative strengths of various depth cues, of which only a small portion has addressed issues specifically related to computer graphic presentation, the results of our experiment appear to confii some of those earlier investigations. In particular, in an early cue conflict study, Schriever [10] compared the relative influences of binocular disparity (i.e. stereoscopic displays), perspective, shading and occlusion, and showed among other things the dominance of occlusion over disparity information. More recently, Bratmstein et at [1] showed that conflicting edge- occlusion dominates disparity. Even more recently, Wickens et al [14] in a review of depth combination literature, concluded that motion, disparity and occlusion are the most powerful depth cues in displays. The results presented here clearly contribute to that literature by illustrating some of the powerful advantages that can be afforded by augmenting visual feedback through either partial occlusion or binocular disparity, and in particular both in combination."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Two points of particular interest with respect to the silk cursor distinguish this research from other studies. One of these is the fact that the silk cursor does not block completely the view of any object which it occludes, due to the fact that it is semi-transparent. In essence, therefore, we contend that not only are important enhancements of depth perception to be gained through application of occlusion cues, but the one clear disadvantage of complete occlusion is greatly diminished – namely, the fact that all information about objects being obscured by an opaque intervening object is necessarily lost, For such practical computer- related applications as pursuit tracking, docking, target acquisition, etc., this is expected to present a significant advantage."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" The second point relates to the fact that the silk cursor provides discrete, rather than continuous, levels of depth information. This is in contrast to stereoscopic displays, which are able to provide information not only about wherher one object is farther away than another object but also to a significant extent by how much they are separated in space, by means of binocular depth scaling. The silk cursor, on the other hand, is not able to provide this information. In Fig. 5 we see that the error rate for the MS case was lower than that of the SW case, which supports the effectiveness of the silk cursor as a discrete capturing device. However, upon examining Fig. 6 we note that the magnitude of errors for the MS case are larger than those of the SW case. The implication of this is that, although fewer errors were made with the silk surface cursor, the magnitude of those fewer errors must have been relatively larger than for the SW case, suggesting that continuous depth information was not being used."}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" In summary, we are quite encouraged by these results with the semi-transparent silk cursor, especially for applications in 3D interactive environments. In one existing application – our research on evaluating isometric versus elastic 6 DOF controllers – we were long hindered by the lack of an adequate display means which would allow us to concentrate on the control aspects of the experiment, even though we had already been using a stereoscopic display, the use of the silk cursor overcame the earlier display bottleneck, and allowed us to conduct that 6 DOF tracking experiment successfully [17]."}]},{"nodeType":1,"tagName":"p"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"CONCLUSION"}]}]},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" We have proposed a semi-transparent silk volume cursor, to serve as a novel technique for performing target acquisition type tasks in 3D environments. Within the context of a carefully designed “virtual fishing” experiment that represented a dynamic 3D target acquisition task, the silk volume cursor demonstrated superior performance over a comparable wire frame cursor, both in stereo and in mono display modes."}]},{"nodeType":1,"tagName":"p"}],"_id":"eey9wdATKv6iC4Y7"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n    "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing\n    remote screen content on touch- and pen-operated systems\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated\n        display systems. They provide users with access to screen content that would otherwise be impossible\n        or hard to reach, e.g., because it is located behind a bezel or far away from the user. Drag-and-pop is an extension\n        of traditional drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop\n        responds by temporarily moving potential target icons towards the user’s current cursor location, thereby allowing\n        the user to interact with these icons using comparably small hand movements. Drag-and-Pick extends the\n        drag-and-pop interaction style such that it allows activating icons, e.g., to open folders or launch applications.\n        In\n        this paper, we report the results of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’\n        (4.50m) wide interactive display wall. Participants where able to file icons up to 3.7 times faster when using the\n        drag-and-pop interface.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen,\n        heterogeneous display.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    With the emergence of pen- and touch-operated personal\n    digital assistants (PDAs), tablet computers,\n    and wall-size displays (e.g., Liveboard, Elrod et al.,\n    1992; Smartboard, http://www.smarttech.com),\n    touch and pen input have gained popularity. Over\n    the past years, more complex display systems have\n    been created by combining multiple such display\n    units. Wall-size touch displays have been combined\n    into display walls, such as the DynaWall (Streitz\n    2001), or the iRoom Smartboard wall (Johanson,\n    2002b). Recent PDAs and tablet computers allow\n    connecting additional displays, such as another tablet\n    or a monitor in order to extend the device’s internal\n    display space.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple\n    display units bring up a new class of input challenges\n    that cannot always be solved with existing\n    techniques, because many of the existing techniques\n    were designed for indirect input devices, such as\n    mice, track pads, or joysticks. Indirect input devices\n    can be used on arbitrary display configurations, because\n    they can simply be mapped to the respective\n    topology (e.g., PointRight, Johanson 2002a). Touch/\n    pen input, however, is based on the immediate correspondence between input space and display\n    space and thus requires users to adapt their input\n    behavior to the physicality of the display system.\n    Here are three examples where this can become\n    problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 1: External monitors. One or more display\n    units within a display system may not be\n    equipped with a touch or pen sensor. Connecting an\n    external monitor to a tablet computer or PDA, for\n    example, allows users to see more material, but requires\n    them to use an indirect input device, such as a\n    mouse, when interacting with content on the external\n    monitor. Since some tablet-specific tasks, such as\n    scribbling, are hard to accomplish with a mouse,\n    users find themselves continuously switching between\n    pen and mouse."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 2: Interactions across display units.\n    Some interaction techniques, such as drag-and-drop,\n    require users to interact with two or more icons in a\n    single pen-down interaction. If these icons are distributed\n    across physically separate pen/touch input\n    display units, users first have to bring all involved\n    icons to the same display unit, a potentially timeconsuming\n    activity (Figure 2a-c)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 3: Bridging long distances. Accessing\n    icons located far away from the user, e.g., on the\n    opposite side of a 15’ DynaWall, requires users to\n    physically walk over, the time for which may in\n    some circumstances increase linearly with distance\n    (Guiard et at, 2001). In addition, drag interactions\n    get more error-prone with distance, because users\n    drop objects accidentally when failing to continuously\n    keep the pen tip in contact with the display\n    surface (Rekimoto 1997)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"2 Drag-and-pop & drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-pop and drag-and-pick are interaction\n    techniques that address these issues. We will begin\n    by giving an overview; more detailed descriptions of\n    both techniques can be found in Section 4"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"extends traditional drag-and-drop\n    as illustrated by Figure 1. (a) The user intends to\n    delete a Word memo by dragging it into the recycle\n    bin. (b) As the user starts dragging the memo’s icon\n    towards the recycle bin, icons that are of compatible\n    type and located in the direction of the user’s drag\n    motion “pop up”. This means that for each of these\n    icons a link icon is created (tip icon) that appears in\n    front of the user’s cursor. Tip icons are connected to\n    the original icon (base icon) using a rubber band.\n    (c) The user drags the memo over the recycle bin\n    and releases the mouse button. The recycle bin accepts\n    the memo. Alternatively, the user could have\n    dropped the memo over the word processor or the\n    web browser icon, which would have launched the\n    respective application with the memo. (d) When the\n    user drops the icon, all tip icons disappear instantly.\n    Figure 2d shows how drag-and-pop simplifies\n    dropping icons onto targets located at the other side"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction\n    concept such that it allows activating icons,\n    e.g., to open a folder or to launch a program. While\n    drag-and-pop is initiated by the user dragging an\n    icon, drag-and-pick starts with the user performing a\n    drag interaction on empty screen space. The system’s\n    response to this drag interaction is similar to\n    drag-and-pop, but with two differences. First, all\n    icons located in the direction of the drag motion will\n    pop up, not only those of compatible type (Figure 3).\n    Second, as the user drags the mouse cursor over one\n    of the targets and releases the mouse button, the\n    folder, file, or application associated with the icon is\n    activated as if it had been double clicked.\n    Figure 4 shows how this allows users to use the\n    pen for launching an application, the icon of which\n    is located on a monitor not supporting pen input.\n    In principle, drag-and-pick can be applied to any\n    type of widget, e.g., any buttons and menus located\n    on a non-pen accessible monitor. In this paper, however,\n    we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"3 Related work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-drop is a well-know interaction technique\n    for transferring or copying information using a\n    pointing device, while avoiding the use of a hidden\n    clipboard (Wagner, 1995; Beaudouin-Lafon, 2000).\n    Hyperdragging (Rekimoto, 1999), allows extending\n    drag-and-drop across physically separate displays\n    (Scenario 2), but requires an indirect input device,\n    such as a mouse. Most techniques compatible with\n    pen usage are based on point-and-click, e.g., pickand-\n    drop (Rekimoto, 1997) and take-and-put (Streitz\n    et al., 2001). These techniques, however, cannot be\n    used to access material on a display unit not providing\n    pen support (Scenario 1)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A different set of interaction techniques have\n    been proposed to help users overcome large distances\n    (Scenario 3). Manual And Gaze Input Cascaded\n    (MAGIC) pointing (Zhai et al., 1999) uses eye\n    tracking to move the cursor to the target area, from\n    where the user guides the cursor manually (which\n    requires an indirect input device). Gesture input\n    techniques allow selecting a target and a command\n    in a single interaction and are generally compatible\n    with pen input (Rubine, 1991). ‘Throwing’ allows users to accelerate an object with a small gesture; the\n    object then continues its trajectory based on its inertia\n    (Gei ler, 1998). The imprecision of human motor\n    skills has prevented throwing from being used\n    for reliable target acquisition. Myers et al. (2002)\n    used laser pointers to acquire targets on a Smartboard,\n    but found them to be slower than touch input.\n    A variety of mouse-based interaction techniques\n    use destination prediction to simplify navigation\n    (e.g., Jul, 2002). Dulberg et al. (1999) proposed a\n    flying click or flick for snapping the mouse to target\n    locations. Swaminathan and Sato (1997) proposed\n    making relevant controls on the screen “sticky”.\n    As an alternative way of launching applications,\n    today’s operating systems offer menus containing\n    lists of available application or documents. A ‘send\n    to’ option (Microsoft Windows) allows sending an\n    icon to a target selected from a predefined list.\n    Compared to 2D desktops, which typically use a\n    larger amount of screen space than pull-down or\n    pop-up menus, menus are limited to a smaller selection\n    of choices unless they use a hierarchical menu\n    organization, which makes their usage less transparent\n    and often less efficient. Furthermore, invoking a\n    content-menu may require hitting a qualifier key,\n    which can be problematic on touch-based systems."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4 Design and algorithms"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    In this section, we will take a more detailed look at\n    the design and algorithms behind drag-and-pop/pick.\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.1 Selecting candidates"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    In order to reduce clutter, drag-and-pop creates tip\n    icons only for a subset of the icons on the screen.\n    Drag-and-pop’s candidate selection algorithm is\n    initialized with the entire set of icons on the screen;\n    it then successively eliminates candidates using the\n    following four rules.\n    First, icons of incompatible type are eliminated.\n    If the user drags a text file, the icon of a text processor\n    can create a tip icon; the recycle bin icon can\n    create a tip icon; the icon of another text file, however,\n    cannot, because dragging two text files onto\n    each other is usually not associated with any behavior.\n    Drag-and-pick bypasses this selection step in\n    order to allow users to activate any type of icon.\n    Second, icons located between the cursor and the\n    location where the tip icons cluster will appear (see\n    following section) are eliminated. This rule avoids\n    creating tip icons that move away from the cursor.\n    Third, only icons that are located within a certain\n    angle from the initial drag direction (the target sector)\n    are considered. The initial drag direction is determined\n    the moment the user drags an icon further than a given threshold (default 15 pixels). During\n    preliminary testing on a Smartboard, we got good\n    results with first-time users when using sector sizes\n    of  30 to  45 degrees. The sector size could be reduced\n    to sector sizes of  20 degrees as users gained\n    more experience.\n    Forth, if the number of qualifying icons is above\n    some hard limit, drag-and-pop eliminates tip icon\n    candidates until the hard limit is met. Icons are removed\n    in an order starting at the outside of the target\n    sector moving inwards. This rule assures the scalability\n    of drag-and-pop to densely populated displays,\n    but requires drag-and-pop users working with\n    densely populated screens to aim more precisely.\n    We typically use hard limits between 5 and 10.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.2 Computing the tip icon layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Once tip icon candidates have been selected, dragand-\n    pop determines where on the screen to place the\n    tip icons. In order to avoid interference between tip\n    icons, the location of all tip icons is computed in a\n    centralized fashion.\n    Our drag-and-pop prototype uses the following\n    algorithm that is illustrated by Figure 5: (1) Snap\n    icons to a grid and store them in a two-dimensional\n    array, with each array element representing one cell\n    of the grid. If two or more icons fall into the same\n    cell, refine the grid. (2) Shrink the icon layout by\n    eliminating all array columns and rows that contain\n    no icons. (3) Translate icon positions back to 2D\n    space by mapping the array onto a regular grid. By\n    default, the output grid is chosen to be slightly\n    tighter than the input grid, which gives extra compression.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We chose this algorithm, because it preserves\n    alignment, proximity, and spatial arrangement between\n    icons, which allows users to use their spatial\n    memory when identifying the desired target within\n    the tip icon cluster. This is especially useful when\n    tip icons look alike (e.g., a folder in a cluster of\n    folders). In order to help users distinguish local icon clusters from surrounding icons more easily, the\n    algorithm may be adjusted to shrink empty rows and\n    columns during layout computation instead of removing\n    them entirely."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed,\n    drag-and-pop positions it on the screen such that the\n    center of the layout’s bounding box is located at the\n    direct extension of the user’s current mouse motion.\n    The distance of the tip icon cluster to the user’s current\n    cursor position is configurable. For inexperienced\n    users, we got best results with distances of\n    around 100 pixels; shorter distances made these users\n    likely to overshoot the cluster. For more experienced\n    users, we were able to reduce the distance to\n    values around 30 pixels, which allowed these users\n    to operate drag-and-pop with less effort, in a more\n    “menu-like” fashion. In order to reduce visual interference\n    between tip icons and icons on the desktop,\n    drag-and-pop diminishes desktop icons while tip\n    icons are visible."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.3 The rubber band"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    When the tip icon cluster is displayed, users need to\n    re-identify their targets within the tip icon cluster in\n    order to be able to successfully acquire them.\n    Our first implementation of drag-and-pop created\n    tip icons on top of their bases and used slow-inslow-\n    out animation (Shneiderman 1998) to move tip\n    icons to their final location. While this approach\n    allowed users to locate the final position of the desired\n    tip icon by visually tracking it on its way from\n    basis to final position, it also required users to either\n    wait for the animation to complete or to acquire a\n    moving target. We therefore chose to abandon the\n    animation and immediately display tip icons at their\n    final destinations.\n    In lieu of the animation, we provided tip icons\n    with rubber bands. The design prototype of the rubber\n    band is shown in Figure 6. For performance reasons,\n    our prototype, which is shown in all other\n    screenshots, uses rubber bands of a lower level of\n    graphical detail, i.e., a tape and three lines in the\n    color scheme of the corresponding icon.\n    The purpose of the rubber band is to offer the\n    functionality of the animation, but without the problems\n    alluded to above. The rubber band, decorated\n    with the respective icon’s texture, can be thought of\n    as having been created by taking a photograph of the\n    tip icon animation with a very long shutter speed\n    (so-called motion blur, e.g., Dachille and Kaufman,\n    2000). Like the animation, the rubber band allows\n    users to trace the path from base to tip icon. However,\n    users can do this at their own pace and the customized\n    texturing of the rubber band allows users to\n    start tracing it anywhere, not only at the base."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The rubber band is provided with a narrow midriff\n    section, suggesting that the rubber band is elastic.\n    This design was chosen to help users understand\n    that tip icons have retracted to their bases when they\n    disappear at the end of the interaction. This feature\n    may also help users find their way to the tip icon\n    faster, because it provides users with a visual cue\n    about how far away the tip icon is located. A thick\n    rubber band section implies that the tip icon (or\n    base) is close; a thin rubber band section indicates\n    that the target is further away."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.4 Aborting drag-and-pop interactions"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    As soon as tip icons and rubber bands are shown on\n    the screen, drag-and-pop waits for the user to acquire\n    one of the tip icons to complete the ongoing\n    drag-and-pop or drag-and-pick interaction. There are\n    two cases, however, in which users will want to\n    abort the interaction without acquiring a tip icon.\n    The first case is when the user dragged the\n    mouse at a wrong angle so that the desired target\n    icon did not pop up. In this case, the user may either\n    drop the icon and try again or complete the interaction\n    as a regular drag-and-drop interaction, i.e., by\n    dropping the icon onto the target icon’s base instead.\n    The other case occurs if the user is intending to\n    perform a regular mouse drag operation, for example\n    to rearrange icons on the desktop or to capture a set\n    of icons using a lasso operation. For these cases,\n    drag-and-pop allows users to terminate tip icons onthe-\n    fly and to complete the interaction without dragand-\n    pop/pick. To abort, users have to move the\n    mouse cursor away from the tip icon cluster while\n    still keeping the mouse depressed. This can be done\n    by overshooting the cluster or by changing mouse\n    direction. In particular, this allows users to access\n    the underlying drag-and-drop and lasso-select functionality\n    by introducing a simple zigzag gesture into\n    their cursor path. The zigzag contains at least one motion segment moving away from the tip icons,\n    thus terminating tip icons as soon as they appear.\n    The algorithm: the tip icon cluster is kept alive as\n    long as at least one of the following three rules is\n    successful. The first rule checks whether the mouse\n    cursor has moved closer to the center of at least one\n    of the icons in the tip icon cluster. This rule makes\n    sure that the cluster does not disappear while users\n    approach their targets. The second rule checks if the\n    cursor is in the direct vicinity of an icon. This rule\n    provides tolerance against users overshooting a tip\n    icon while acquiring it. The third and last rule keeps\n    the cluster alive if the cursor is stationary or if it is\n    moving backwards very slowly (up to 5 pxl/frame).\n    This rule makes drag-and-pop insensitive to jitter.\n    Figure 7 illustrates the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5 User study"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    In this section, we report the results of a user study\n    comparing drag-and-pop with the traditional dragand-\n    drop technique. To examine the effects of bezelcrossing\n    as well as distance, as described in Scenarios\n    2 and 3, we chose to run the study on a tiled\n    wall-size display. During the study, in which participants\n    filed icons into folders or dragged them\n    onto the icons of matching applications, we recorded\n    the time and accuracy of these movements. Our\n    main hypothesis was that participants would perform\n    faster when using the drag-and-pop interface, primarily\n    because it would avoid the need for crossing\n    the bezels, but also because it would bridge the\n    space to very distant icons more efficiently.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.1 Desktop layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    To obtain a representative set of icon arrangements\n    for the study, we gathered desktop screenshots from\n    25 coworkers who volunteered their participation\n    (15 single, 6 dual, and 4 triple monitor users). Overall\n    resolutions ranged from 800,000 pixels to\n    3,900,000 pixels (66% more than the display wall\n    used in the experiment).\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We clustered the obtained desktops by number\n    of icons and arrangement pattern. Then we chose\n    representatives from each of the three resulting main\n    clusters for the study (Figure 8). The “sparse” desktop\n    reflected the desktops of roughly two thirds of\n    the participants. It contained only 11 icons, most of\n    which were lined up in the top left corner of the\n    screen. The “frame” desktop reflected the desktops\n    of three of the participants. It contained 28 icons\n    arranged around the top, left, and right edge of the\n    screen. The “cluttered” desktop, finally, contained\n    35 icons that were spread primarily across the top\n    and left half of the screen. Five participants had chosen\n    this style of arranging their icons.\n    Icon layouts were stretched to fit the aspect ratio\n    of the display wall used in the experiment. An area\n    at the bottom right of the screen was reserved for the\n    starting locations of the icons to be filed during the\n    study (dashed shape in Figure 8)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.2 Participants"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Eight colleagues with no experience using drag-andpop\n    were recruited for this experiment. Due to technical\n    problems, the data from one of these participants\n    had to be dropped leaving us with 7. There\n    were 2 female and 5 male participants ranging in age\n    between 18 and 35. All were right handed with normal\n    or corrected-to-normal vision."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.3 Method"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    The test was run on the DynaWall (Streitz, 2001), a\n    display wall consisting of three Smartboard units\n    (Figure 9). Each Smartboard consisted of a backprojected\n    72”display with resistive touch input, so\n    that the entire display was 15’ (4.50m) long and 45” (1.12m) high. Display units could be operated by\n    touching the display, but for easier handling participants\n    were provided with color-free felt pens. Each\n    of the three display units ran at a resolution of\n    1024x768 pixels, offering an overall resolution of\n    3072x768 pixels. The three display units were connected\n    to a single PC equipped with two Matrox\n    Millennium graphics cards and running WindowsXP.\n    During the experiment, the DynaWall ran\n    a simulated Windows desktop. We compared dragand-\n    pop to a control condition of drag-and-drop.\n    Since our preliminary Windows-based version of\n    drag-and-pop did not support the full functionality\n    required for the study, we implemented a simulation\n    using Macromedia Flash (www.macromedia.com).\n    The drag-and-pop interface used in the experiment\n    was configured to a  30 degree target sector, 35\n    pixel target distance, and a maximum number of 5\n    tip icons.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    To each desktop layout we added 10 document\n    icons in the lower right quadrant of the screen.\n    These appeared in six different arrangements (Figure\n    8 shows 2 of them). The participants’ task was to\n    drag these icons into a given target folder or application.\n    Icons of image files, for example, were to be\n    filed in a folder labeled “My Pictures” and all Word\n    documents should be dropped onto the Word application.\n    To counterbalance for order effects, we required\n    participants to file the documents in a randomized\n    order. That is, for each movement, the item\n    to be filed was highlighted along with the target\n    icon. All other document icons were frozen, so that\n    participants could only move the highlighted icon.\n    As soon as participants began moving an item, all\n    highlighting was removed, forcing participants to\n    remember the destination item. We did this to assure\n    that participants would have to re-identify tip icons\n    when using the drag-and-pop interface, just as they\n    would in a real-world task.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants were allowed several minutes to\n    practice moving and filing icons in the prototype to\n    get them accustomed to both the DynaWall display\n    and the drag-and-pop interface. Once it was clear\n    that users understood how to use the display and the\n    interfaces, they were allowed to go on to the study.\n    Participants filed 2 sets of icons for each interface\n    (drag-and-pop and control), for each of the three\n    desktops. Thus participants filed 2 x 10 icons x 2\n    interface x 3 desktops for a total of 120 movements.\n    To mitigate learning effects associated with new\n    desktop arrangements or a new interface, we omitted\n    the first 5 trials for any desktop-interface combination\n    from our analyses, yielding ~15 correct trials\n    per cell or 90 movements per participant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4 Results\n    5.4.1 Task performance\n    Task performance was evaluated through speed and\n    accuracy measurements. Error rates were considerably\n    larger for drag-and-pop than for the control\n    (6.7% vs. 1%). We observed two things that made\n    this type of error more likely in the drag-and-pop\n    condition. First, in the drag-and-pop condition candidate\n    targets were brought closer together, making\n    it easier to accidentally drop an item on the wrong\n    target. Second, because drag-and-pop targets had\n    been translated away from their “home” location,\n    participants would sometimes forget which item was\n    in fact the target, especially if visually similar icons\n    (e.g., other folders) had created tip icons as well.\n    All data analyses for movement times were performed\n    on the median movement times for each participant\n    in each condition to normalize the typical\n    skewing associated with response time data. Summary\n    statistics report the means of these times.\n    Target icons could be located in the same display\n    unit as the icon to be filed, in a neighbor display\n    unit, or in the display unit at the other end of the\n    display wall, requiring users to cross 0, 1, or 2 bezels\n    in order to file the icon. To test the effect of\n    bezel crossing on performance, we ran a 2 (Condition)\n    x 3 (Bezels Crossed) within subjects ANOVA\n    on the median movement data. This revealed a significant\n    main effect for condition, F(1,6) = 18.2,\n    p<\\0.01 Collapsed across all distances, drag-and-pop was significantly faster than the control. There was also a\n        significant main effect of bezels crossed, F(2,12)=19.5, p<\\0.01; movement time increased as the number of\n        bezels participants had to cross to get to the target icon increased. As hypothesized, we also saw a significant\n        interaction between condition and number of bezels crossed, F(2,12)=15.2, p<\\0.01. As seen in Figure 10, an\n        increase in the number of crossed bezels resulted in only a small increase in movement time for drag-and-pop,\n        whereas it had a huge effect for the control interface. When no bezels had to be crossed, drag-and-pop appeared\n        to be slightly slower than control, although follow-up t-tests showed that this difference was not significant,\n        t(6)=1.73, ns. When 1 or 2 bezels had to be crossed, drag-and-pop was significantly faster than drag-and-drop\n        (t(6)=4.02, p<\\0.01 & t(6)=4.12, p<\\0.01, respectively). With 1 bezel crossed, dragand- pop was twice as fast as\n        the control and with 2 bezels it was 3.7 times as fast. "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 11 shows a scatter plot of movement time\n            versus target distance for both conditions. The best\n            linear fit for drag-and-drop was f(x)=0.007x-1.76,\n            r2=0.23. The linear fit for drag-and-pop was\n            f(x)=4.19, r2<\\0.0001. This reinforces what can be seen in Figure 10—movement time increases with distance\n                for the control interface, but stays relatively constant for the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4.2 Questionnaire and subjective feedback\n                    At the end of the study, participants answered a\n                    short questionnaire about their experience using the\n                    DynaWall and drag-and-pop. Participants were very\n                    enthusiastic about drag-and-pop. On a 7 point Likert\n                    scale (where 7=strongly agree and 1=strongly disagree),\n                    there was a mean > 6 for questions such as,\n                    “I liked using drag-and-pop”, “I always understood\n                    what was happening when drag-and-pop was on,”and “I would use drag-and-pop for large displays.”\n                    There was a mean of less than 3 for “It took a long\n                    time to get used to drag-and-pop” and “It was hard\n                    to control what the targets did when drag-and-pop\n                    was on.” Participants reported the drag-and-pop\n                    interface to cause less manual stress and fatigue than\n                    the control interface.\n                    The most common problem with drag-and-pop\n                    was in getting the right group of targets to pop up,\n                    and several participants requested a wider angle for\n                    destination targets. This relates to an observation we\n                    made about how people interact with touch-sensitive\n                    wall-displays. On the wall display, participants had\n                    to employ their whole arm to make a movement,\n                    resulting in targeting motions in the shape of arcs.\n                    This means that the initial direction of the movement\n                    was not in the direction of the target. To accommodate\n                    such arcs in the future, we have adapted the\n                    target selection algorithm of drag-and-pop by giving\n                    the target sector extra tolerance for movements towards\n                    the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"6 Conclusions and future work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n                    The substantial time-savings found in the user study\n                    confirm our expectations. Although when used\n                    within a single screen unit drag-and-pop does not\n                    seem to by faster than traditional drag and drop (first\n                    pair of bars in Figure 10; drag-and-pop’s capability\n                    of bridging distance to the target seems to be nullified\n                    by the need for re-orientation), its advantages\n                    on very large screens and its capability of bridging\n                    across display units are apparent. On the usability\n                    side, we were glad to see that participants had no\n                    trouble learning how to use the technique and that\n                    they described the technique as understandable and\n                    predictable. The single biggest shortcoming, the\n                    target selection, is the subjects of current work. In\n                    addition to the changes described above, we consider\n                    dropping the notion of a fixed target sector size\n                    and replace it with a mechanism that adjusts the sector\n                    size dynamically based on the number of matching\n                    targets.\n                    Given the recent advent of commercially available\n                    tablet computers, our next step will be to explore\n                    how drag-and-pop and especially drag-andpick\n                    can help tablet computer users work with external\n                    monitors. While this paper focused on icons, we\n                    plan to explore ways of operating menus, sliders,\n                    and entire applications using the techniques described\n                    in this article."}]}],"_id":"4xH9pvqJwaDAynZB"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n    "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing\n    remote screen content on touch- and pen-operated systems\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated\n        display systems. They provide users with access to screen content that would otherwise be impossible\n        or hard to reach, e.g., because it is located behind a bezel or far away from the user. Drag-and-pop is an extension\n        of traditional drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop\n        responds by temporarily moving potential target icons towards the user’s current cursor location, thereby allowing\n        the user to interact with these icons using comparably small hand movements. Drag-and-Pick extends the\n        drag-and-pop interaction style such that it allows activating icons, e.g., to open folders or launch applications.\n        In\n        this paper, we report the results of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’\n        (4.50m) wide interactive display wall. Participants where able to file icons up to 3.7 times faster when using the\n        drag-and-pop interface.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen,\n        heterogeneous display.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    With the emergence of pen- and touch-operated personal\n    digital assistants (PDAs), tablet computers,\n    and wall-size displays (e.g., Liveboard, Elrod et al.,\n    1992; Smartboard, http://www.smarttech.com),\n    touch and pen input have gained popularity. Over\n    the past years, more complex display systems have\n    been created by combining multiple such display\n    units. Wall-size touch displays have been combined\n    into display walls, such as the DynaWall (Streitz\n    2001), or the iRoom Smartboard wall (Johanson,\n    2002b). Recent PDAs and tablet computers allow\n    connecting additional displays, such as another tablet\n    or a monitor in order to extend the device’s internal\n    display space.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple\n    display units bring up a new class of input challenges\n    that cannot always be solved with existing\n    techniques, because many of the existing techniques\n    were designed for indirect input devices, such as\n    mice, track pads, or joysticks. Indirect input devices\n    can be used on arbitrary display configurations, because\n    they can simply be mapped to the respective\n    topology (e.g., PointRight, Johanson 2002a). Touch/\n    pen input, however, is based on the immediate correspondence between input space and display\n    space and thus requires users to adapt their input\n    behavior to the physicality of the display system.\n    Here are three examples where this can become\n    problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 1: External monitors. One or more display\n    units within a display system may not be\n    equipped with a touch or pen sensor. Connecting an\n    external monitor to a tablet computer or PDA, for\n    example, allows users to see more material, but requires\n    them to use an indirect input device, such as a\n    mouse, when interacting with content on the external\n    monitor. Since some tablet-specific tasks, such as\n    scribbling, are hard to accomplish with a mouse,\n    users find themselves continuously switching between\n    pen and mouse."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 2: Interactions across display units.\n    Some interaction techniques, such as drag-and-drop,\n    require users to interact with two or more icons in a\n    single pen-down interaction. If these icons are distributed\n    across physically separate pen/touch input\n    display units, users first have to bring all involved\n    icons to the same display unit, a potentially timeconsuming\n    activity (Figure 2a-c)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 3: Bridging long distances. Accessing\n    icons located far away from the user, e.g., on the\n    opposite side of a 15’ DynaWall, requires users to\n    physically walk over, the time for which may in\n    some circumstances increase linearly with distance\n    (Guiard et at, 2001). In addition, drag interactions\n    get more error-prone with distance, because users\n    drop objects accidentally when failing to continuously\n    keep the pen tip in contact with the display\n    surface (Rekimoto 1997)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"2 Drag-and-pop & drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-pop and drag-and-pick are interaction\n    techniques that address these issues. We will begin\n    by giving an overview; more detailed descriptions of\n    both techniques can be found in Section 4"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"extends traditional drag-and-drop\n    as illustrated by Figure 1. (a) The user intends to\n    delete a Word memo by dragging it into the recycle\n    bin. (b) As the user starts dragging the memo’s icon\n    towards the recycle bin, icons that are of compatible\n    type and located in the direction of the user’s drag\n    motion “pop up”. This means that for each of these\n    icons a link icon is created (tip icon) that appears in\n    front of the user’s cursor. Tip icons are connected to\n    the original icon (base icon) using a rubber band.\n    (c) The user drags the memo over the recycle bin\n    and releases the mouse button. The recycle bin accepts\n    the memo. Alternatively, the user could have\n    dropped the memo over the word processor or the\n    web browser icon, which would have launched the\n    respective application with the memo. (d) When the\n    user drops the icon, all tip icons disappear instantly.\n    Figure 2d shows how drag-and-pop simplifies\n    dropping icons onto targets located at the other side"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction\n    concept such that it allows activating icons,\n    e.g., to open a folder or to launch a program. While\n    drag-and-pop is initiated by the user dragging an\n    icon, drag-and-pick starts with the user performing a\n    drag interaction on empty screen space. The system’s\n    response to this drag interaction is similar to\n    drag-and-pop, but with two differences. First, all\n    icons located in the direction of the drag motion will\n    pop up, not only those of compatible type (Figure 3).\n    Second, as the user drags the mouse cursor over one\n    of the targets and releases the mouse button, the\n    folder, file, or application associated with the icon is\n    activated as if it had been double clicked.\n    Figure 4 shows how this allows users to use the\n    pen for launching an application, the icon of which\n    is located on a monitor not supporting pen input.\n    In principle, drag-and-pick can be applied to any\n    type of widget, e.g., any buttons and menus located\n    on a non-pen accessible monitor. In this paper, however,\n    we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"3 Related work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-drop is a well-know interaction technique\n    for transferring or copying information using a\n    pointing device, while avoiding the use of a hidden\n    clipboard (Wagner, 1995; Beaudouin-Lafon, 2000).\n    Hyperdragging (Rekimoto, 1999), allows extending\n    drag-and-drop across physically separate displays\n    (Scenario 2), but requires an indirect input device,\n    such as a mouse. Most techniques compatible with\n    pen usage are based on point-and-click, e.g., pickand-\n    drop (Rekimoto, 1997) and take-and-put (Streitz\n    et al., 2001). These techniques, however, cannot be\n    used to access material on a display unit not providing\n    pen support (Scenario 1)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A different set of interaction techniques have\n    been proposed to help users overcome large distances\n    (Scenario 3). Manual And Gaze Input Cascaded\n    (MAGIC) pointing (Zhai et al., 1999) uses eye\n    tracking to move the cursor to the target area, from\n    where the user guides the cursor manually (which\n    requires an indirect input device). Gesture input\n    techniques allow selecting a target and a command\n    in a single interaction and are generally compatible\n    with pen input (Rubine, 1991). ‘Throwing’ allows users to accelerate an object with a small gesture; the\n    object then continues its trajectory based on its inertia\n    (Gei ler, 1998). The imprecision of human motor\n    skills has prevented throwing from being used\n    for reliable target acquisition. Myers et al. (2002)\n    used laser pointers to acquire targets on a Smartboard,\n    but found them to be slower than touch input.\n    A variety of mouse-based interaction techniques\n    use destination prediction to simplify navigation\n    (e.g., Jul, 2002). Dulberg et al. (1999) proposed a\n    flying click or flick for snapping the mouse to target\n    locations. Swaminathan and Sato (1997) proposed\n    making relevant controls on the screen “sticky”.\n    As an alternative way of launching applications,\n    today’s operating systems offer menus containing\n    lists of available application or documents. A ‘send\n    to’ option (Microsoft Windows) allows sending an\n    icon to a target selected from a predefined list.\n    Compared to 2D desktops, which typically use a\n    larger amount of screen space than pull-down or\n    pop-up menus, menus are limited to a smaller selection\n    of choices unless they use a hierarchical menu\n    organization, which makes their usage less transparent\n    and often less efficient. Furthermore, invoking a\n    content-menu may require hitting a qualifier key,\n    which can be problematic on touch-based systems."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4 Design and algorithms"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    In this section, we will take a more detailed look at\n    the design and algorithms behind drag-and-pop/pick.\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.1 Selecting candidates"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    In order to reduce clutter, drag-and-pop creates tip\n    icons only for a subset of the icons on the screen.\n    Drag-and-pop’s candidate selection algorithm is\n    initialized with the entire set of icons on the screen;\n    it then successively eliminates candidates using the\n    following four rules.\n    First, icons of incompatible type are eliminated.\n    If the user drags a text file, the icon of a text processor\n    can create a tip icon; the recycle bin icon can\n    create a tip icon; the icon of another text file, however,\n    cannot, because dragging two text files onto\n    each other is usually not associated with any behavior.\n    Drag-and-pick bypasses this selection step in\n    order to allow users to activate any type of icon.\n    Second, icons located between the cursor and the\n    location where the tip icons cluster will appear (see\n    following section) are eliminated. This rule avoids\n    creating tip icons that move away from the cursor.\n    Third, only icons that are located within a certain\n    angle from the initial drag direction (the target sector)\n    are considered. The initial drag direction is determined\n    the moment the user drags an icon further than a given threshold (default 15 pixels). During\n    preliminary testing on a Smartboard, we got good\n    results with first-time users when using sector sizes\n    of  30 to  45 degrees. The sector size could be reduced\n    to sector sizes of  20 degrees as users gained\n    more experience.\n    Forth, if the number of qualifying icons is above\n    some hard limit, drag-and-pop eliminates tip icon\n    candidates until the hard limit is met. Icons are removed\n    in an order starting at the outside of the target\n    sector moving inwards. This rule assures the scalability\n    of drag-and-pop to densely populated displays,\n    but requires drag-and-pop users working with\n    densely populated screens to aim more precisely.\n    We typically use hard limits between 5 and 10.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.2 Computing the tip icon layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Once tip icon candidates have been selected, dragand-\n    pop determines where on the screen to place the\n    tip icons. In order to avoid interference between tip\n    icons, the location of all tip icons is computed in a\n    centralized fashion.\n    Our drag-and-pop prototype uses the following\n    algorithm that is illustrated by Figure 5: (1) Snap\n    icons to a grid and store them in a two-dimensional\n    array, with each array element representing one cell\n    of the grid. If two or more icons fall into the same\n    cell, refine the grid. (2) Shrink the icon layout by\n    eliminating all array columns and rows that contain\n    no icons. (3) Translate icon positions back to 2D\n    space by mapping the array onto a regular grid. By\n    default, the output grid is chosen to be slightly\n    tighter than the input grid, which gives extra compression.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We chose this algorithm, because it preserves\n    alignment, proximity, and spatial arrangement between\n    icons, which allows users to use their spatial\n    memory when identifying the desired target within\n    the tip icon cluster. This is especially useful when\n    tip icons look alike (e.g., a folder in a cluster of\n    folders). In order to help users distinguish local icon clusters from surrounding icons more easily, the\n    algorithm may be adjusted to shrink empty rows and\n    columns during layout computation instead of removing\n    them entirely."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed,\n    drag-and-pop positions it on the screen such that the\n    center of the layout’s bounding box is located at the\n    direct extension of the user’s current mouse motion.\n    The distance of the tip icon cluster to the user’s current\n    cursor position is configurable. For inexperienced\n    users, we got best results with distances of\n    around 100 pixels; shorter distances made these users\n    likely to overshoot the cluster. For more experienced\n    users, we were able to reduce the distance to\n    values around 30 pixels, which allowed these users\n    to operate drag-and-pop with less effort, in a more\n    “menu-like” fashion. In order to reduce visual interference\n    between tip icons and icons on the desktop,\n    drag-and-pop diminishes desktop icons while tip\n    icons are visible."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.3 The rubber band"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    When the tip icon cluster is displayed, users need to\n    re-identify their targets within the tip icon cluster in\n    order to be able to successfully acquire them.\n    Our first implementation of drag-and-pop created\n    tip icons on top of their bases and used slow-inslow-\n    out animation (Shneiderman 1998) to move tip\n    icons to their final location. While this approach\n    allowed users to locate the final position of the desired\n    tip icon by visually tracking it on its way from\n    basis to final position, it also required users to either\n    wait for the animation to complete or to acquire a\n    moving target. We therefore chose to abandon the\n    animation and immediately display tip icons at their\n    final destinations.\n    In lieu of the animation, we provided tip icons\n    with rubber bands. The design prototype of the rubber\n    band is shown in Figure 6. For performance reasons,\n    our prototype, which is shown in all other\n    screenshots, uses rubber bands of a lower level of\n    graphical detail, i.e., a tape and three lines in the\n    color scheme of the corresponding icon.\n    The purpose of the rubber band is to offer the\n    functionality of the animation, but without the problems\n    alluded to above. The rubber band, decorated\n    with the respective icon’s texture, can be thought of\n    as having been created by taking a photograph of the\n    tip icon animation with a very long shutter speed\n    (so-called motion blur, e.g., Dachille and Kaufman,\n    2000). Like the animation, the rubber band allows\n    users to trace the path from base to tip icon. However,\n    users can do this at their own pace and the customized\n    texturing of the rubber band allows users to\n    start tracing it anywhere, not only at the base."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The rubber band is provided with a narrow midriff\n    section, suggesting that the rubber band is elastic.\n    This design was chosen to help users understand\n    that tip icons have retracted to their bases when they\n    disappear at the end of the interaction. This feature\n    may also help users find their way to the tip icon\n    faster, because it provides users with a visual cue\n    about how far away the tip icon is located. A thick\n    rubber band section implies that the tip icon (or\n    base) is close; a thin rubber band section indicates\n    that the target is further away."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.4 Aborting drag-and-pop interactions"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    As soon as tip icons and rubber bands are shown on\n    the screen, drag-and-pop waits for the user to acquire\n    one of the tip icons to complete the ongoing\n    drag-and-pop or drag-and-pick interaction. There are\n    two cases, however, in which users will want to\n    abort the interaction without acquiring a tip icon.\n    The first case is when the user dragged the\n    mouse at a wrong angle so that the desired target\n    icon did not pop up. In this case, the user may either\n    drop the icon and try again or complete the interaction\n    as a regular drag-and-drop interaction, i.e., by\n    dropping the icon onto the target icon’s base instead.\n    The other case occurs if the user is intending to\n    perform a regular mouse drag operation, for example\n    to rearrange icons on the desktop or to capture a set\n    of icons using a lasso operation. For these cases,\n    drag-and-pop allows users to terminate tip icons onthe-\n    fly and to complete the interaction without dragand-\n    pop/pick. To abort, users have to move the\n    mouse cursor away from the tip icon cluster while\n    still keeping the mouse depressed. This can be done\n    by overshooting the cluster or by changing mouse\n    direction. In particular, this allows users to access\n    the underlying drag-and-drop and lasso-select functionality\n    by introducing a simple zigzag gesture into\n    their cursor path. The zigzag contains at least one motion segment moving away from the tip icons,\n    thus terminating tip icons as soon as they appear.\n    The algorithm: the tip icon cluster is kept alive as\n    long as at least one of the following three rules is\n    successful. The first rule checks whether the mouse\n    cursor has moved closer to the center of at least one\n    of the icons in the tip icon cluster. This rule makes\n    sure that the cluster does not disappear while users\n    approach their targets. The second rule checks if the\n    cursor is in the direct vicinity of an icon. This rule\n    provides tolerance against users overshooting a tip\n    icon while acquiring it. The third and last rule keeps\n    the cluster alive if the cursor is stationary or if it is\n    moving backwards very slowly (up to 5 pxl/frame).\n    This rule makes drag-and-pop insensitive to jitter.\n    Figure 7 illustrates the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5 User study"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    In this section, we report the results of a user study\n    comparing drag-and-pop with the traditional dragand-\n    drop technique. To examine the effects of bezelcrossing\n    as well as distance, as described in Scenarios\n    2 and 3, we chose to run the study on a tiled\n    wall-size display. During the study, in which participants\n    filed icons into folders or dragged them\n    onto the icons of matching applications, we recorded\n    the time and accuracy of these movements. Our\n    main hypothesis was that participants would perform\n    faster when using the drag-and-pop interface, primarily\n    because it would avoid the need for crossing\n    the bezels, but also because it would bridge the\n    space to very distant icons more efficiently.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.1 Desktop layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    To obtain a representative set of icon arrangements\n    for the study, we gathered desktop screenshots from\n    25 coworkers who volunteered their participation\n    (15 single, 6 dual, and 4 triple monitor users). Overall\n    resolutions ranged from 800,000 pixels to\n    3,900,000 pixels (66% more than the display wall\n    used in the experiment).\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We clustered the obtained desktops by number\n    of icons and arrangement pattern. Then we chose\n    representatives from each of the three resulting main\n    clusters for the study (Figure 8). The “sparse” desktop\n    reflected the desktops of roughly two thirds of\n    the participants. It contained only 11 icons, most of\n    which were lined up in the top left corner of the\n    screen. The “frame” desktop reflected the desktops\n    of three of the participants. It contained 28 icons\n    arranged around the top, left, and right edge of the\n    screen. The “cluttered” desktop, finally, contained\n    35 icons that were spread primarily across the top\n    and left half of the screen. Five participants had chosen\n    this style of arranging their icons.\n    Icon layouts were stretched to fit the aspect ratio\n    of the display wall used in the experiment. An area\n    at the bottom right of the screen was reserved for the\n    starting locations of the icons to be filed during the\n    study (dashed shape in Figure 8)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.2 Participants"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Eight colleagues with no experience using drag-andpop\n    were recruited for this experiment. Due to technical\n    problems, the data from one of these participants\n    had to be dropped leaving us with 7. There\n    were 2 female and 5 male participants ranging in age\n    between 18 and 35. All were right handed with normal\n    or corrected-to-normal vision."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.3 Method"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    The test was run on the DynaWall (Streitz, 2001), a\n    display wall consisting of three Smartboard units\n    (Figure 9). Each Smartboard consisted of a backprojected\n    72”display with resistive touch input, so\n    that the entire display was 15’ (4.50m) long and 45” (1.12m) high. Display units could be operated by\n    touching the display, but for easier handling participants\n    were provided with color-free felt pens. Each\n    of the three display units ran at a resolution of\n    1024x768 pixels, offering an overall resolution of\n    3072x768 pixels. The three display units were connected\n    to a single PC equipped with two Matrox\n    Millennium graphics cards and running WindowsXP.\n    During the experiment, the DynaWall ran\n    a simulated Windows desktop. We compared dragand-\n    pop to a control condition of drag-and-drop.\n    Since our preliminary Windows-based version of\n    drag-and-pop did not support the full functionality\n    required for the study, we implemented a simulation\n    using Macromedia Flash (www.macromedia.com).\n    The drag-and-pop interface used in the experiment\n    was configured to a  30 degree target sector, 35\n    pixel target distance, and a maximum number of 5\n    tip icons.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    To each desktop layout we added 10 document\n    icons in the lower right quadrant of the screen.\n    These appeared in six different arrangements (Figure\n    8 shows 2 of them). The participants’ task was to\n    drag these icons into a given target folder or application.\n    Icons of image files, for example, were to be\n    filed in a folder labeled “My Pictures” and all Word\n    documents should be dropped onto the Word application.\n    To counterbalance for order effects, we required\n    participants to file the documents in a randomized\n    order. That is, for each movement, the item\n    to be filed was highlighted along with the target\n    icon. All other document icons were frozen, so that\n    participants could only move the highlighted icon.\n    As soon as participants began moving an item, all\n    highlighting was removed, forcing participants to\n    remember the destination item. We did this to assure\n    that participants would have to re-identify tip icons\n    when using the drag-and-pop interface, just as they\n    would in a real-world task.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants were allowed several minutes to\n    practice moving and filing icons in the prototype to\n    get them accustomed to both the DynaWall display\n    and the drag-and-pop interface. Once it was clear\n    that users understood how to use the display and the\n    interfaces, they were allowed to go on to the study.\n    Participants filed 2 sets of icons for each interface\n    (drag-and-pop and control), for each of the three\n    desktops. Thus participants filed 2 x 10 icons x 2\n    interface x 3 desktops for a total of 120 movements.\n    To mitigate learning effects associated with new\n    desktop arrangements or a new interface, we omitted\n    the first 5 trials for any desktop-interface combination\n    from our analyses, yielding ~15 correct trials\n    per cell or 90 movements per participant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4 Results\n    5.4.1 Task performance\n    Task performance was evaluated through speed and\n    accuracy measurements. Error rates were considerably\n    larger for drag-and-pop than for the control\n    (6.7% vs. 1%). We observed two things that made\n    this type of error more likely in the drag-and-pop\n    condition. First, in the drag-and-pop condition candidate\n    targets were brought closer together, making\n    it easier to accidentally drop an item on the wrong\n    target. Second, because drag-and-pop targets had\n    been translated away from their “home” location,\n    participants would sometimes forget which item was\n    in fact the target, especially if visually similar icons\n    (e.g., other folders) had created tip icons as well.\n    All data analyses for movement times were performed\n    on the median movement times for each participant\n    in each condition to normalize the typical\n    skewing associated with response time data. Summary\n    statistics report the means of these times.\n    Target icons could be located in the same display\n    unit as the icon to be filed, in a neighbor display\n    unit, or in the display unit at the other end of the\n    display wall, requiring users to cross 0, 1, or 2 bezels\n    in order to file the icon. To test the effect of\n    bezel crossing on performance, we ran a 2 (Condition)\n    x 3 (Bezels Crossed) within subjects ANOVA\n    on the median movement data. This revealed a significant\n    main effect for condition, F(1,6) = 18.2,\n    p<\\0.01 Collapsed across all distances, drag-and-pop was significantly faster than the control. There was also a\n        significant main effect of bezels crossed, F(2,12)=19.5, p<\\0.01; movement time increased as the number of\n        bezels participants had to cross to get to the target icon increased. As hypothesized, we also saw a significant\n        interaction between condition and number of bezels crossed, F(2,12)=15.2, p<\\0.01. As seen in Figure 10, an\n        increase in the number of crossed bezels resulted in only a small increase in movement time for drag-and-pop,\n        whereas it had a huge effect for the control interface. When no bezels had to be crossed, drag-and-pop appeared\n        to be slightly slower than control, although follow-up t-tests showed that this difference was not significant,\n        t(6)=1.73, ns. When 1 or 2 bezels had to be crossed, drag-and-pop was significantly faster than drag-and-drop\n        (t(6)=4.02, p<\\0.01 & t(6)=4.12, p<\\0.01, respectively). With 1 bezel crossed, dragand- pop was twice as fast as\n        the control and with 2 bezels it was 3.7 times as fast. "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 11 shows a scatter plot of movement time\n            versus target distance for both conditions. The best\n            linear fit for drag-and-drop was f(x)=0.007x-1.76,\n            r2=0.23. The linear fit for drag-and-pop was\n            f(x)=4.19, r2<\\0.0001. This reinforces what can be seen in Figure 10—movement time increases with distance\n                for the control interface, but stays relatively constant for the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4.2 Questionnaire and subjective feedback\n                    At the end of the study, participants answered a\n                    short questionnaire about their experience using the\n                    DynaWall and drag-and-pop. Participants were very\n                    enthusiastic about drag-and-pop. On a 7 point Likert\n                    scale (where 7=strongly agree and 1=strongly disagree),\n                    there was a mean > 6 for questions such as,\n                    “I liked using drag-and-pop”, “I always understood\n                    what was happening when drag-and-pop was on,”and “I would use drag-and-pop for large displays.”\n                    There was a mean of less than 3 for “It took a long\n                    time to get used to drag-and-pop” and “It was hard\n                    to control what the targets did when drag-and-pop\n                    was on.” Participants reported the drag-and-pop\n                    interface to cause less manual stress and fatigue than\n                    the control interface.\n                    The most common problem with drag-and-pop\n                    was in getting the right group of targets to pop up,\n                    and several participants requested a wider angle for\n                    destination targets. This relates to an observation we\n                    made about how people interact with touch-sensitive\n                    wall-displays. On the wall display, participants had\n                    to employ their whole arm to make a movement,\n                    resulting in targeting motions in the shape of arcs.\n                    This means that the initial direction of the movement\n                    was not in the direction of the target. To accommodate\n                    such arcs in the future, we have adapted the\n                    target selection algorithm of drag-and-pop by giving\n                    the target sector extra tolerance for movements towards\n                    the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"6 Conclusions and future work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n                    The substantial time-savings found in the user study\n                    confirm our expectations. Although when used\n                    within a single screen unit drag-and-pop does not\n                    seem to by faster than traditional drag and drop (first\n                    pair of bars in Figure 10; drag-and-pop’s capability\n                    of bridging distance to the target seems to be nullified\n                    by the need for re-orientation), its advantages\n                    on very large screens and its capability of bridging\n                    across display units are apparent. On the usability\n                    side, we were glad to see that participants had no\n                    trouble learning how to use the technique and that\n                    they described the technique as understandable and\n                    predictable. The single biggest shortcoming, the\n                    target selection, is the subjects of current work. In\n                    addition to the changes described above, we consider\n                    dropping the notion of a fixed target sector size\n                    and replace it with a mechanism that adjusts the sector\n                    size dynamically based on the number of matching\n                    targets.\n                    Given the recent advent of commercially available\n                    tablet computers, our next step will be to explore\n                    how drag-and-pop and especially drag-andpick\n                    can help tablet computer users work with external\n                    monitors. While this paper focused on icons, we\n                    plan to explore ways of operating menus, sliders,\n                    and entire applications using the techniques described\n                    in this article."}]}],"_id":"qnFZ2ZcT8VYENkSP"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n    "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing\n    remote screen content on touch- and pen-operated systems\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated\n        display systems. They provide users with access to screen content that would otherwise be impossible\n        or hard to reach, e.g., because it is located behind a bezel or far away from the user. Drag-and-pop is an extension\n        of traditional drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop\n        responds by temporarily moving potential target icons towards the user’s current cursor location, thereby allowing\n        the user to interact with these icons using comparably small hand movements. Drag-and-Pick extends the\n        drag-and-pop interaction style such that it allows activating icons, e.g., to open folders or launch applications.\n        In\n        this paper, we report the results of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’\n        (4.50m) wide interactive display wall. Participants where able to file icons up to 3.7 times faster when using the\n        drag-and-pop interface.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen,\n        heterogeneous display.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    With the emergence of pen- and touch-operated personal\n    digital assistants (PDAs), tablet computers,\n    and wall-size displays (e.g., Liveboard, Elrod et al.,\n    1992; Smartboard, http://www.smarttech.com),\n    touch and pen input have gained popularity. Over\n    the past years, more complex display systems have\n    been created by combining multiple such display\n    units. Wall-size touch displays have been combined\n    into display walls, such as the DynaWall (Streitz\n    2001), or the iRoom Smartboard wall (Johanson,\n    2002b). Recent PDAs and tablet computers allow\n    connecting additional displays, such as another tablet\n    or a monitor in order to extend the device’s internal\n    display space.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple\n    display units bring up a new class of input challenges\n    that cannot always be solved with existing\n    techniques, because many of the existing techniques\n    were designed for indirect input devices, such as\n    mice, track pads, or joysticks. Indirect input devices\n    can be used on arbitrary display configurations, because\n    they can simply be mapped to the respective\n    topology (e.g., PointRight, Johanson 2002a). Touch/\n    pen input, however, is based on the immediate correspondence between input space and display\n    space and thus requires users to adapt their input\n    behavior to the physicality of the display system.\n    Here are three examples where this can become\n    problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 1: External monitors. One or more display\n    units within a display system may not be\n    equipped with a touch or pen sensor. Connecting an\n    external monitor to a tablet computer or PDA, for\n    example, allows users to see more material, but requires\n    them to use an indirect input device, such as a\n    mouse, when interacting with content on the external\n    monitor. Since some tablet-specific tasks, such as\n    scribbling, are hard to accomplish with a mouse,\n    users find themselves continuously switching between\n    pen and mouse."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 2: Interactions across display units.\n    Some interaction techniques, such as drag-and-drop,\n    require users to interact with two or more icons in a\n    single pen-down interaction. If these icons are distributed\n    across physically separate pen/touch input\n    display units, users first have to bring all involved\n    icons to the same display unit, a potentially timeconsuming\n    activity (Figure 2a-c)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 3: Bridging long distances. Accessing\n    icons located far away from the user, e.g., on the\n    opposite side of a 15’ DynaWall, requires users to\n    physically walk over, the time for which may in\n    some circumstances increase linearly with distance\n    (Guiard et at, 2001). In addition, drag interactions\n    get more error-prone with distance, because users\n    drop objects accidentally when failing to continuously\n    keep the pen tip in contact with the display\n    surface (Rekimoto 1997)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"2 Drag-and-pop & drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-pop and drag-and-pick are interaction\n    techniques that address these issues. We will begin\n    by giving an overview; more detailed descriptions of\n    both techniques can be found in Section 4"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"extends traditional drag-and-drop\n    as illustrated by Figure 1. (a) The user intends to\n    delete a Word memo by dragging it into the recycle\n    bin. (b) As the user starts dragging the memo’s icon\n    towards the recycle bin, icons that are of compatible\n    type and located in the direction of the user’s drag\n    motion “pop up”. This means that for each of these\n    icons a link icon is created (tip icon) that appears in\n    front of the user’s cursor. Tip icons are connected to\n    the original icon (base icon) using a rubber band.\n    (c) The user drags the memo over the recycle bin\n    and releases the mouse button. The recycle bin accepts\n    the memo. Alternatively, the user could have\n    dropped the memo over the word processor or the\n    web browser icon, which would have launched the\n    respective application with the memo. (d) When the\n    user drops the icon, all tip icons disappear instantly.\n    Figure 2d shows how drag-and-pop simplifies\n    dropping icons onto targets located at the other side"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction\n    concept such that it allows activating icons,\n    e.g., to open a folder or to launch a program. While\n    drag-and-pop is initiated by the user dragging an\n    icon, drag-and-pick starts with the user performing a\n    drag interaction on empty screen space. The system’s\n    response to this drag interaction is similar to\n    drag-and-pop, but with two differences. First, all\n    icons located in the direction of the drag motion will\n    pop up, not only those of compatible type (Figure 3).\n    Second, as the user drags the mouse cursor over one\n    of the targets and releases the mouse button, the\n    folder, file, or application associated with the icon is\n    activated as if it had been double clicked.\n    Figure 4 shows how this allows users to use the\n    pen for launching an application, the icon of which\n    is located on a monitor not supporting pen input.\n    In principle, drag-and-pick can be applied to any\n    type of widget, e.g., any buttons and menus located\n    on a non-pen accessible monitor. In this paper, however,\n    we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"3 Related work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-drop is a well-know interaction technique\n    for transferring or copying information using a\n    pointing device, while avoiding the use of a hidden\n    clipboard (Wagner, 1995; Beaudouin-Lafon, 2000).\n    Hyperdragging (Rekimoto, 1999), allows extending\n    drag-and-drop across physically separate displays\n    (Scenario 2), but requires an indirect input device,\n    such as a mouse. Most techniques compatible with\n    pen usage are based on point-and-click, e.g., pickand-\n    drop (Rekimoto, 1997) and take-and-put (Streitz\n    et al., 2001). These techniques, however, cannot be\n    used to access material on a display unit not providing\n    pen support (Scenario 1)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A different set of interaction techniques have\n    been proposed to help users overcome large distances\n    (Scenario 3). Manual And Gaze Input Cascaded\n    (MAGIC) pointing (Zhai et al., 1999) uses eye\n    tracking to move the cursor to the target area, from\n    where the user guides the cursor manually (which\n    requires an indirect input device). Gesture input\n    techniques allow selecting a target and a command\n    in a single interaction and are generally compatible\n    with pen input (Rubine, 1991). ‘Throwing’ allows users to accelerate an object with a small gesture; the\n    object then continues its trajectory based on its inertia\n    (Gei ler, 1998). The imprecision of human motor\n    skills has prevented throwing from being used\n    for reliable target acquisition. Myers et al. (2002)\n    used laser pointers to acquire targets on a Smartboard,\n    but found them to be slower than touch input.\n    A variety of mouse-based interaction techniques\n    use destination prediction to simplify navigation\n    (e.g., Jul, 2002). Dulberg et al. (1999) proposed a\n    flying click or flick for snapping the mouse to target\n    locations. Swaminathan and Sato (1997) proposed\n    making relevant controls on the screen “sticky”.\n    As an alternative way of launching applications,\n    today’s operating systems offer menus containing\n    lists of available application or documents. A ‘send\n    to’ option (Microsoft Windows) allows sending an\n    icon to a target selected from a predefined list.\n    Compared to 2D desktops, which typically use a\n    larger amount of screen space than pull-down or\n    pop-up menus, menus are limited to a smaller selection\n    of choices unless they use a hierarchical menu\n    organization, which makes their usage less transparent\n    and often less efficient. Furthermore, invoking a\n    content-menu may require hitting a qualifier key,\n    which can be problematic on touch-based systems."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4 Design and algorithms"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    In this section, we will take a more detailed look at\n    the design and algorithms behind drag-and-pop/pick.\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.1 Selecting candidates"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    In order to reduce clutter, drag-and-pop creates tip\n    icons only for a subset of the icons on the screen.\n    Drag-and-pop’s candidate selection algorithm is\n    initialized with the entire set of icons on the screen;\n    it then successively eliminates candidates using the\n    following four rules.\n    First, icons of incompatible type are eliminated.\n    If the user drags a text file, the icon of a text processor\n    can create a tip icon; the recycle bin icon can\n    create a tip icon; the icon of another text file, however,\n    cannot, because dragging two text files onto\n    each other is usually not associated with any behavior.\n    Drag-and-pick bypasses this selection step in\n    order to allow users to activate any type of icon.\n    Second, icons located between the cursor and the\n    location where the tip icons cluster will appear (see\n    following section) are eliminated. This rule avoids\n    creating tip icons that move away from the cursor.\n    Third, only icons that are located within a certain\n    angle from the initial drag direction (the target sector)\n    are considered. The initial drag direction is determined\n    the moment the user drags an icon further than a given threshold (default 15 pixels). During\n    preliminary testing on a Smartboard, we got good\n    results with first-time users when using sector sizes\n    of  30 to  45 degrees. The sector size could be reduced\n    to sector sizes of  20 degrees as users gained\n    more experience.\n    Forth, if the number of qualifying icons is above\n    some hard limit, drag-and-pop eliminates tip icon\n    candidates until the hard limit is met. Icons are removed\n    in an order starting at the outside of the target\n    sector moving inwards. This rule assures the scalability\n    of drag-and-pop to densely populated displays,\n    but requires drag-and-pop users working with\n    densely populated screens to aim more precisely.\n    We typically use hard limits between 5 and 10.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.2 Computing the tip icon layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Once tip icon candidates have been selected, dragand-\n    pop determines where on the screen to place the\n    tip icons. In order to avoid interference between tip\n    icons, the location of all tip icons is computed in a\n    centralized fashion.\n    Our drag-and-pop prototype uses the following\n    algorithm that is illustrated by Figure 5: (1) Snap\n    icons to a grid and store them in a two-dimensional\n    array, with each array element representing one cell\n    of the grid. If two or more icons fall into the same\n    cell, refine the grid. (2) Shrink the icon layout by\n    eliminating all array columns and rows that contain\n    no icons. (3) Translate icon positions back to 2D\n    space by mapping the array onto a regular grid. By\n    default, the output grid is chosen to be slightly\n    tighter than the input grid, which gives extra compression.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We chose this algorithm, because it preserves\n    alignment, proximity, and spatial arrangement between\n    icons, which allows users to use their spatial\n    memory when identifying the desired target within\n    the tip icon cluster. This is especially useful when\n    tip icons look alike (e.g., a folder in a cluster of\n    folders). In order to help users distinguish local icon clusters from surrounding icons more easily, the\n    algorithm may be adjusted to shrink empty rows and\n    columns during layout computation instead of removing\n    them entirely."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed,\n    drag-and-pop positions it on the screen such that the\n    center of the layout’s bounding box is located at the\n    direct extension of the user’s current mouse motion.\n    The distance of the tip icon cluster to the user’s current\n    cursor position is configurable. For inexperienced\n    users, we got best results with distances of\n    around 100 pixels; shorter distances made these users\n    likely to overshoot the cluster. For more experienced\n    users, we were able to reduce the distance to\n    values around 30 pixels, which allowed these users\n    to operate drag-and-pop with less effort, in a more\n    “menu-like” fashion. In order to reduce visual interference\n    between tip icons and icons on the desktop,\n    drag-and-pop diminishes desktop icons while tip\n    icons are visible."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.3 The rubber band"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    When the tip icon cluster is displayed, users need to\n    re-identify their targets within the tip icon cluster in\n    order to be able to successfully acquire them.\n    Our first implementation of drag-and-pop created\n    tip icons on top of their bases and used slow-inslow-\n    out animation (Shneiderman 1998) to move tip\n    icons to their final location. While this approach\n    allowed users to locate the final position of the desired\n    tip icon by visually tracking it on its way from\n    basis to final position, it also required users to either\n    wait for the animation to complete or to acquire a\n    moving target. We therefore chose to abandon the\n    animation and immediately display tip icons at their\n    final destinations.\n    In lieu of the animation, we provided tip icons\n    with rubber bands. The design prototype of the rubber\n    band is shown in Figure 6. For performance reasons,\n    our prototype, which is shown in all other\n    screenshots, uses rubber bands of a lower level of\n    graphical detail, i.e., a tape and three lines in the\n    color scheme of the corresponding icon.\n    The purpose of the rubber band is to offer the\n    functionality of the animation, but without the problems\n    alluded to above. The rubber band, decorated\n    with the respective icon’s texture, can be thought of\n    as having been created by taking a photograph of the\n    tip icon animation with a very long shutter speed\n    (so-called motion blur, e.g., Dachille and Kaufman,\n    2000). Like the animation, the rubber band allows\n    users to trace the path from base to tip icon. However,\n    users can do this at their own pace and the customized\n    texturing of the rubber band allows users to\n    start tracing it anywhere, not only at the base."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The rubber band is provided with a narrow midriff\n    section, suggesting that the rubber band is elastic.\n    This design was chosen to help users understand\n    that tip icons have retracted to their bases when they\n    disappear at the end of the interaction. This feature\n    may also help users find their way to the tip icon\n    faster, because it provides users with a visual cue\n    about how far away the tip icon is located. A thick\n    rubber band section implies that the tip icon (or\n    base) is close; a thin rubber band section indicates\n    that the target is further away."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.4 Aborting drag-and-pop interactions"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    As soon as tip icons and rubber bands are shown on\n    the screen, drag-and-pop waits for the user to acquire\n    one of the tip icons to complete the ongoing\n    drag-and-pop or drag-and-pick interaction. There are\n    two cases, however, in which users will want to\n    abort the interaction without acquiring a tip icon.\n    The first case is when the user dragged the\n    mouse at a wrong angle so that the desired target\n    icon did not pop up. In this case, the user may either\n    drop the icon and try again or complete the interaction\n    as a regular drag-and-drop interaction, i.e., by\n    dropping the icon onto the target icon’s base instead.\n    The other case occurs if the user is intending to\n    perform a regular mouse drag operation, for example\n    to rearrange icons on the desktop or to capture a set\n    of icons using a lasso operation. For these cases,\n    drag-and-pop allows users to terminate tip icons onthe-\n    fly and to complete the interaction without dragand-\n    pop/pick. To abort, users have to move the\n    mouse cursor away from the tip icon cluster while\n    still keeping the mouse depressed. This can be done\n    by overshooting the cluster or by changing mouse\n    direction. In particular, this allows users to access\n    the underlying drag-and-drop and lasso-select functionality\n    by introducing a simple zigzag gesture into\n    their cursor path. The zigzag contains at least one motion segment moving away from the tip icons,\n    thus terminating tip icons as soon as they appear.\n    The algorithm: the tip icon cluster is kept alive as\n    long as at least one of the following three rules is\n    successful. The first rule checks whether the mouse\n    cursor has moved closer to the center of at least one\n    of the icons in the tip icon cluster. This rule makes\n    sure that the cluster does not disappear while users\n    approach their targets. The second rule checks if the\n    cursor is in the direct vicinity of an icon. This rule\n    provides tolerance against users overshooting a tip\n    icon while acquiring it. The third and last rule keeps\n    the cluster alive if the cursor is stationary or if it is\n    moving backwards very slowly (up to 5 pxl/frame).\n    This rule makes drag-and-pop insensitive to jitter.\n    Figure 7 illustrates the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5 User study"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    In this section, we report the results of a user study\n    comparing drag-and-pop with the traditional dragand-\n    drop technique. To examine the effects of bezelcrossing\n    as well as distance, as described in Scenarios\n    2 and 3, we chose to run the study on a tiled\n    wall-size display. During the study, in which participants\n    filed icons into folders or dragged them\n    onto the icons of matching applications, we recorded\n    the time and accuracy of these movements. Our\n    main hypothesis was that participants would perform\n    faster when using the drag-and-pop interface, primarily\n    because it would avoid the need for crossing\n    the bezels, but also because it would bridge the\n    space to very distant icons more efficiently.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.1 Desktop layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    To obtain a representative set of icon arrangements\n    for the study, we gathered desktop screenshots from\n    25 coworkers who volunteered their participation\n    (15 single, 6 dual, and 4 triple monitor users). Overall\n    resolutions ranged from 800,000 pixels to\n    3,900,000 pixels (66% more than the display wall\n    used in the experiment).\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We clustered the obtained desktops by number\n    of icons and arrangement pattern. Then we chose\n    representatives from each of the three resulting main\n    clusters for the study (Figure 8). The “sparse” desktop\n    reflected the desktops of roughly two thirds of\n    the participants. It contained only 11 icons, most of\n    which were lined up in the top left corner of the\n    screen. The “frame” desktop reflected the desktops\n    of three of the participants. It contained 28 icons\n    arranged around the top, left, and right edge of the\n    screen. The “cluttered” desktop, finally, contained\n    35 icons that were spread primarily across the top\n    and left half of the screen. Five participants had chosen\n    this style of arranging their icons.\n    Icon layouts were stretched to fit the aspect ratio\n    of the display wall used in the experiment. An area\n    at the bottom right of the screen was reserved for the\n    starting locations of the icons to be filed during the\n    study (dashed shape in Figure 8)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.2 Participants"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Eight colleagues with no experience using drag-andpop\n    were recruited for this experiment. Due to technical\n    problems, the data from one of these participants\n    had to be dropped leaving us with 7. There\n    were 2 female and 5 male participants ranging in age\n    between 18 and 35. All were right handed with normal\n    or corrected-to-normal vision."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.3 Method"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    The test was run on the DynaWall (Streitz, 2001), a\n    display wall consisting of three Smartboard units\n    (Figure 9). Each Smartboard consisted of a backprojected\n    72”display with resistive touch input, so\n    that the entire display was 15’ (4.50m) long and 45” (1.12m) high. Display units could be operated by\n    touching the display, but for easier handling participants\n    were provided with color-free felt pens. Each\n    of the three display units ran at a resolution of\n    1024x768 pixels, offering an overall resolution of\n    3072x768 pixels. The three display units were connected\n    to a single PC equipped with two Matrox\n    Millennium graphics cards and running WindowsXP.\n    During the experiment, the DynaWall ran\n    a simulated Windows desktop. We compared dragand-\n    pop to a control condition of drag-and-drop.\n    Since our preliminary Windows-based version of\n    drag-and-pop did not support the full functionality\n    required for the study, we implemented a simulation\n    using Macromedia Flash (www.macromedia.com).\n    The drag-and-pop interface used in the experiment\n    was configured to a  30 degree target sector, 35\n    pixel target distance, and a maximum number of 5\n    tip icons.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    To each desktop layout we added 10 document\n    icons in the lower right quadrant of the screen.\n    These appeared in six different arrangements (Figure\n    8 shows 2 of them). The participants’ task was to\n    drag these icons into a given target folder or application.\n    Icons of image files, for example, were to be\n    filed in a folder labeled “My Pictures” and all Word\n    documents should be dropped onto the Word application.\n    To counterbalance for order effects, we required\n    participants to file the documents in a randomized\n    order. That is, for each movement, the item\n    to be filed was highlighted along with the target\n    icon. All other document icons were frozen, so that\n    participants could only move the highlighted icon.\n    As soon as participants began moving an item, all\n    highlighting was removed, forcing participants to\n    remember the destination item. We did this to assure\n    that participants would have to re-identify tip icons\n    when using the drag-and-pop interface, just as they\n    would in a real-world task.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants were allowed several minutes to\n    practice moving and filing icons in the prototype to\n    get them accustomed to both the DynaWall display\n    and the drag-and-pop interface. Once it was clear\n    that users understood how to use the display and the\n    interfaces, they were allowed to go on to the study.\n    Participants filed 2 sets of icons for each interface\n    (drag-and-pop and control), for each of the three\n    desktops. Thus participants filed 2 x 10 icons x 2\n    interface x 3 desktops for a total of 120 movements.\n    To mitigate learning effects associated with new\n    desktop arrangements or a new interface, we omitted\n    the first 5 trials for any desktop-interface combination\n    from our analyses, yielding ~15 correct trials\n    per cell or 90 movements per participant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4 Results\n    5.4.1 Task performance\n    Task performance was evaluated through speed and\n    accuracy measurements. Error rates were considerably\n    larger for drag-and-pop than for the control\n    (6.7% vs. 1%). We observed two things that made\n    this type of error more likely in the drag-and-pop\n    condition. First, in the drag-and-pop condition candidate\n    targets were brought closer together, making\n    it easier to accidentally drop an item on the wrong\n    target. Second, because drag-and-pop targets had\n    been translated away from their “home” location,\n    participants would sometimes forget which item was\n    in fact the target, especially if visually similar icons\n    (e.g., other folders) had created tip icons as well.\n    All data analyses for movement times were performed\n    on the median movement times for each participant\n    in each condition to normalize the typical\n    skewing associated with response time data. Summary\n    statistics report the means of these times.\n    Target icons could be located in the same display\n    unit as the icon to be filed, in a neighbor display\n    unit, or in the display unit at the other end of the\n    display wall, requiring users to cross 0, 1, or 2 bezels\n    in order to file the icon. To test the effect of\n    bezel crossing on performance, we ran a 2 (Condition)\n    x 3 (Bezels Crossed) within subjects ANOVA\n    on the median movement data. This revealed a significant\n    main effect for condition, F(1,6) = 18.2,\n    p<\\0.01 Collapsed across all distances, drag-and-pop was significantly faster than the control. There was also a\n        significant main effect of bezels crossed, F(2,12)=19.5, p<\\0.01; movement time increased as the number of\n        bezels participants had to cross to get to the target icon increased. As hypothesized, we also saw a significant\n        interaction between condition and number of bezels crossed, F(2,12)=15.2, p<\\0.01. As seen in Figure 10, an\n        increase in the number of crossed bezels resulted in only a small increase in movement time for drag-and-pop,\n        whereas it had a huge effect for the control interface. When no bezels had to be crossed, drag-and-pop appeared\n        to be slightly slower than control, although follow-up t-tests showed that this difference was not significant,\n        t(6)=1.73, ns. When 1 or 2 bezels had to be crossed, drag-and-pop was significantly faster than drag-and-drop\n        (t(6)=4.02, p<\\0.01 & t(6)=4.12, p<\\0.01, respectively). With 1 bezel crossed, dragand- pop was twice as fast as\n        the control and with 2 bezels it was 3.7 times as fast. "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 11 shows a scatter plot of movement time\n            versus target distance for both conditions. The best\n            linear fit for drag-and-drop was f(x)=0.007x-1.76,\n            r2=0.23. The linear fit for drag-and-pop was\n            f(x)=4.19, r2<\\0.0001. This reinforces what can be seen in Figure 10—movement time increases with distance\n                for the control interface, but stays relatively constant for the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4.2 Questionnaire and subjective feedback\n                    At the end of the study, participants answered a\n                    short questionnaire about their experience using the\n                    DynaWall and drag-and-pop. Participants were very\n                    enthusiastic about drag-and-pop. On a 7 point Likert\n                    scale (where 7=strongly agree and 1=strongly disagree),\n                    there was a mean > 6 for questions such as,\n                    “I liked using drag-and-pop”, “I always understood\n                    what was happening when drag-and-pop was on,”and “I would use drag-and-pop for large displays.”\n                    There was a mean of less than 3 for “It took a long\n                    time to get used to drag-and-pop” and “It was hard\n                    to control what the targets did when drag-and-pop\n                    was on.” Participants reported the drag-and-pop\n                    interface to cause less manual stress and fatigue than\n                    the control interface.\n                    The most common problem with drag-and-pop\n                    was in getting the right group of targets to pop up,\n                    and several participants requested a wider angle for\n                    destination targets. This relates to an observation we\n                    made about how people interact with touch-sensitive\n                    wall-displays. On the wall display, participants had\n                    to employ their whole arm to make a movement,\n                    resulting in targeting motions in the shape of arcs.\n                    This means that the initial direction of the movement\n                    was not in the direction of the target. To accommodate\n                    such arcs in the future, we have adapted the\n                    target selection algorithm of drag-and-pop by giving\n                    the target sector extra tolerance for movements towards\n                    the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"6 Conclusions and future work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n                    The substantial time-savings found in the user study\n                    confirm our expectations. Although when used\n                    within a single screen unit drag-and-pop does not\n                    seem to by faster than traditional drag and drop (first\n                    pair of bars in Figure 10; drag-and-pop’s capability\n                    of bridging distance to the target seems to be nullified\n                    by the need for re-orientation), its advantages\n                    on very large screens and its capability of bridging\n                    across display units are apparent. On the usability\n                    side, we were glad to see that participants had no\n                    trouble learning how to use the technique and that\n                    they described the technique as understandable and\n                    predictable. The single biggest shortcoming, the\n                    target selection, is the subjects of current work. In\n                    addition to the changes described above, we consider\n                    dropping the notion of a fixed target sector size\n                    and replace it with a mechanism that adjusts the sector\n                    size dynamically based on the number of matching\n                    targets.\n                    Given the recent advent of commercially available\n                    tablet computers, our next step will be to explore\n                    how drag-and-pop and especially drag-andpick\n                    can help tablet computer users work with external\n                    monitors. While this paper focused on icons, we\n                    plan to explore ways of operating menus, sliders,\n                    and entire applications using the techniques described\n                    in this article."}]}],"_id":"77oz6k7Q2IgsPL1m"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n    "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing\n    remote screen content on touch- and pen-operated systems\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated\n        display systems. They provide users with access to screen content that would otherwise be impossible\n        or hard to reach, e.g., because it is located behind a bezel or far away from the user. Drag-and-pop is an extension\n        of traditional drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop\n        responds by temporarily moving potential target icons towards the user’s current cursor location, thereby allowing\n        the user to interact with these icons using comparably small hand movements. Drag-and-Pick extends the\n        drag-and-pop interaction style such that it allows activating icons, e.g., to open folders or launch applications.\n        In\n        this paper, we report the results of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’\n        (4.50m) wide interactive display wall. Participants where able to file icons up to 3.7 times faster when using the\n        drag-and-pop interface.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen,\n        heterogeneous display.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    With the emergence of pen- and touch-operated personal\n    digital assistants (PDAs), tablet computers,\n    and wall-size displays (e.g., Liveboard, Elrod et al.,\n    1992; Smartboard, http://www.smarttech.com),\n    touch and pen input have gained popularity. Over\n    the past years, more complex display systems have\n    been created by combining multiple such display\n    units. Wall-size touch displays have been combined\n    into display walls, such as the DynaWall (Streitz\n    2001), or the iRoom Smartboard wall (Johanson,\n    2002b). Recent PDAs and tablet computers allow\n    connecting additional displays, such as another tablet\n    or a monitor in order to extend the device’s internal\n    display space.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple\n    display units bring up a new class of input challenges\n    that cannot always be solved with existing\n    techniques, because many of the existing techniques\n    were designed for indirect input devices, such as\n    mice, track pads, or joysticks. Indirect input devices\n    can be used on arbitrary display configurations, because\n    they can simply be mapped to the respective\n    topology (e.g., PointRight, Johanson 2002a). Touch/\n    pen input, however, is based on the immediate correspondence between input space and display\n    space and thus requires users to adapt their input\n    behavior to the physicality of the display system.\n    Here are three examples where this can become\n    problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 1: External monitors. One or more display\n    units within a display system may not be\n    equipped with a touch or pen sensor. Connecting an\n    external monitor to a tablet computer or PDA, for\n    example, allows users to see more material, but requires\n    them to use an indirect input device, such as a\n    mouse, when interacting with content on the external\n    monitor. Since some tablet-specific tasks, such as\n    scribbling, are hard to accomplish with a mouse,\n    users find themselves continuously switching between\n    pen and mouse."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 2: Interactions across display units.\n    Some interaction techniques, such as drag-and-drop,\n    require users to interact with two or more icons in a\n    single pen-down interaction. If these icons are distributed\n    across physically separate pen/touch input\n    display units, users first have to bring all involved\n    icons to the same display unit, a potentially timeconsuming\n    activity (Figure 2a-c)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 3: Bridging long distances. Accessing\n    icons located far away from the user, e.g., on the\n    opposite side of a 15’ DynaWall, requires users to\n    physically walk over, the time for which may in\n    some circumstances increase linearly with distance\n    (Guiard et at, 2001). In addition, drag interactions\n    get more error-prone with distance, because users\n    drop objects accidentally when failing to continuously\n    keep the pen tip in contact with the display\n    surface (Rekimoto 1997)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"2 Drag-and-pop & drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-pop and drag-and-pick are interaction\n    techniques that address these issues. We will begin\n    by giving an overview; more detailed descriptions of\n    both techniques can be found in Section 4"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"extends traditional drag-and-drop\n    as illustrated by Figure 1. (a) The user intends to\n    delete a Word memo by dragging it into the recycle\n    bin. (b) As the user starts dragging the memo’s icon\n    towards the recycle bin, icons that are of compatible\n    type and located in the direction of the user’s drag\n    motion “pop up”. This means that for each of these\n    icons a link icon is created (tip icon) that appears in\n    front of the user’s cursor. Tip icons are connected to\n    the original icon (base icon) using a rubber band.\n    (c) The user drags the memo over the recycle bin\n    and releases the mouse button. The recycle bin accepts\n    the memo. Alternatively, the user could have\n    dropped the memo over the word processor or the\n    web browser icon, which would have launched the\n    respective application with the memo. (d) When the\n    user drops the icon, all tip icons disappear instantly.\n    Figure 2d shows how drag-and-pop simplifies\n    dropping icons onto targets located at the other side"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction\n    concept such that it allows activating icons,\n    e.g., to open a folder or to launch a program. While\n    drag-and-pop is initiated by the user dragging an\n    icon, drag-and-pick starts with the user performing a\n    drag interaction on empty screen space. The system’s\n    response to this drag interaction is similar to\n    drag-and-pop, but with two differences. First, all\n    icons located in the direction of the drag motion will\n    pop up, not only those of compatible type (Figure 3).\n    Second, as the user drags the mouse cursor over one\n    of the targets and releases the mouse button, the\n    folder, file, or application associated with the icon is\n    activated as if it had been double clicked.\n    Figure 4 shows how this allows users to use the\n    pen for launching an application, the icon of which\n    is located on a monitor not supporting pen input.\n    In principle, drag-and-pick can be applied to any\n    type of widget, e.g., any buttons and menus located\n    on a non-pen accessible monitor. In this paper, however,\n    we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"3 Related work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-drop is a well-know interaction technique\n    for transferring or copying information using a\n    pointing device, while avoiding the use of a hidden\n    clipboard (Wagner, 1995; Beaudouin-Lafon, 2000).\n    Hyperdragging (Rekimoto, 1999), allows extending\n    drag-and-drop across physically separate displays\n    (Scenario 2), but requires an indirect input device,\n    such as a mouse. Most techniques compatible with\n    pen usage are based on point-and-click, e.g., pickand-\n    drop (Rekimoto, 1997) and take-and-put (Streitz\n    et al., 2001). These techniques, however, cannot be\n    used to access material on a display unit not providing\n    pen support (Scenario 1)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A different set of interaction techniques have\n    been proposed to help users overcome large distances\n    (Scenario 3). Manual And Gaze Input Cascaded\n    (MAGIC) pointing (Zhai et al., 1999) uses eye\n    tracking to move the cursor to the target area, from\n    where the user guides the cursor manually (which\n    requires an indirect input device). Gesture input\n    techniques allow selecting a target and a command\n    in a single interaction and are generally compatible\n    with pen input (Rubine, 1991). ‘Throwing’ allows users to accelerate an object with a small gesture; the\n    object then continues its trajectory based on its inertia\n    (Gei ler, 1998). The imprecision of human motor\n    skills has prevented throwing from being used\n    for reliable target acquisition. Myers et al. (2002)\n    used laser pointers to acquire targets on a Smartboard,\n    but found them to be slower than touch input.\n    A variety of mouse-based interaction techniques\n    use destination prediction to simplify navigation\n    (e.g., Jul, 2002). Dulberg et al. (1999) proposed a\n    flying click or flick for snapping the mouse to target\n    locations. Swaminathan and Sato (1997) proposed\n    making relevant controls on the screen “sticky”.\n    As an alternative way of launching applications,\n    today’s operating systems offer menus containing\n    lists of available application or documents. A ‘send\n    to’ option (Microsoft Windows) allows sending an\n    icon to a target selected from a predefined list.\n    Compared to 2D desktops, which typically use a\n    larger amount of screen space than pull-down or\n    pop-up menus, menus are limited to a smaller selection\n    of choices unless they use a hierarchical menu\n    organization, which makes their usage less transparent\n    and often less efficient. Furthermore, invoking a\n    content-menu may require hitting a qualifier key,\n    which can be problematic on touch-based systems."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4 Design and algorithms"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    In this section, we will take a more detailed look at\n    the design and algorithms behind drag-and-pop/pick.\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.1 Selecting candidates"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    In order to reduce clutter, drag-and-pop creates tip\n    icons only for a subset of the icons on the screen.\n    Drag-and-pop’s candidate selection algorithm is\n    initialized with the entire set of icons on the screen;\n    it then successively eliminates candidates using the\n    following four rules.\n    First, icons of incompatible type are eliminated.\n    If the user drags a text file, the icon of a text processor\n    can create a tip icon; the recycle bin icon can\n    create a tip icon; the icon of another text file, however,\n    cannot, because dragging two text files onto\n    each other is usually not associated with any behavior.\n    Drag-and-pick bypasses this selection step in\n    order to allow users to activate any type of icon.\n    Second, icons located between the cursor and the\n    location where the tip icons cluster will appear (see\n    following section) are eliminated. This rule avoids\n    creating tip icons that move away from the cursor.\n    Third, only icons that are located within a certain\n    angle from the initial drag direction (the target sector)\n    are considered. The initial drag direction is determined\n    the moment the user drags an icon further than a given threshold (default 15 pixels). During\n    preliminary testing on a Smartboard, we got good\n    results with first-time users when using sector sizes\n    of  30 to  45 degrees. The sector size could be reduced\n    to sector sizes of  20 degrees as users gained\n    more experience.\n    Forth, if the number of qualifying icons is above\n    some hard limit, drag-and-pop eliminates tip icon\n    candidates until the hard limit is met. Icons are removed\n    in an order starting at the outside of the target\n    sector moving inwards. This rule assures the scalability\n    of drag-and-pop to densely populated displays,\n    but requires drag-and-pop users working with\n    densely populated screens to aim more precisely.\n    We typically use hard limits between 5 and 10.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.2 Computing the tip icon layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Once tip icon candidates have been selected, dragand-\n    pop determines where on the screen to place the\n    tip icons. In order to avoid interference between tip\n    icons, the location of all tip icons is computed in a\n    centralized fashion.\n    Our drag-and-pop prototype uses the following\n    algorithm that is illustrated by Figure 5: (1) Snap\n    icons to a grid and store them in a two-dimensional\n    array, with each array element representing one cell\n    of the grid. If two or more icons fall into the same\n    cell, refine the grid. (2) Shrink the icon layout by\n    eliminating all array columns and rows that contain\n    no icons. (3) Translate icon positions back to 2D\n    space by mapping the array onto a regular grid. By\n    default, the output grid is chosen to be slightly\n    tighter than the input grid, which gives extra compression.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We chose this algorithm, because it preserves\n    alignment, proximity, and spatial arrangement between\n    icons, which allows users to use their spatial\n    memory when identifying the desired target within\n    the tip icon cluster. This is especially useful when\n    tip icons look alike (e.g., a folder in a cluster of\n    folders). In order to help users distinguish local icon clusters from surrounding icons more easily, the\n    algorithm may be adjusted to shrink empty rows and\n    columns during layout computation instead of removing\n    them entirely."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed,\n    drag-and-pop positions it on the screen such that the\n    center of the layout’s bounding box is located at the\n    direct extension of the user’s current mouse motion.\n    The distance of the tip icon cluster to the user’s current\n    cursor position is configurable. For inexperienced\n    users, we got best results with distances of\n    around 100 pixels; shorter distances made these users\n    likely to overshoot the cluster. For more experienced\n    users, we were able to reduce the distance to\n    values around 30 pixels, which allowed these users\n    to operate drag-and-pop with less effort, in a more\n    “menu-like” fashion. In order to reduce visual interference\n    between tip icons and icons on the desktop,\n    drag-and-pop diminishes desktop icons while tip\n    icons are visible."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.3 The rubber band"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    When the tip icon cluster is displayed, users need to\n    re-identify their targets within the tip icon cluster in\n    order to be able to successfully acquire them.\n    Our first implementation of drag-and-pop created\n    tip icons on top of their bases and used slow-inslow-\n    out animation (Shneiderman 1998) to move tip\n    icons to their final location. While this approach\n    allowed users to locate the final position of the desired\n    tip icon by visually tracking it on its way from\n    basis to final position, it also required users to either\n    wait for the animation to complete or to acquire a\n    moving target. We therefore chose to abandon the\n    animation and immediately display tip icons at their\n    final destinations.\n    In lieu of the animation, we provided tip icons\n    with rubber bands. The design prototype of the rubber\n    band is shown in Figure 6. For performance reasons,\n    our prototype, which is shown in all other\n    screenshots, uses rubber bands of a lower level of\n    graphical detail, i.e., a tape and three lines in the\n    color scheme of the corresponding icon.\n    The purpose of the rubber band is to offer the\n    functionality of the animation, but without the problems\n    alluded to above. The rubber band, decorated\n    with the respective icon’s texture, can be thought of\n    as having been created by taking a photograph of the\n    tip icon animation with a very long shutter speed\n    (so-called motion blur, e.g., Dachille and Kaufman,\n    2000). Like the animation, the rubber band allows\n    users to trace the path from base to tip icon. However,\n    users can do this at their own pace and the customized\n    texturing of the rubber band allows users to\n    start tracing it anywhere, not only at the base."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The rubber band is provided with a narrow midriff\n    section, suggesting that the rubber band is elastic.\n    This design was chosen to help users understand\n    that tip icons have retracted to their bases when they\n    disappear at the end of the interaction. This feature\n    may also help users find their way to the tip icon\n    faster, because it provides users with a visual cue\n    about how far away the tip icon is located. A thick\n    rubber band section implies that the tip icon (or\n    base) is close; a thin rubber band section indicates\n    that the target is further away."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.4 Aborting drag-and-pop interactions"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    As soon as tip icons and rubber bands are shown on\n    the screen, drag-and-pop waits for the user to acquire\n    one of the tip icons to complete the ongoing\n    drag-and-pop or drag-and-pick interaction. There are\n    two cases, however, in which users will want to\n    abort the interaction without acquiring a tip icon.\n    The first case is when the user dragged the\n    mouse at a wrong angle so that the desired target\n    icon did not pop up. In this case, the user may either\n    drop the icon and try again or complete the interaction\n    as a regular drag-and-drop interaction, i.e., by\n    dropping the icon onto the target icon’s base instead.\n    The other case occurs if the user is intending to\n    perform a regular mouse drag operation, for example\n    to rearrange icons on the desktop or to capture a set\n    of icons using a lasso operation. For these cases,\n    drag-and-pop allows users to terminate tip icons onthe-\n    fly and to complete the interaction without dragand-\n    pop/pick. To abort, users have to move the\n    mouse cursor away from the tip icon cluster while\n    still keeping the mouse depressed. This can be done\n    by overshooting the cluster or by changing mouse\n    direction. In particular, this allows users to access\n    the underlying drag-and-drop and lasso-select functionality\n    by introducing a simple zigzag gesture into\n    their cursor path. The zigzag contains at least one motion segment moving away from the tip icons,\n    thus terminating tip icons as soon as they appear.\n    The algorithm: the tip icon cluster is kept alive as\n    long as at least one of the following three rules is\n    successful. The first rule checks whether the mouse\n    cursor has moved closer to the center of at least one\n    of the icons in the tip icon cluster. This rule makes\n    sure that the cluster does not disappear while users\n    approach their targets. The second rule checks if the\n    cursor is in the direct vicinity of an icon. This rule\n    provides tolerance against users overshooting a tip\n    icon while acquiring it. The third and last rule keeps\n    the cluster alive if the cursor is stationary or if it is\n    moving backwards very slowly (up to 5 pxl/frame).\n    This rule makes drag-and-pop insensitive to jitter.\n    Figure 7 illustrates the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5 User study"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    In this section, we report the results of a user study\n    comparing drag-and-pop with the traditional dragand-\n    drop technique. To examine the effects of bezelcrossing\n    as well as distance, as described in Scenarios\n    2 and 3, we chose to run the study on a tiled\n    wall-size display. During the study, in which participants\n    filed icons into folders or dragged them\n    onto the icons of matching applications, we recorded\n    the time and accuracy of these movements. Our\n    main hypothesis was that participants would perform\n    faster when using the drag-and-pop interface, primarily\n    because it would avoid the need for crossing\n    the bezels, but also because it would bridge the\n    space to very distant icons more efficiently.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.1 Desktop layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    To obtain a representative set of icon arrangements\n    for the study, we gathered desktop screenshots from\n    25 coworkers who volunteered their participation\n    (15 single, 6 dual, and 4 triple monitor users). Overall\n    resolutions ranged from 800,000 pixels to\n    3,900,000 pixels (66% more than the display wall\n    used in the experiment).\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We clustered the obtained desktops by number\n    of icons and arrangement pattern. Then we chose\n    representatives from each of the three resulting main\n    clusters for the study (Figure 8). The “sparse” desktop\n    reflected the desktops of roughly two thirds of\n    the participants. It contained only 11 icons, most of\n    which were lined up in the top left corner of the\n    screen. The “frame” desktop reflected the desktops\n    of three of the participants. It contained 28 icons\n    arranged around the top, left, and right edge of the\n    screen. The “cluttered” desktop, finally, contained\n    35 icons that were spread primarily across the top\n    and left half of the screen. Five participants had chosen\n    this style of arranging their icons.\n    Icon layouts were stretched to fit the aspect ratio\n    of the display wall used in the experiment. An area\n    at the bottom right of the screen was reserved for the\n    starting locations of the icons to be filed during the\n    study (dashed shape in Figure 8)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.2 Participants"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Eight colleagues with no experience using drag-andpop\n    were recruited for this experiment. Due to technical\n    problems, the data from one of these participants\n    had to be dropped leaving us with 7. There\n    were 2 female and 5 male participants ranging in age\n    between 18 and 35. All were right handed with normal\n    or corrected-to-normal vision."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.3 Method"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    The test was run on the DynaWall (Streitz, 2001), a\n    display wall consisting of three Smartboard units\n    (Figure 9). Each Smartboard consisted of a backprojected\n    72”display with resistive touch input, so\n    that the entire display was 15’ (4.50m) long and 45” (1.12m) high. Display units could be operated by\n    touching the display, but for easier handling participants\n    were provided with color-free felt pens. Each\n    of the three display units ran at a resolution of\n    1024x768 pixels, offering an overall resolution of\n    3072x768 pixels. The three display units were connected\n    to a single PC equipped with two Matrox\n    Millennium graphics cards and running WindowsXP.\n    During the experiment, the DynaWall ran\n    a simulated Windows desktop. We compared dragand-\n    pop to a control condition of drag-and-drop.\n    Since our preliminary Windows-based version of\n    drag-and-pop did not support the full functionality\n    required for the study, we implemented a simulation\n    using Macromedia Flash (www.macromedia.com).\n    The drag-and-pop interface used in the experiment\n    was configured to a  30 degree target sector, 35\n    pixel target distance, and a maximum number of 5\n    tip icons.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    To each desktop layout we added 10 document\n    icons in the lower right quadrant of the screen.\n    These appeared in six different arrangements (Figure\n    8 shows 2 of them). The participants’ task was to\n    drag these icons into a given target folder or application.\n    Icons of image files, for example, were to be\n    filed in a folder labeled “My Pictures” and all Word\n    documents should be dropped onto the Word application.\n    To counterbalance for order effects, we required\n    participants to file the documents in a randomized\n    order. That is, for each movement, the item\n    to be filed was highlighted along with the target\n    icon. All other document icons were frozen, so that\n    participants could only move the highlighted icon.\n    As soon as participants began moving an item, all\n    highlighting was removed, forcing participants to\n    remember the destination item. We did this to assure\n    that participants would have to re-identify tip icons\n    when using the drag-and-pop interface, just as they\n    would in a real-world task.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants were allowed several minutes to\n    practice moving and filing icons in the prototype to\n    get them accustomed to both the DynaWall display\n    and the drag-and-pop interface. Once it was clear\n    that users understood how to use the display and the\n    interfaces, they were allowed to go on to the study.\n    Participants filed 2 sets of icons for each interface\n    (drag-and-pop and control), for each of the three\n    desktops. Thus participants filed 2 x 10 icons x 2\n    interface x 3 desktops for a total of 120 movements.\n    To mitigate learning effects associated with new\n    desktop arrangements or a new interface, we omitted\n    the first 5 trials for any desktop-interface combination\n    from our analyses, yielding ~15 correct trials\n    per cell or 90 movements per participant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4 Results\n    5.4.1 Task performance\n    Task performance was evaluated through speed and\n    accuracy measurements. Error rates were considerably\n    larger for drag-and-pop than for the control\n    (6.7% vs. 1%). We observed two things that made\n    this type of error more likely in the drag-and-pop\n    condition. First, in the drag-and-pop condition candidate\n    targets were brought closer together, making\n    it easier to accidentally drop an item on the wrong\n    target. Second, because drag-and-pop targets had\n    been translated away from their “home” location,\n    participants would sometimes forget which item was\n    in fact the target, especially if visually similar icons\n    (e.g., other folders) had created tip icons as well.\n    All data analyses for movement times were performed\n    on the median movement times for each participant\n    in each condition to normalize the typical\n    skewing associated with response time data. Summary\n    statistics report the means of these times.\n    Target icons could be located in the same display\n    unit as the icon to be filed, in a neighbor display\n    unit, or in the display unit at the other end of the\n    display wall, requiring users to cross 0, 1, or 2 bezels\n    in order to file the icon. To test the effect of\n    bezel crossing on performance, we ran a 2 (Condition)\n    x 3 (Bezels Crossed) within subjects ANOVA\n    on the median movement data. This revealed a significant\n    main effect for condition, F(1,6) = 18.2,\n    p<\\0.01 Collapsed across all distances, drag-and-pop was significantly faster than the control. There was also a\n        significant main effect of bezels crossed, F(2,12)=19.5, p<\\0.01; movement time increased as the number of\n        bezels participants had to cross to get to the target icon increased. As hypothesized, we also saw a significant\n        interaction between condition and number of bezels crossed, F(2,12)=15.2, p<\\0.01. As seen in Figure 10, an\n        increase in the number of crossed bezels resulted in only a small increase in movement time for drag-and-pop,\n        whereas it had a huge effect for the control interface. When no bezels had to be crossed, drag-and-pop appeared\n        to be slightly slower than control, although follow-up t-tests showed that this difference was not significant,\n        t(6)=1.73, ns. When 1 or 2 bezels had to be crossed, drag-and-pop was significantly faster than drag-and-drop\n        (t(6)=4.02, p<\\0.01 & t(6)=4.12, p<\\0.01, respectively). With 1 bezel crossed, dragand- pop was twice as fast as\n        the control and with 2 bezels it was 3.7 times as fast. "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 11 shows a scatter plot of movement time\n            versus target distance for both conditions. The best\n            linear fit for drag-and-drop was f(x)=0.007x-1.76,\n            r2=0.23. The linear fit for drag-and-pop was\n            f(x)=4.19, r2<\\0.0001. This reinforces what can be seen in Figure 10—movement time increases with distance\n                for the control interface, but stays relatively constant for the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4.2 Questionnaire and subjective feedback\n                    At the end of the study, participants answered a\n                    short questionnaire about their experience using the\n                    DynaWall and drag-and-pop. Participants were very\n                    enthusiastic about drag-and-pop. On a 7 point Likert\n                    scale (where 7=strongly agree and 1=strongly disagree),\n                    there was a mean > 6 for questions such as,\n                    “I liked using drag-and-pop”, “I always understood\n                    what was happening when drag-and-pop was on,”and “I would use drag-and-pop for large displays.”\n                    There was a mean of less than 3 for “It took a long\n                    time to get used to drag-and-pop” and “It was hard\n                    to control what the targets did when drag-and-pop\n                    was on.” Participants reported the drag-and-pop\n                    interface to cause less manual stress and fatigue than\n                    the control interface.\n                    The most common problem with drag-and-pop\n                    was in getting the right group of targets to pop up,\n                    and several participants requested a wider angle for\n                    destination targets. This relates to an observation we\n                    made about how people interact with touch-sensitive\n                    wall-displays. On the wall display, participants had\n                    to employ their whole arm to make a movement,\n                    resulting in targeting motions in the shape of arcs.\n                    This means that the initial direction of the movement\n                    was not in the direction of the target. To accommodate\n                    such arcs in the future, we have adapted the\n                    target selection algorithm of drag-and-pop by giving\n                    the target sector extra tolerance for movements towards\n                    the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"6 Conclusions and future work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n                    The substantial time-savings found in the user study\n                    confirm our expectations. Although when used\n                    within a single screen unit drag-and-pop does not\n                    seem to by faster than traditional drag and drop (first\n                    pair of bars in Figure 10; drag-and-pop’s capability\n                    of bridging distance to the target seems to be nullified\n                    by the need for re-orientation), its advantages\n                    on very large screens and its capability of bridging\n                    across display units are apparent. On the usability\n                    side, we were glad to see that participants had no\n                    trouble learning how to use the technique and that\n                    they described the technique as understandable and\n                    predictable. The single biggest shortcoming, the\n                    target selection, is the subjects of current work. In\n                    addition to the changes described above, we consider\n                    dropping the notion of a fixed target sector size\n                    and replace it with a mechanism that adjusts the sector\n                    size dynamically based on the number of matching\n                    targets.\n                    Given the recent advent of commercially available\n                    tablet computers, our next step will be to explore\n                    how drag-and-pop and especially drag-andpick\n                    can help tablet computer users work with external\n                    monitors. While this paper focused on icons, we\n                    plan to explore ways of operating menus, sliders,\n                    and entire applications using the techniques described\n                    in this article."}]}],"_id":"HDqLMZ5aHdwBofVA"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n    "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing\n    remote screen content on touch- and pen-operated systems\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated\n        display systems. They provide users with access to screen content that would otherwise be impossible\n        or hard to reach, e.g., because it is located behind a bezel or far away from the user. Drag-and-pop is an extension\n        of traditional drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop\n        responds by temporarily moving potential target icons towards the user’s current cursor location, thereby allowing\n        the user to interact with these icons using comparably small hand movements. Drag-and-Pick extends the\n        drag-and-pop interaction style such that it allows activating icons, e.g., to open folders or launch applications.\n        In\n        this paper, we report the results of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’\n        (4.50m) wide interactive display wall. Participants where able to file icons up to 3.7 times faster when using the\n        drag-and-pop interface.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen,\n        heterogeneous display.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    With the emergence of pen- and touch-operated personal\n    digital assistants (PDAs), tablet computers,\n    and wall-size displays (e.g., Liveboard, Elrod et al.,\n    1992; Smartboard, http://www.smarttech.com),\n    touch and pen input have gained popularity. Over\n    the past years, more complex display systems have\n    been created by combining multiple such display\n    units. Wall-size touch displays have been combined\n    into display walls, such as the DynaWall (Streitz\n    2001), or the iRoom Smartboard wall (Johanson,\n    2002b). Recent PDAs and tablet computers allow\n    connecting additional displays, such as another tablet\n    or a monitor in order to extend the device’s internal\n    display space.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple\n    display units bring up a new class of input challenges\n    that cannot always be solved with existing\n    techniques, because many of the existing techniques\n    were designed for indirect input devices, such as\n    mice, track pads, or joysticks. Indirect input devices\n    can be used on arbitrary display configurations, because\n    they can simply be mapped to the respective\n    topology (e.g., PointRight, Johanson 2002a). Touch/\n    pen input, however, is based on the immediate correspondence between input space and display\n    space and thus requires users to adapt their input\n    behavior to the physicality of the display system.\n    Here are three examples where this can become\n    problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 1: External monitors. One or more display\n    units within a display system may not be\n    equipped with a touch or pen sensor. Connecting an\n    external monitor to a tablet computer or PDA, for\n    example, allows users to see more material, but requires\n    them to use an indirect input device, such as a\n    mouse, when interacting with content on the external\n    monitor. Since some tablet-specific tasks, such as\n    scribbling, are hard to accomplish with a mouse,\n    users find themselves continuously switching between\n    pen and mouse."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 2: Interactions across display units.\n    Some interaction techniques, such as drag-and-drop,\n    require users to interact with two or more icons in a\n    single pen-down interaction. If these icons are distributed\n    across physically separate pen/touch input\n    display units, users first have to bring all involved\n    icons to the same display unit, a potentially timeconsuming\n    activity (Figure 2a-c)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 3: Bridging long distances. Accessing\n    icons located far away from the user, e.g., on the\n    opposite side of a 15’ DynaWall, requires users to\n    physically walk over, the time for which may in\n    some circumstances increase linearly with distance\n    (Guiard et at, 2001). In addition, drag interactions\n    get more error-prone with distance, because users\n    drop objects accidentally when failing to continuously\n    keep the pen tip in contact with the display\n    surface (Rekimoto 1997)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"2 Drag-and-pop & drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-pop and drag-and-pick are interaction\n    techniques that address these issues. We will begin\n    by giving an overview; more detailed descriptions of\n    both techniques can be found in Section 4"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"extends traditional drag-and-drop\n    as illustrated by Figure 1. (a) The user intends to\n    delete a Word memo by dragging it into the recycle\n    bin. (b) As the user starts dragging the memo’s icon\n    towards the recycle bin, icons that are of compatible\n    type and located in the direction of the user’s drag\n    motion “pop up”. This means that for each of these\n    icons a link icon is created (tip icon) that appears in\n    front of the user’s cursor. Tip icons are connected to\n    the original icon (base icon) using a rubber band.\n    (c) The user drags the memo over the recycle bin\n    and releases the mouse button. The recycle bin accepts\n    the memo. Alternatively, the user could have\n    dropped the memo over the word processor or the\n    web browser icon, which would have launched the\n    respective application with the memo. (d) When the\n    user drops the icon, all tip icons disappear instantly.\n    Figure 2d shows how drag-and-pop simplifies\n    dropping icons onto targets located at the other side"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction\n    concept such that it allows activating icons,\n    e.g., to open a folder or to launch a program. While\n    drag-and-pop is initiated by the user dragging an\n    icon, drag-and-pick starts with the user performing a\n    drag interaction on empty screen space. The system’s\n    response to this drag interaction is similar to\n    drag-and-pop, but with two differences. First, all\n    icons located in the direction of the drag motion will\n    pop up, not only those of compatible type (Figure 3).\n    Second, as the user drags the mouse cursor over one\n    of the targets and releases the mouse button, the\n    folder, file, or application associated with the icon is\n    activated as if it had been double clicked.\n    Figure 4 shows how this allows users to use the\n    pen for launching an application, the icon of which\n    is located on a monitor not supporting pen input.\n    In principle, drag-and-pick can be applied to any\n    type of widget, e.g., any buttons and menus located\n    on a non-pen accessible monitor. In this paper, however,\n    we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"3 Related work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-drop is a well-know interaction technique\n    for transferring or copying information using a\n    pointing device, while avoiding the use of a hidden\n    clipboard (Wagner, 1995; Beaudouin-Lafon, 2000).\n    Hyperdragging (Rekimoto, 1999), allows extending\n    drag-and-drop across physically separate displays\n    (Scenario 2), but requires an indirect input device,\n    such as a mouse. Most techniques compatible with\n    pen usage are based on point-and-click, e.g., pickand-\n    drop (Rekimoto, 1997) and take-and-put (Streitz\n    et al., 2001). These techniques, however, cannot be\n    used to access material on a display unit not providing\n    pen support (Scenario 1)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A different set of interaction techniques have\n    been proposed to help users overcome large distances\n    (Scenario 3). Manual And Gaze Input Cascaded\n    (MAGIC) pointing (Zhai et al., 1999) uses eye\n    tracking to move the cursor to the target area, from\n    where the user guides the cursor manually (which\n    requires an indirect input device). Gesture input\n    techniques allow selecting a target and a command\n    in a single interaction and are generally compatible\n    with pen input (Rubine, 1991). ‘Throwing’ allows users to accelerate an object with a small gesture; the\n    object then continues its trajectory based on its inertia\n    (Gei ler, 1998). The imprecision of human motor\n    skills has prevented throwing from being used\n    for reliable target acquisition. Myers et al. (2002)\n    used laser pointers to acquire targets on a Smartboard,\n    but found them to be slower than touch input.\n    A variety of mouse-based interaction techniques\n    use destination prediction to simplify navigation\n    (e.g., Jul, 2002). Dulberg et al. (1999) proposed a\n    flying click or flick for snapping the mouse to target\n    locations. Swaminathan and Sato (1997) proposed\n    making relevant controls on the screen “sticky”.\n    As an alternative way of launching applications,\n    today’s operating systems offer menus containing\n    lists of available application or documents. A ‘send\n    to’ option (Microsoft Windows) allows sending an\n    icon to a target selected from a predefined list.\n    Compared to 2D desktops, which typically use a\n    larger amount of screen space than pull-down or\n    pop-up menus, menus are limited to a smaller selection\n    of choices unless they use a hierarchical menu\n    organization, which makes their usage less transparent\n    and often less efficient. Furthermore, invoking a\n    content-menu may require hitting a qualifier key,\n    which can be problematic on touch-based systems."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4 Design and algorithms"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    In this section, we will take a more detailed look at\n    the design and algorithms behind drag-and-pop/pick.\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.1 Selecting candidates"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    In order to reduce clutter, drag-and-pop creates tip\n    icons only for a subset of the icons on the screen.\n    Drag-and-pop’s candidate selection algorithm is\n    initialized with the entire set of icons on the screen;\n    it then successively eliminates candidates using the\n    following four rules.\n    First, icons of incompatible type are eliminated.\n    If the user drags a text file, the icon of a text processor\n    can create a tip icon; the recycle bin icon can\n    create a tip icon; the icon of another text file, however,\n    cannot, because dragging two text files onto\n    each other is usually not associated with any behavior.\n    Drag-and-pick bypasses this selection step in\n    order to allow users to activate any type of icon.\n    Second, icons located between the cursor and the\n    location where the tip icons cluster will appear (see\n    following section) are eliminated. This rule avoids\n    creating tip icons that move away from the cursor.\n    Third, only icons that are located within a certain\n    angle from the initial drag direction (the target sector)\n    are considered. The initial drag direction is determined\n    the moment the user drags an icon further than a given threshold (default 15 pixels). During\n    preliminary testing on a Smartboard, we got good\n    results with first-time users when using sector sizes\n    of  30 to  45 degrees. The sector size could be reduced\n    to sector sizes of  20 degrees as users gained\n    more experience.\n    Forth, if the number of qualifying icons is above\n    some hard limit, drag-and-pop eliminates tip icon\n    candidates until the hard limit is met. Icons are removed\n    in an order starting at the outside of the target\n    sector moving inwards. This rule assures the scalability\n    of drag-and-pop to densely populated displays,\n    but requires drag-and-pop users working with\n    densely populated screens to aim more precisely.\n    We typically use hard limits between 5 and 10.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.2 Computing the tip icon layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Once tip icon candidates have been selected, dragand-\n    pop determines where on the screen to place the\n    tip icons. In order to avoid interference between tip\n    icons, the location of all tip icons is computed in a\n    centralized fashion.\n    Our drag-and-pop prototype uses the following\n    algorithm that is illustrated by Figure 5: (1) Snap\n    icons to a grid and store them in a two-dimensional\n    array, with each array element representing one cell\n    of the grid. If two or more icons fall into the same\n    cell, refine the grid. (2) Shrink the icon layout by\n    eliminating all array columns and rows that contain\n    no icons. (3) Translate icon positions back to 2D\n    space by mapping the array onto a regular grid. By\n    default, the output grid is chosen to be slightly\n    tighter than the input grid, which gives extra compression.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We chose this algorithm, because it preserves\n    alignment, proximity, and spatial arrangement between\n    icons, which allows users to use their spatial\n    memory when identifying the desired target within\n    the tip icon cluster. This is especially useful when\n    tip icons look alike (e.g., a folder in a cluster of\n    folders). In order to help users distinguish local icon clusters from surrounding icons more easily, the\n    algorithm may be adjusted to shrink empty rows and\n    columns during layout computation instead of removing\n    them entirely."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed,\n    drag-and-pop positions it on the screen such that the\n    center of the layout’s bounding box is located at the\n    direct extension of the user’s current mouse motion.\n    The distance of the tip icon cluster to the user’s current\n    cursor position is configurable. For inexperienced\n    users, we got best results with distances of\n    around 100 pixels; shorter distances made these users\n    likely to overshoot the cluster. For more experienced\n    users, we were able to reduce the distance to\n    values around 30 pixels, which allowed these users\n    to operate drag-and-pop with less effort, in a more\n    “menu-like” fashion. In order to reduce visual interference\n    between tip icons and icons on the desktop,\n    drag-and-pop diminishes desktop icons while tip\n    icons are visible."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.3 The rubber band"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    When the tip icon cluster is displayed, users need to\n    re-identify their targets within the tip icon cluster in\n    order to be able to successfully acquire them.\n    Our first implementation of drag-and-pop created\n    tip icons on top of their bases and used slow-inslow-\n    out animation (Shneiderman 1998) to move tip\n    icons to their final location. While this approach\n    allowed users to locate the final position of the desired\n    tip icon by visually tracking it on its way from\n    basis to final position, it also required users to either\n    wait for the animation to complete or to acquire a\n    moving target. We therefore chose to abandon the\n    animation and immediately display tip icons at their\n    final destinations.\n    In lieu of the animation, we provided tip icons\n    with rubber bands. The design prototype of the rubber\n    band is shown in Figure 6. For performance reasons,\n    our prototype, which is shown in all other\n    screenshots, uses rubber bands of a lower level of\n    graphical detail, i.e., a tape and three lines in the\n    color scheme of the corresponding icon.\n    The purpose of the rubber band is to offer the\n    functionality of the animation, but without the problems\n    alluded to above. The rubber band, decorated\n    with the respective icon’s texture, can be thought of\n    as having been created by taking a photograph of the\n    tip icon animation with a very long shutter speed\n    (so-called motion blur, e.g., Dachille and Kaufman,\n    2000). Like the animation, the rubber band allows\n    users to trace the path from base to tip icon. However,\n    users can do this at their own pace and the customized\n    texturing of the rubber band allows users to\n    start tracing it anywhere, not only at the base."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The rubber band is provided with a narrow midriff\n    section, suggesting that the rubber band is elastic.\n    This design was chosen to help users understand\n    that tip icons have retracted to their bases when they\n    disappear at the end of the interaction. This feature\n    may also help users find their way to the tip icon\n    faster, because it provides users with a visual cue\n    about how far away the tip icon is located. A thick\n    rubber band section implies that the tip icon (or\n    base) is close; a thin rubber band section indicates\n    that the target is further away."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.4 Aborting drag-and-pop interactions"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    As soon as tip icons and rubber bands are shown on\n    the screen, drag-and-pop waits for the user to acquire\n    one of the tip icons to complete the ongoing\n    drag-and-pop or drag-and-pick interaction. There are\n    two cases, however, in which users will want to\n    abort the interaction without acquiring a tip icon.\n    The first case is when the user dragged the\n    mouse at a wrong angle so that the desired target\n    icon did not pop up. In this case, the user may either\n    drop the icon and try again or complete the interaction\n    as a regular drag-and-drop interaction, i.e., by\n    dropping the icon onto the target icon’s base instead.\n    The other case occurs if the user is intending to\n    perform a regular mouse drag operation, for example\n    to rearrange icons on the desktop or to capture a set\n    of icons using a lasso operation. For these cases,\n    drag-and-pop allows users to terminate tip icons onthe-\n    fly and to complete the interaction without dragand-\n    pop/pick. To abort, users have to move the\n    mouse cursor away from the tip icon cluster while\n    still keeping the mouse depressed. This can be done\n    by overshooting the cluster or by changing mouse\n    direction. In particular, this allows users to access\n    the underlying drag-and-drop and lasso-select functionality\n    by introducing a simple zigzag gesture into\n    their cursor path. The zigzag contains at least one motion segment moving away from the tip icons,\n    thus terminating tip icons as soon as they appear.\n    The algorithm: the tip icon cluster is kept alive as\n    long as at least one of the following three rules is\n    successful. The first rule checks whether the mouse\n    cursor has moved closer to the center of at least one\n    of the icons in the tip icon cluster. This rule makes\n    sure that the cluster does not disappear while users\n    approach their targets. The second rule checks if the\n    cursor is in the direct vicinity of an icon. This rule\n    provides tolerance against users overshooting a tip\n    icon while acquiring it. The third and last rule keeps\n    the cluster alive if the cursor is stationary or if it is\n    moving backwards very slowly (up to 5 pxl/frame).\n    This rule makes drag-and-pop insensitive to jitter.\n    Figure 7 illustrates the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5 User study"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    In this section, we report the results of a user study\n    comparing drag-and-pop with the traditional dragand-\n    drop technique. To examine the effects of bezelcrossing\n    as well as distance, as described in Scenarios\n    2 and 3, we chose to run the study on a tiled\n    wall-size display. During the study, in which participants\n    filed icons into folders or dragged them\n    onto the icons of matching applications, we recorded\n    the time and accuracy of these movements. Our\n    main hypothesis was that participants would perform\n    faster when using the drag-and-pop interface, primarily\n    because it would avoid the need for crossing\n    the bezels, but also because it would bridge the\n    space to very distant icons more efficiently.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.1 Desktop layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    To obtain a representative set of icon arrangements\n    for the study, we gathered desktop screenshots from\n    25 coworkers who volunteered their participation\n    (15 single, 6 dual, and 4 triple monitor users). Overall\n    resolutions ranged from 800,000 pixels to\n    3,900,000 pixels (66% more than the display wall\n    used in the experiment).\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We clustered the obtained desktops by number\n    of icons and arrangement pattern. Then we chose\n    representatives from each of the three resulting main\n    clusters for the study (Figure 8). The “sparse” desktop\n    reflected the desktops of roughly two thirds of\n    the participants. It contained only 11 icons, most of\n    which were lined up in the top left corner of the\n    screen. The “frame” desktop reflected the desktops\n    of three of the participants. It contained 28 icons\n    arranged around the top, left, and right edge of the\n    screen. The “cluttered” desktop, finally, contained\n    35 icons that were spread primarily across the top\n    and left half of the screen. Five participants had chosen\n    this style of arranging their icons.\n    Icon layouts were stretched to fit the aspect ratio\n    of the display wall used in the experiment. An area\n    at the bottom right of the screen was reserved for the\n    starting locations of the icons to be filed during the\n    study (dashed shape in Figure 8)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.2 Participants"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Eight colleagues with no experience using drag-andpop\n    were recruited for this experiment. Due to technical\n    problems, the data from one of these participants\n    had to be dropped leaving us with 7. There\n    were 2 female and 5 male participants ranging in age\n    between 18 and 35. All were right handed with normal\n    or corrected-to-normal vision."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.3 Method"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    The test was run on the DynaWall (Streitz, 2001), a\n    display wall consisting of three Smartboard units\n    (Figure 9). Each Smartboard consisted of a backprojected\n    72”display with resistive touch input, so\n    that the entire display was 15’ (4.50m) long and 45” (1.12m) high. Display units could be operated by\n    touching the display, but for easier handling participants\n    were provided with color-free felt pens. Each\n    of the three display units ran at a resolution of\n    1024x768 pixels, offering an overall resolution of\n    3072x768 pixels. The three display units were connected\n    to a single PC equipped with two Matrox\n    Millennium graphics cards and running WindowsXP.\n    During the experiment, the DynaWall ran\n    a simulated Windows desktop. We compared dragand-\n    pop to a control condition of drag-and-drop.\n    Since our preliminary Windows-based version of\n    drag-and-pop did not support the full functionality\n    required for the study, we implemented a simulation\n    using Macromedia Flash (www.macromedia.com).\n    The drag-and-pop interface used in the experiment\n    was configured to a  30 degree target sector, 35\n    pixel target distance, and a maximum number of 5\n    tip icons.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    To each desktop layout we added 10 document\n    icons in the lower right quadrant of the screen.\n    These appeared in six different arrangements (Figure\n    8 shows 2 of them). The participants’ task was to\n    drag these icons into a given target folder or application.\n    Icons of image files, for example, were to be\n    filed in a folder labeled “My Pictures” and all Word\n    documents should be dropped onto the Word application.\n    To counterbalance for order effects, we required\n    participants to file the documents in a randomized\n    order. That is, for each movement, the item\n    to be filed was highlighted along with the target\n    icon. All other document icons were frozen, so that\n    participants could only move the highlighted icon.\n    As soon as participants began moving an item, all\n    highlighting was removed, forcing participants to\n    remember the destination item. We did this to assure\n    that participants would have to re-identify tip icons\n    when using the drag-and-pop interface, just as they\n    would in a real-world task.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants were allowed several minutes to\n    practice moving and filing icons in the prototype to\n    get them accustomed to both the DynaWall display\n    and the drag-and-pop interface. Once it was clear\n    that users understood how to use the display and the\n    interfaces, they were allowed to go on to the study.\n    Participants filed 2 sets of icons for each interface\n    (drag-and-pop and control), for each of the three\n    desktops. Thus participants filed 2 x 10 icons x 2\n    interface x 3 desktops for a total of 120 movements.\n    To mitigate learning effects associated with new\n    desktop arrangements or a new interface, we omitted\n    the first 5 trials for any desktop-interface combination\n    from our analyses, yielding ~15 correct trials\n    per cell or 90 movements per participant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4 Results\n    5.4.1 Task performance\n    Task performance was evaluated through speed and\n    accuracy measurements. Error rates were considerably\n    larger for drag-and-pop than for the control\n    (6.7% vs. 1%). We observed two things that made\n    this type of error more likely in the drag-and-pop\n    condition. First, in the drag-and-pop condition candidate\n    targets were brought closer together, making\n    it easier to accidentally drop an item on the wrong\n    target. Second, because drag-and-pop targets had\n    been translated away from their “home” location,\n    participants would sometimes forget which item was\n    in fact the target, especially if visually similar icons\n    (e.g., other folders) had created tip icons as well.\n    All data analyses for movement times were performed\n    on the median movement times for each participant\n    in each condition to normalize the typical\n    skewing associated with response time data. Summary\n    statistics report the means of these times.\n    Target icons could be located in the same display\n    unit as the icon to be filed, in a neighbor display\n    unit, or in the display unit at the other end of the\n    display wall, requiring users to cross 0, 1, or 2 bezels\n    in order to file the icon. To test the effect of\n    bezel crossing on performance, we ran a 2 (Condition)\n    x 3 (Bezels Crossed) within subjects ANOVA\n    on the median movement data. This revealed a significant\n    main effect for condition, F(1,6) = 18.2,\n    p<\\0.01 Collapsed across all distances, drag-and-pop was significantly faster than the control. There was also a\n        significant main effect of bezels crossed, F(2,12)=19.5, p<\\0.01; movement time increased as the number of\n        bezels participants had to cross to get to the target icon increased. As hypothesized, we also saw a significant\n        interaction between condition and number of bezels crossed, F(2,12)=15.2, p<\\0.01. As seen in Figure 10, an\n        increase in the number of crossed bezels resulted in only a small increase in movement time for drag-and-pop,\n        whereas it had a huge effect for the control interface. When no bezels had to be crossed, drag-and-pop appeared\n        to be slightly slower than control, although follow-up t-tests showed that this difference was not significant,\n        t(6)=1.73, ns. When 1 or 2 bezels had to be crossed, drag-and-pop was significantly faster than drag-and-drop\n        (t(6)=4.02, p<\\0.01 & t(6)=4.12, p<\\0.01, respectively). With 1 bezel crossed, dragand- pop was twice as fast as\n        the control and with 2 bezels it was 3.7 times as fast. "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 11 shows a scatter plot of movement time\n            versus target distance for both conditions. The best\n            linear fit for drag-and-drop was f(x)=0.007x-1.76,\n            r2=0.23. The linear fit for drag-and-pop was\n            f(x)=4.19, r2<\\0.0001. This reinforces what can be seen in Figure 10—movement time increases with distance\n                for the control interface, but stays relatively constant for the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4.2 Questionnaire and subjective feedback\n                    At the end of the study, participants answered a\n                    short questionnaire about their experience using the\n                    DynaWall and drag-and-pop. Participants were very\n                    enthusiastic about drag-and-pop. On a 7 point Likert\n                    scale (where 7=strongly agree and 1=strongly disagree),\n                    there was a mean > 6 for questions such as,\n                    “I liked using drag-and-pop”, “I always understood\n                    what was happening when drag-and-pop was on,”and “I would use drag-and-pop for large displays.”\n                    There was a mean of less than 3 for “It took a long\n                    time to get used to drag-and-pop” and “It was hard\n                    to control what the targets did when drag-and-pop\n                    was on.” Participants reported the drag-and-pop\n                    interface to cause less manual stress and fatigue than\n                    the control interface.\n                    The most common problem with drag-and-pop\n                    was in getting the right group of targets to pop up,\n                    and several participants requested a wider angle for\n                    destination targets. This relates to an observation we\n                    made about how people interact with touch-sensitive\n                    wall-displays. On the wall display, participants had\n                    to employ their whole arm to make a movement,\n                    resulting in targeting motions in the shape of arcs.\n                    This means that the initial direction of the movement\n                    was not in the direction of the target. To accommodate\n                    such arcs in the future, we have adapted the\n                    target selection algorithm of drag-and-pop by giving\n                    the target sector extra tolerance for movements towards\n                    the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"6 Conclusions and future work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n                    The substantial time-savings found in the user study\n                    confirm our expectations. Although when used\n                    within a single screen unit drag-and-pop does not\n                    seem to by faster than traditional drag and drop (first\n                    pair of bars in Figure 10; drag-and-pop’s capability\n                    of bridging distance to the target seems to be nullified\n                    by the need for re-orientation), its advantages\n                    on very large screens and its capability of bridging\n                    across display units are apparent. On the usability\n                    side, we were glad to see that participants had no\n                    trouble learning how to use the technique and that\n                    they described the technique as understandable and\n                    predictable. The single biggest shortcoming, the\n                    target selection, is the subjects of current work. In\n                    addition to the changes described above, we consider\n                    dropping the notion of a fixed target sector size\n                    and replace it with a mechanism that adjusts the sector\n                    size dynamically based on the number of matching\n                    targets.\n                    Given the recent advent of commercially available\n                    tablet computers, our next step will be to explore\n                    how drag-and-pop and especially drag-andpick\n                    can help tablet computer users work with external\n                    monitors. While this paper focused on icons, we\n                    plan to explore ways of operating menus, sliders,\n                    and entire applications using the techniques described\n                    in this article."}]}],"_id":"EQauydn3HGIZxCV5"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n    "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing\n    remote screen content on touch- and pen-operated systems\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated\n        display systems. They provide users with access to screen content that would otherwise be impossible\n        or hard to reach, e.g., because it is located behind a bezel or far away from the user. Drag-and-pop is an extension\n        of traditional drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop\n        responds by temporarily moving potential target icons towards the user’s current cursor location, thereby allowing\n        the user to interact with these icons using comparably small hand movements. Drag-and-Pick extends the\n        drag-and-pop interaction style such that it allows activating icons, e.g., to open folders or launch applications.\n        In\n        this paper, we report the results of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’\n        (4.50m) wide interactive display wall. Participants where able to file icons up to 3.7 times faster when using the\n        drag-and-pop interface.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen,\n        heterogeneous display.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    With the emergence of pen- and touch-operated personal\n    digital assistants (PDAs), tablet computers,\n    and wall-size displays (e.g., Liveboard, Elrod et al.,\n    1992; Smartboard, http://www.smarttech.com),\n    touch and pen input have gained popularity. Over\n    the past years, more complex display systems have\n    been created by combining multiple such display\n    units. Wall-size touch displays have been combined\n    into display walls, such as the DynaWall (Streitz\n    2001), or the iRoom Smartboard wall (Johanson,\n    2002b). Recent PDAs and tablet computers allow\n    connecting additional displays, such as another tablet\n    or a monitor in order to extend the device’s internal\n    display space.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple\n    display units bring up a new class of input challenges\n    that cannot always be solved with existing\n    techniques, because many of the existing techniques\n    were designed for indirect input devices, such as\n    mice, track pads, or joysticks. Indirect input devices\n    can be used on arbitrary display configurations, because\n    they can simply be mapped to the respective\n    topology (e.g., PointRight, Johanson 2002a). Touch/\n    pen input, however, is based on the immediate correspondence between input space and display\n    space and thus requires users to adapt their input\n    behavior to the physicality of the display system.\n    Here are three examples where this can become\n    problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 1: External monitors. One or more display\n    units within a display system may not be\n    equipped with a touch or pen sensor. Connecting an\n    external monitor to a tablet computer or PDA, for\n    example, allows users to see more material, but requires\n    them to use an indirect input device, such as a\n    mouse, when interacting with content on the external\n    monitor. Since some tablet-specific tasks, such as\n    scribbling, are hard to accomplish with a mouse,\n    users find themselves continuously switching between\n    pen and mouse."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 2: Interactions across display units.\n    Some interaction techniques, such as drag-and-drop,\n    require users to interact with two or more icons in a\n    single pen-down interaction. If these icons are distributed\n    across physically separate pen/touch input\n    display units, users first have to bring all involved\n    icons to the same display unit, a potentially timeconsuming\n    activity (Figure 2a-c)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 3: Bridging long distances. Accessing\n    icons located far away from the user, e.g., on the\n    opposite side of a 15’ DynaWall, requires users to\n    physically walk over, the time for which may in\n    some circumstances increase linearly with distance\n    (Guiard et at, 2001). In addition, drag interactions\n    get more error-prone with distance, because users\n    drop objects accidentally when failing to continuously\n    keep the pen tip in contact with the display\n    surface (Rekimoto 1997)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"2 Drag-and-pop & drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-pop and drag-and-pick are interaction\n    techniques that address these issues. We will begin\n    by giving an overview; more detailed descriptions of\n    both techniques can be found in Section 4"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"extends traditional drag-and-drop\n    as illustrated by Figure 1. (a) The user intends to\n    delete a Word memo by dragging it into the recycle\n    bin. (b) As the user starts dragging the memo’s icon\n    towards the recycle bin, icons that are of compatible\n    type and located in the direction of the user’s drag\n    motion “pop up”. This means that for each of these\n    icons a link icon is created (tip icon) that appears in\n    front of the user’s cursor. Tip icons are connected to\n    the original icon (base icon) using a rubber band.\n    (c) The user drags the memo over the recycle bin\n    and releases the mouse button. The recycle bin accepts\n    the memo. Alternatively, the user could have\n    dropped the memo over the word processor or the\n    web browser icon, which would have launched the\n    respective application with the memo. (d) When the\n    user drops the icon, all tip icons disappear instantly.\n    Figure 2d shows how drag-and-pop simplifies\n    dropping icons onto targets located at the other side"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction\n    concept such that it allows activating icons,\n    e.g., to open a folder or to launch a program. While\n    drag-and-pop is initiated by the user dragging an\n    icon, drag-and-pick starts with the user performing a\n    drag interaction on empty screen space. The system’s\n    response to this drag interaction is similar to\n    drag-and-pop, but with two differences. First, all\n    icons located in the direction of the drag motion will\n    pop up, not only those of compatible type (Figure 3).\n    Second, as the user drags the mouse cursor over one\n    of the targets and releases the mouse button, the\n    folder, file, or application associated with the icon is\n    activated as if it had been double clicked.\n    Figure 4 shows how this allows users to use the\n    pen for launching an application, the icon of which\n    is located on a monitor not supporting pen input.\n    In principle, drag-and-pick can be applied to any\n    type of widget, e.g., any buttons and menus located\n    on a non-pen accessible monitor. In this paper, however,\n    we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"3 Related work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-drop is a well-know interaction technique\n    for transferring or copying information using a\n    pointing device, while avoiding the use of a hidden\n    clipboard (Wagner, 1995; Beaudouin-Lafon, 2000).\n    Hyperdragging (Rekimoto, 1999), allows extending\n    drag-and-drop across physically separate displays\n    (Scenario 2), but requires an indirect input device,\n    such as a mouse. Most techniques compatible with\n    pen usage are based on point-and-click, e.g., pickand-\n    drop (Rekimoto, 1997) and take-and-put (Streitz\n    et al., 2001). These techniques, however, cannot be\n    used to access material on a display unit not providing\n    pen support (Scenario 1)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A different set of interaction techniques have\n    been proposed to help users overcome large distances\n    (Scenario 3). Manual And Gaze Input Cascaded\n    (MAGIC) pointing (Zhai et al., 1999) uses eye\n    tracking to move the cursor to the target area, from\n    where the user guides the cursor manually (which\n    requires an indirect input device). Gesture input\n    techniques allow selecting a target and a command\n    in a single interaction and are generally compatible\n    with pen input (Rubine, 1991). ‘Throwing’ allows users to accelerate an object with a small gesture; the\n    object then continues its trajectory based on its inertia\n    (Gei ler, 1998). The imprecision of human motor\n    skills has prevented throwing from being used\n    for reliable target acquisition. Myers et al. (2002)\n    used laser pointers to acquire targets on a Smartboard,\n    but found them to be slower than touch input.\n    A variety of mouse-based interaction techniques\n    use destination prediction to simplify navigation\n    (e.g., Jul, 2002). Dulberg et al. (1999) proposed a\n    flying click or flick for snapping the mouse to target\n    locations. Swaminathan and Sato (1997) proposed\n    making relevant controls on the screen “sticky”.\n    As an alternative way of launching applications,\n    today’s operating systems offer menus containing\n    lists of available application or documents. A ‘send\n    to’ option (Microsoft Windows) allows sending an\n    icon to a target selected from a predefined list.\n    Compared to 2D desktops, which typically use a\n    larger amount of screen space than pull-down or\n    pop-up menus, menus are limited to a smaller selection\n    of choices unless they use a hierarchical menu\n    organization, which makes their usage less transparent\n    and often less efficient. Furthermore, invoking a\n    content-menu may require hitting a qualifier key,\n    which can be problematic on touch-based systems."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4 Design and algorithms"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    In this section, we will take a more detailed look at\n    the design and algorithms behind drag-and-pop/pick.\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.1 Selecting candidates"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    In order to reduce clutter, drag-and-pop creates tip\n    icons only for a subset of the icons on the screen.\n    Drag-and-pop’s candidate selection algorithm is\n    initialized with the entire set of icons on the screen;\n    it then successively eliminates candidates using the\n    following four rules.\n    First, icons of incompatible type are eliminated.\n    If the user drags a text file, the icon of a text processor\n    can create a tip icon; the recycle bin icon can\n    create a tip icon; the icon of another text file, however,\n    cannot, because dragging two text files onto\n    each other is usually not associated with any behavior.\n    Drag-and-pick bypasses this selection step in\n    order to allow users to activate any type of icon.\n    Second, icons located between the cursor and the\n    location where the tip icons cluster will appear (see\n    following section) are eliminated. This rule avoids\n    creating tip icons that move away from the cursor.\n    Third, only icons that are located within a certain\n    angle from the initial drag direction (the target sector)\n    are considered. The initial drag direction is determined\n    the moment the user drags an icon further than a given threshold (default 15 pixels). During\n    preliminary testing on a Smartboard, we got good\n    results with first-time users when using sector sizes\n    of  30 to  45 degrees. The sector size could be reduced\n    to sector sizes of  20 degrees as users gained\n    more experience.\n    Forth, if the number of qualifying icons is above\n    some hard limit, drag-and-pop eliminates tip icon\n    candidates until the hard limit is met. Icons are removed\n    in an order starting at the outside of the target\n    sector moving inwards. This rule assures the scalability\n    of drag-and-pop to densely populated displays,\n    but requires drag-and-pop users working with\n    densely populated screens to aim more precisely.\n    We typically use hard limits between 5 and 10.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.2 Computing the tip icon layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Once tip icon candidates have been selected, dragand-\n    pop determines where on the screen to place the\n    tip icons. In order to avoid interference between tip\n    icons, the location of all tip icons is computed in a\n    centralized fashion.\n    Our drag-and-pop prototype uses the following\n    algorithm that is illustrated by Figure 5: (1) Snap\n    icons to a grid and store them in a two-dimensional\n    array, with each array element representing one cell\n    of the grid. If two or more icons fall into the same\n    cell, refine the grid. (2) Shrink the icon layout by\n    eliminating all array columns and rows that contain\n    no icons. (3) Translate icon positions back to 2D\n    space by mapping the array onto a regular grid. By\n    default, the output grid is chosen to be slightly\n    tighter than the input grid, which gives extra compression.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We chose this algorithm, because it preserves\n    alignment, proximity, and spatial arrangement between\n    icons, which allows users to use their spatial\n    memory when identifying the desired target within\n    the tip icon cluster. This is especially useful when\n    tip icons look alike (e.g., a folder in a cluster of\n    folders). In order to help users distinguish local icon clusters from surrounding icons more easily, the\n    algorithm may be adjusted to shrink empty rows and\n    columns during layout computation instead of removing\n    them entirely."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed,\n    drag-and-pop positions it on the screen such that the\n    center of the layout’s bounding box is located at the\n    direct extension of the user’s current mouse motion.\n    The distance of the tip icon cluster to the user’s current\n    cursor position is configurable. For inexperienced\n    users, we got best results with distances of\n    around 100 pixels; shorter distances made these users\n    likely to overshoot the cluster. For more experienced\n    users, we were able to reduce the distance to\n    values around 30 pixels, which allowed these users\n    to operate drag-and-pop with less effort, in a more\n    “menu-like” fashion. In order to reduce visual interference\n    between tip icons and icons on the desktop,\n    drag-and-pop diminishes desktop icons while tip\n    icons are visible."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.3 The rubber band"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    When the tip icon cluster is displayed, users need to\n    re-identify their targets within the tip icon cluster in\n    order to be able to successfully acquire them.\n    Our first implementation of drag-and-pop created\n    tip icons on top of their bases and used slow-inslow-\n    out animation (Shneiderman 1998) to move tip\n    icons to their final location. While this approach\n    allowed users to locate the final position of the desired\n    tip icon by visually tracking it on its way from\n    basis to final position, it also required users to either\n    wait for the animation to complete or to acquire a\n    moving target. We therefore chose to abandon the\n    animation and immediately display tip icons at their\n    final destinations.\n    In lieu of the animation, we provided tip icons\n    with rubber bands. The design prototype of the rubber\n    band is shown in Figure 6. For performance reasons,\n    our prototype, which is shown in all other\n    screenshots, uses rubber bands of a lower level of\n    graphical detail, i.e., a tape and three lines in the\n    color scheme of the corresponding icon.\n    The purpose of the rubber band is to offer the\n    functionality of the animation, but without the problems\n    alluded to above. The rubber band, decorated\n    with the respective icon’s texture, can be thought of\n    as having been created by taking a photograph of the\n    tip icon animation with a very long shutter speed\n    (so-called motion blur, e.g., Dachille and Kaufman,\n    2000). Like the animation, the rubber band allows\n    users to trace the path from base to tip icon. However,\n    users can do this at their own pace and the customized\n    texturing of the rubber band allows users to\n    start tracing it anywhere, not only at the base."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The rubber band is provided with a narrow midriff\n    section, suggesting that the rubber band is elastic.\n    This design was chosen to help users understand\n    that tip icons have retracted to their bases when they\n    disappear at the end of the interaction. This feature\n    may also help users find their way to the tip icon\n    faster, because it provides users with a visual cue\n    about how far away the tip icon is located. A thick\n    rubber band section implies that the tip icon (or\n    base) is close; a thin rubber band section indicates\n    that the target is further away."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.4 Aborting drag-and-pop interactions"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    As soon as tip icons and rubber bands are shown on\n    the screen, drag-and-pop waits for the user to acquire\n    one of the tip icons to complete the ongoing\n    drag-and-pop or drag-and-pick interaction. There are\n    two cases, however, in which users will want to\n    abort the interaction without acquiring a tip icon.\n    The first case is when the user dragged the\n    mouse at a wrong angle so that the desired target\n    icon did not pop up. In this case, the user may either\n    drop the icon and try again or complete the interaction\n    as a regular drag-and-drop interaction, i.e., by\n    dropping the icon onto the target icon’s base instead.\n    The other case occurs if the user is intending to\n    perform a regular mouse drag operation, for example\n    to rearrange icons on the desktop or to capture a set\n    of icons using a lasso operation. For these cases,\n    drag-and-pop allows users to terminate tip icons onthe-\n    fly and to complete the interaction without dragand-\n    pop/pick. To abort, users have to move the\n    mouse cursor away from the tip icon cluster while\n    still keeping the mouse depressed. This can be done\n    by overshooting the cluster or by changing mouse\n    direction. In particular, this allows users to access\n    the underlying drag-and-drop and lasso-select functionality\n    by introducing a simple zigzag gesture into\n    their cursor path. The zigzag contains at least one motion segment moving away from the tip icons,\n    thus terminating tip icons as soon as they appear.\n    The algorithm: the tip icon cluster is kept alive as\n    long as at least one of the following three rules is\n    successful. The first rule checks whether the mouse\n    cursor has moved closer to the center of at least one\n    of the icons in the tip icon cluster. This rule makes\n    sure that the cluster does not disappear while users\n    approach their targets. The second rule checks if the\n    cursor is in the direct vicinity of an icon. This rule\n    provides tolerance against users overshooting a tip\n    icon while acquiring it. The third and last rule keeps\n    the cluster alive if the cursor is stationary or if it is\n    moving backwards very slowly (up to 5 pxl/frame).\n    This rule makes drag-and-pop insensitive to jitter.\n    Figure 7 illustrates the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5 User study"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    In this section, we report the results of a user study\n    comparing drag-and-pop with the traditional dragand-\n    drop technique. To examine the effects of bezelcrossing\n    as well as distance, as described in Scenarios\n    2 and 3, we chose to run the study on a tiled\n    wall-size display. During the study, in which participants\n    filed icons into folders or dragged them\n    onto the icons of matching applications, we recorded\n    the time and accuracy of these movements. Our\n    main hypothesis was that participants would perform\n    faster when using the drag-and-pop interface, primarily\n    because it would avoid the need for crossing\n    the bezels, but also because it would bridge the\n    space to very distant icons more efficiently.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.1 Desktop layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    To obtain a representative set of icon arrangements\n    for the study, we gathered desktop screenshots from\n    25 coworkers who volunteered their participation\n    (15 single, 6 dual, and 4 triple monitor users). Overall\n    resolutions ranged from 800,000 pixels to\n    3,900,000 pixels (66% more than the display wall\n    used in the experiment).\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We clustered the obtained desktops by number\n    of icons and arrangement pattern. Then we chose\n    representatives from each of the three resulting main\n    clusters for the study (Figure 8). The “sparse” desktop\n    reflected the desktops of roughly two thirds of\n    the participants. It contained only 11 icons, most of\n    which were lined up in the top left corner of the\n    screen. The “frame” desktop reflected the desktops\n    of three of the participants. It contained 28 icons\n    arranged around the top, left, and right edge of the\n    screen. The “cluttered” desktop, finally, contained\n    35 icons that were spread primarily across the top\n    and left half of the screen. Five participants had chosen\n    this style of arranging their icons.\n    Icon layouts were stretched to fit the aspect ratio\n    of the display wall used in the experiment. An area\n    at the bottom right of the screen was reserved for the\n    starting locations of the icons to be filed during the\n    study (dashed shape in Figure 8)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.2 Participants"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Eight colleagues with no experience using drag-andpop\n    were recruited for this experiment. Due to technical\n    problems, the data from one of these participants\n    had to be dropped leaving us with 7. There\n    were 2 female and 5 male participants ranging in age\n    between 18 and 35. All were right handed with normal\n    or corrected-to-normal vision."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.3 Method"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    The test was run on the DynaWall (Streitz, 2001), a\n    display wall consisting of three Smartboard units\n    (Figure 9). Each Smartboard consisted of a backprojected\n    72”display with resistive touch input, so\n    that the entire display was 15’ (4.50m) long and 45” (1.12m) high. Display units could be operated by\n    touching the display, but for easier handling participants\n    were provided with color-free felt pens. Each\n    of the three display units ran at a resolution of\n    1024x768 pixels, offering an overall resolution of\n    3072x768 pixels. The three display units were connected\n    to a single PC equipped with two Matrox\n    Millennium graphics cards and running WindowsXP.\n    During the experiment, the DynaWall ran\n    a simulated Windows desktop. We compared dragand-\n    pop to a control condition of drag-and-drop.\n    Since our preliminary Windows-based version of\n    drag-and-pop did not support the full functionality\n    required for the study, we implemented a simulation\n    using Macromedia Flash (www.macromedia.com).\n    The drag-and-pop interface used in the experiment\n    was configured to a  30 degree target sector, 35\n    pixel target distance, and a maximum number of 5\n    tip icons.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    To each desktop layout we added 10 document\n    icons in the lower right quadrant of the screen.\n    These appeared in six different arrangements (Figure\n    8 shows 2 of them). The participants’ task was to\n    drag these icons into a given target folder or application.\n    Icons of image files, for example, were to be\n    filed in a folder labeled “My Pictures” and all Word\n    documents should be dropped onto the Word application.\n    To counterbalance for order effects, we required\n    participants to file the documents in a randomized\n    order. That is, for each movement, the item\n    to be filed was highlighted along with the target\n    icon. All other document icons were frozen, so that\n    participants could only move the highlighted icon.\n    As soon as participants began moving an item, all\n    highlighting was removed, forcing participants to\n    remember the destination item. We did this to assure\n    that participants would have to re-identify tip icons\n    when using the drag-and-pop interface, just as they\n    would in a real-world task.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants were allowed several minutes to\n    practice moving and filing icons in the prototype to\n    get them accustomed to both the DynaWall display\n    and the drag-and-pop interface. Once it was clear\n    that users understood how to use the display and the\n    interfaces, they were allowed to go on to the study.\n    Participants filed 2 sets of icons for each interface\n    (drag-and-pop and control), for each of the three\n    desktops. Thus participants filed 2 x 10 icons x 2\n    interface x 3 desktops for a total of 120 movements.\n    To mitigate learning effects associated with new\n    desktop arrangements or a new interface, we omitted\n    the first 5 trials for any desktop-interface combination\n    from our analyses, yielding ~15 correct trials\n    per cell or 90 movements per participant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4 Results\n    5.4.1 Task performance\n    Task performance was evaluated through speed and\n    accuracy measurements. Error rates were considerably\n    larger for drag-and-pop than for the control\n    (6.7% vs. 1%). We observed two things that made\n    this type of error more likely in the drag-and-pop\n    condition. First, in the drag-and-pop condition candidate\n    targets were brought closer together, making\n    it easier to accidentally drop an item on the wrong\n    target. Second, because drag-and-pop targets had\n    been translated away from their “home” location,\n    participants would sometimes forget which item was\n    in fact the target, especially if visually similar icons\n    (e.g., other folders) had created tip icons as well.\n    All data analyses for movement times were performed\n    on the median movement times for each participant\n    in each condition to normalize the typical\n    skewing associated with response time data. Summary\n    statistics report the means of these times.\n    Target icons could be located in the same display\n    unit as the icon to be filed, in a neighbor display\n    unit, or in the display unit at the other end of the\n    display wall, requiring users to cross 0, 1, or 2 bezels\n    in order to file the icon. To test the effect of\n    bezel crossing on performance, we ran a 2 (Condition)\n    x 3 (Bezels Crossed) within subjects ANOVA\n    on the median movement data. This revealed a significant\n    main effect for condition, F(1,6) = 18.2,\n    p<\\0.01 Collapsed across all distances, drag-and-pop was significantly faster than the control. There was also a\n        significant main effect of bezels crossed, F(2,12)=19.5, p<\\0.01; movement time increased as the number of\n        bezels participants had to cross to get to the target icon increased. As hypothesized, we also saw a significant\n        interaction between condition and number of bezels crossed, F(2,12)=15.2, p<\\0.01. As seen in Figure 10, an\n        increase in the number of crossed bezels resulted in only a small increase in movement time for drag-and-pop,\n        whereas it had a huge effect for the control interface. When no bezels had to be crossed, drag-and-pop appeared\n        to be slightly slower than control, although follow-up t-tests showed that this difference was not significant,\n        t(6)=1.73, ns. When 1 or 2 bezels had to be crossed, drag-and-pop was significantly faster than drag-and-drop\n        (t(6)=4.02, p<\\0.01 & t(6)=4.12, p<\\0.01, respectively). With 1 bezel crossed, dragand- pop was twice as fast as\n        the control and with 2 bezels it was 3.7 times as fast. "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 11 shows a scatter plot of movement time\n            versus target distance for both conditions. The best\n            linear fit for drag-and-drop was f(x)=0.007x-1.76,\n            r2=0.23. The linear fit for drag-and-pop was\n            f(x)=4.19, r2<\\0.0001. This reinforces what can be seen in Figure 10—movement time increases with distance\n                for the control interface, but stays relatively constant for the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4.2 Questionnaire and subjective feedback\n                    At the end of the study, participants answered a\n                    short questionnaire about their experience using the\n                    DynaWall and drag-and-pop. Participants were very\n                    enthusiastic about drag-and-pop. On a 7 point Likert\n                    scale (where 7=strongly agree and 1=strongly disagree),\n                    there was a mean > 6 for questions such as,\n                    “I liked using drag-and-pop”, “I always understood\n                    what was happening when drag-and-pop was on,”and “I would use drag-and-pop for large displays.”\n                    There was a mean of less than 3 for “It took a long\n                    time to get used to drag-and-pop” and “It was hard\n                    to control what the targets did when drag-and-pop\n                    was on.” Participants reported the drag-and-pop\n                    interface to cause less manual stress and fatigue than\n                    the control interface.\n                    The most common problem with drag-and-pop\n                    was in getting the right group of targets to pop up,\n                    and several participants requested a wider angle for\n                    destination targets. This relates to an observation we\n                    made about how people interact with touch-sensitive\n                    wall-displays. On the wall display, participants had\n                    to employ their whole arm to make a movement,\n                    resulting in targeting motions in the shape of arcs.\n                    This means that the initial direction of the movement\n                    was not in the direction of the target. To accommodate\n                    such arcs in the future, we have adapted the\n                    target selection algorithm of drag-and-pop by giving\n                    the target sector extra tolerance for movements towards\n                    the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"6 Conclusions and future work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n                    The substantial time-savings found in the user study\n                    confirm our expectations. Although when used\n                    within a single screen unit drag-and-pop does not\n                    seem to by faster than traditional drag and drop (first\n                    pair of bars in Figure 10; drag-and-pop’s capability\n                    of bridging distance to the target seems to be nullified\n                    by the need for re-orientation), its advantages\n                    on very large screens and its capability of bridging\n                    across display units are apparent. On the usability\n                    side, we were glad to see that participants had no\n                    trouble learning how to use the technique and that\n                    they described the technique as understandable and\n                    predictable. The single biggest shortcoming, the\n                    target selection, is the subjects of current work. In\n                    addition to the changes described above, we consider\n                    dropping the notion of a fixed target sector size\n                    and replace it with a mechanism that adjusts the sector\n                    size dynamically based on the number of matching\n                    targets.\n                    Given the recent advent of commercially available\n                    tablet computers, our next step will be to explore\n                    how drag-and-pop and especially drag-andpick\n                    can help tablet computer users work with external\n                    monitors. While this paper focused on icons, we\n                    plan to explore ways of operating menus, sliders,\n                    and entire applications using the techniques described\n                    in this article."}]}],"_id":"inIfOVIZq7w4uClu"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n    "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing\n    remote screen content on touch- and pen-operated systems\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated\n        display systems. They provide users with access to screen content that would otherwise be impossible\n        or hard to reach, e.g., because it is located behind a bezel or far away from the user. Drag-and-pop is an extension\n        of traditional drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop\n        responds by temporarily moving potential target icons towards the user’s current cursor location, thereby allowing\n        the user to interact with these icons using comparably small hand movements. Drag-and-Pick extends the\n        drag-and-pop interaction style such that it allows activating icons, e.g., to open folders or launch applications.\n        In\n        this paper, we report the results of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’\n        (4.50m) wide interactive display wall. Participants where able to file icons up to 3.7 times faster when using the\n        drag-and-pop interface.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen,\n        heterogeneous display.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    With the emergence of pen- and touch-operated personal\n    digital assistants (PDAs), tablet computers,\n    and wall-size displays (e.g., Liveboard, Elrod et al.,\n    1992; Smartboard, http://www.smarttech.com),\n    touch and pen input have gained popularity. Over\n    the past years, more complex display systems have\n    been created by combining multiple such display\n    units. Wall-size touch displays have been combined\n    into display walls, such as the DynaWall (Streitz\n    2001), or the iRoom Smartboard wall (Johanson,\n    2002b). Recent PDAs and tablet computers allow\n    connecting additional displays, such as another tablet\n    or a monitor in order to extend the device’s internal\n    display space.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple\n    display units bring up a new class of input challenges\n    that cannot always be solved with existing\n    techniques, because many of the existing techniques\n    were designed for indirect input devices, such as\n    mice, track pads, or joysticks. Indirect input devices\n    can be used on arbitrary display configurations, because\n    they can simply be mapped to the respective\n    topology (e.g., PointRight, Johanson 2002a). Touch/\n    pen input, however, is based on the immediate correspondence between input space and display\n    space and thus requires users to adapt their input\n    behavior to the physicality of the display system.\n    Here are three examples where this can become\n    problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 1: External monitors. One or more display\n    units within a display system may not be\n    equipped with a touch or pen sensor. Connecting an\n    external monitor to a tablet computer or PDA, for\n    example, allows users to see more material, but requires\n    them to use an indirect input device, such as a\n    mouse, when interacting with content on the external\n    monitor. Since some tablet-specific tasks, such as\n    scribbling, are hard to accomplish with a mouse,\n    users find themselves continuously switching between\n    pen and mouse."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 2: Interactions across display units.\n    Some interaction techniques, such as drag-and-drop,\n    require users to interact with two or more icons in a\n    single pen-down interaction. If these icons are distributed\n    across physically separate pen/touch input\n    display units, users first have to bring all involved\n    icons to the same display unit, a potentially timeconsuming\n    activity (Figure 2a-c)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 3: Bridging long distances. Accessing\n    icons located far away from the user, e.g., on the\n    opposite side of a 15’ DynaWall, requires users to\n    physically walk over, the time for which may in\n    some circumstances increase linearly with distance\n    (Guiard et at, 2001). In addition, drag interactions\n    get more error-prone with distance, because users\n    drop objects accidentally when failing to continuously\n    keep the pen tip in contact with the display\n    surface (Rekimoto 1997)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"2 Drag-and-pop & drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-pop and drag-and-pick are interaction\n    techniques that address these issues. We will begin\n    by giving an overview; more detailed descriptions of\n    both techniques can be found in Section 4"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"extends traditional drag-and-drop\n    as illustrated by Figure 1. (a) The user intends to\n    delete a Word memo by dragging it into the recycle\n    bin. (b) As the user starts dragging the memo’s icon\n    towards the recycle bin, icons that are of compatible\n    type and located in the direction of the user’s drag\n    motion “pop up”. This means that for each of these\n    icons a link icon is created (tip icon) that appears in\n    front of the user’s cursor. Tip icons are connected to\n    the original icon (base icon) using a rubber band.\n    (c) The user drags the memo over the recycle bin\n    and releases the mouse button. The recycle bin accepts\n    the memo. Alternatively, the user could have\n    dropped the memo over the word processor or the\n    web browser icon, which would have launched the\n    respective application with the memo. (d) When the\n    user drops the icon, all tip icons disappear instantly.\n    Figure 2d shows how drag-and-pop simplifies\n    dropping icons onto targets located at the other side"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction\n    concept such that it allows activating icons,\n    e.g., to open a folder or to launch a program. While\n    drag-and-pop is initiated by the user dragging an\n    icon, drag-and-pick starts with the user performing a\n    drag interaction on empty screen space. The system’s\n    response to this drag interaction is similar to\n    drag-and-pop, but with two differences. First, all\n    icons located in the direction of the drag motion will\n    pop up, not only those of compatible type (Figure 3).\n    Second, as the user drags the mouse cursor over one\n    of the targets and releases the mouse button, the\n    folder, file, or application associated with the icon is\n    activated as if it had been double clicked.\n    Figure 4 shows how this allows users to use the\n    pen for launching an application, the icon of which\n    is located on a monitor not supporting pen input.\n    In principle, drag-and-pick can be applied to any\n    type of widget, e.g., any buttons and menus located\n    on a non-pen accessible monitor. In this paper, however,\n    we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"3 Related work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-drop is a well-know interaction technique\n    for transferring or copying information using a\n    pointing device, while avoiding the use of a hidden\n    clipboard (Wagner, 1995; Beaudouin-Lafon, 2000).\n    Hyperdragging (Rekimoto, 1999), allows extending\n    drag-and-drop across physically separate displays\n    (Scenario 2), but requires an indirect input device,\n    such as a mouse. Most techniques compatible with\n    pen usage are based on point-and-click, e.g., pickand-\n    drop (Rekimoto, 1997) and take-and-put (Streitz\n    et al., 2001). These techniques, however, cannot be\n    used to access material on a display unit not providing\n    pen support (Scenario 1)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A different set of interaction techniques have\n    been proposed to help users overcome large distances\n    (Scenario 3). Manual And Gaze Input Cascaded\n    (MAGIC) pointing (Zhai et al., 1999) uses eye\n    tracking to move the cursor to the target area, from\n    where the user guides the cursor manually (which\n    requires an indirect input device). Gesture input\n    techniques allow selecting a target and a command\n    in a single interaction and are generally compatible\n    with pen input (Rubine, 1991). ‘Throwing’ allows users to accelerate an object with a small gesture; the\n    object then continues its trajectory based on its inertia\n    (Gei ler, 1998). The imprecision of human motor\n    skills has prevented throwing from being used\n    for reliable target acquisition. Myers et al. (2002)\n    used laser pointers to acquire targets on a Smartboard,\n    but found them to be slower than touch input.\n    A variety of mouse-based interaction techniques\n    use destination prediction to simplify navigation\n    (e.g., Jul, 2002). Dulberg et al. (1999) proposed a\n    flying click or flick for snapping the mouse to target\n    locations. Swaminathan and Sato (1997) proposed\n    making relevant controls on the screen “sticky”.\n    As an alternative way of launching applications,\n    today’s operating systems offer menus containing\n    lists of available application or documents. A ‘send\n    to’ option (Microsoft Windows) allows sending an\n    icon to a target selected from a predefined list.\n    Compared to 2D desktops, which typically use a\n    larger amount of screen space than pull-down or\n    pop-up menus, menus are limited to a smaller selection\n    of choices unless they use a hierarchical menu\n    organization, which makes their usage less transparent\n    and often less efficient. Furthermore, invoking a\n    content-menu may require hitting a qualifier key,\n    which can be problematic on touch-based systems."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4 Design and algorithms"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    In this section, we will take a more detailed look at\n    the design and algorithms behind drag-and-pop/pick.\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.1 Selecting candidates"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    In order to reduce clutter, drag-and-pop creates tip\n    icons only for a subset of the icons on the screen.\n    Drag-and-pop’s candidate selection algorithm is\n    initialized with the entire set of icons on the screen;\n    it then successively eliminates candidates using the\n    following four rules.\n    First, icons of incompatible type are eliminated.\n    If the user drags a text file, the icon of a text processor\n    can create a tip icon; the recycle bin icon can\n    create a tip icon; the icon of another text file, however,\n    cannot, because dragging two text files onto\n    each other is usually not associated with any behavior.\n    Drag-and-pick bypasses this selection step in\n    order to allow users to activate any type of icon.\n    Second, icons located between the cursor and the\n    location where the tip icons cluster will appear (see\n    following section) are eliminated. This rule avoids\n    creating tip icons that move away from the cursor.\n    Third, only icons that are located within a certain\n    angle from the initial drag direction (the target sector)\n    are considered. The initial drag direction is determined\n    the moment the user drags an icon further than a given threshold (default 15 pixels). During\n    preliminary testing on a Smartboard, we got good\n    results with first-time users when using sector sizes\n    of  30 to  45 degrees. The sector size could be reduced\n    to sector sizes of  20 degrees as users gained\n    more experience.\n    Forth, if the number of qualifying icons is above\n    some hard limit, drag-and-pop eliminates tip icon\n    candidates until the hard limit is met. Icons are removed\n    in an order starting at the outside of the target\n    sector moving inwards. This rule assures the scalability\n    of drag-and-pop to densely populated displays,\n    but requires drag-and-pop users working with\n    densely populated screens to aim more precisely.\n    We typically use hard limits between 5 and 10.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.2 Computing the tip icon layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Once tip icon candidates have been selected, dragand-\n    pop determines where on the screen to place the\n    tip icons. In order to avoid interference between tip\n    icons, the location of all tip icons is computed in a\n    centralized fashion.\n    Our drag-and-pop prototype uses the following\n    algorithm that is illustrated by Figure 5: (1) Snap\n    icons to a grid and store them in a two-dimensional\n    array, with each array element representing one cell\n    of the grid. If two or more icons fall into the same\n    cell, refine the grid. (2) Shrink the icon layout by\n    eliminating all array columns and rows that contain\n    no icons. (3) Translate icon positions back to 2D\n    space by mapping the array onto a regular grid. By\n    default, the output grid is chosen to be slightly\n    tighter than the input grid, which gives extra compression.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We chose this algorithm, because it preserves\n    alignment, proximity, and spatial arrangement between\n    icons, which allows users to use their spatial\n    memory when identifying the desired target within\n    the tip icon cluster. This is especially useful when\n    tip icons look alike (e.g., a folder in a cluster of\n    folders). In order to help users distinguish local icon clusters from surrounding icons more easily, the\n    algorithm may be adjusted to shrink empty rows and\n    columns during layout computation instead of removing\n    them entirely."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed,\n    drag-and-pop positions it on the screen such that the\n    center of the layout’s bounding box is located at the\n    direct extension of the user’s current mouse motion.\n    The distance of the tip icon cluster to the user’s current\n    cursor position is configurable. For inexperienced\n    users, we got best results with distances of\n    around 100 pixels; shorter distances made these users\n    likely to overshoot the cluster. For more experienced\n    users, we were able to reduce the distance to\n    values around 30 pixels, which allowed these users\n    to operate drag-and-pop with less effort, in a more\n    “menu-like” fashion. In order to reduce visual interference\n    between tip icons and icons on the desktop,\n    drag-and-pop diminishes desktop icons while tip\n    icons are visible."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.3 The rubber band"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    When the tip icon cluster is displayed, users need to\n    re-identify their targets within the tip icon cluster in\n    order to be able to successfully acquire them.\n    Our first implementation of drag-and-pop created\n    tip icons on top of their bases and used slow-inslow-\n    out animation (Shneiderman 1998) to move tip\n    icons to their final location. While this approach\n    allowed users to locate the final position of the desired\n    tip icon by visually tracking it on its way from\n    basis to final position, it also required users to either\n    wait for the animation to complete or to acquire a\n    moving target. We therefore chose to abandon the\n    animation and immediately display tip icons at their\n    final destinations.\n    In lieu of the animation, we provided tip icons\n    with rubber bands. The design prototype of the rubber\n    band is shown in Figure 6. For performance reasons,\n    our prototype, which is shown in all other\n    screenshots, uses rubber bands of a lower level of\n    graphical detail, i.e., a tape and three lines in the\n    color scheme of the corresponding icon.\n    The purpose of the rubber band is to offer the\n    functionality of the animation, but without the problems\n    alluded to above. The rubber band, decorated\n    with the respective icon’s texture, can be thought of\n    as having been created by taking a photograph of the\n    tip icon animation with a very long shutter speed\n    (so-called motion blur, e.g., Dachille and Kaufman,\n    2000). Like the animation, the rubber band allows\n    users to trace the path from base to tip icon. However,\n    users can do this at their own pace and the customized\n    texturing of the rubber band allows users to\n    start tracing it anywhere, not only at the base."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The rubber band is provided with a narrow midriff\n    section, suggesting that the rubber band is elastic.\n    This design was chosen to help users understand\n    that tip icons have retracted to their bases when they\n    disappear at the end of the interaction. This feature\n    may also help users find their way to the tip icon\n    faster, because it provides users with a visual cue\n    about how far away the tip icon is located. A thick\n    rubber band section implies that the tip icon (or\n    base) is close; a thin rubber band section indicates\n    that the target is further away."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.4 Aborting drag-and-pop interactions"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    As soon as tip icons and rubber bands are shown on\n    the screen, drag-and-pop waits for the user to acquire\n    one of the tip icons to complete the ongoing\n    drag-and-pop or drag-and-pick interaction. There are\n    two cases, however, in which users will want to\n    abort the interaction without acquiring a tip icon.\n    The first case is when the user dragged the\n    mouse at a wrong angle so that the desired target\n    icon did not pop up. In this case, the user may either\n    drop the icon and try again or complete the interaction\n    as a regular drag-and-drop interaction, i.e., by\n    dropping the icon onto the target icon’s base instead.\n    The other case occurs if the user is intending to\n    perform a regular mouse drag operation, for example\n    to rearrange icons on the desktop or to capture a set\n    of icons using a lasso operation. For these cases,\n    drag-and-pop allows users to terminate tip icons onthe-\n    fly and to complete the interaction without dragand-\n    pop/pick. To abort, users have to move the\n    mouse cursor away from the tip icon cluster while\n    still keeping the mouse depressed. This can be done\n    by overshooting the cluster or by changing mouse\n    direction. In particular, this allows users to access\n    the underlying drag-and-drop and lasso-select functionality\n    by introducing a simple zigzag gesture into\n    their cursor path. The zigzag contains at least one motion segment moving away from the tip icons,\n    thus terminating tip icons as soon as they appear.\n    The algorithm: the tip icon cluster is kept alive as\n    long as at least one of the following three rules is\n    successful. The first rule checks whether the mouse\n    cursor has moved closer to the center of at least one\n    of the icons in the tip icon cluster. This rule makes\n    sure that the cluster does not disappear while users\n    approach their targets. The second rule checks if the\n    cursor is in the direct vicinity of an icon. This rule\n    provides tolerance against users overshooting a tip\n    icon while acquiring it. The third and last rule keeps\n    the cluster alive if the cursor is stationary or if it is\n    moving backwards very slowly (up to 5 pxl/frame).\n    This rule makes drag-and-pop insensitive to jitter.\n    Figure 7 illustrates the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5 User study"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    In this section, we report the results of a user study\n    comparing drag-and-pop with the traditional dragand-\n    drop technique. To examine the effects of bezelcrossing\n    as well as distance, as described in Scenarios\n    2 and 3, we chose to run the study on a tiled\n    wall-size display. During the study, in which participants\n    filed icons into folders or dragged them\n    onto the icons of matching applications, we recorded\n    the time and accuracy of these movements. Our\n    main hypothesis was that participants would perform\n    faster when using the drag-and-pop interface, primarily\n    because it would avoid the need for crossing\n    the bezels, but also because it would bridge the\n    space to very distant icons more efficiently.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.1 Desktop layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    To obtain a representative set of icon arrangements\n    for the study, we gathered desktop screenshots from\n    25 coworkers who volunteered their participation\n    (15 single, 6 dual, and 4 triple monitor users). Overall\n    resolutions ranged from 800,000 pixels to\n    3,900,000 pixels (66% more than the display wall\n    used in the experiment).\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We clustered the obtained desktops by number\n    of icons and arrangement pattern. Then we chose\n    representatives from each of the three resulting main\n    clusters for the study (Figure 8). The “sparse” desktop\n    reflected the desktops of roughly two thirds of\n    the participants. It contained only 11 icons, most of\n    which were lined up in the top left corner of the\n    screen. The “frame” desktop reflected the desktops\n    of three of the participants. It contained 28 icons\n    arranged around the top, left, and right edge of the\n    screen. The “cluttered” desktop, finally, contained\n    35 icons that were spread primarily across the top\n    and left half of the screen. Five participants had chosen\n    this style of arranging their icons.\n    Icon layouts were stretched to fit the aspect ratio\n    of the display wall used in the experiment. An area\n    at the bottom right of the screen was reserved for the\n    starting locations of the icons to be filed during the\n    study (dashed shape in Figure 8)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.2 Participants"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Eight colleagues with no experience using drag-andpop\n    were recruited for this experiment. Due to technical\n    problems, the data from one of these participants\n    had to be dropped leaving us with 7. There\n    were 2 female and 5 male participants ranging in age\n    between 18 and 35. All were right handed with normal\n    or corrected-to-normal vision."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.3 Method"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    The test was run on the DynaWall (Streitz, 2001), a\n    display wall consisting of three Smartboard units\n    (Figure 9). Each Smartboard consisted of a backprojected\n    72”display with resistive touch input, so\n    that the entire display was 15’ (4.50m) long and 45” (1.12m) high. Display units could be operated by\n    touching the display, but for easier handling participants\n    were provided with color-free felt pens. Each\n    of the three display units ran at a resolution of\n    1024x768 pixels, offering an overall resolution of\n    3072x768 pixels. The three display units were connected\n    to a single PC equipped with two Matrox\n    Millennium graphics cards and running WindowsXP.\n    During the experiment, the DynaWall ran\n    a simulated Windows desktop. We compared dragand-\n    pop to a control condition of drag-and-drop.\n    Since our preliminary Windows-based version of\n    drag-and-pop did not support the full functionality\n    required for the study, we implemented a simulation\n    using Macromedia Flash (www.macromedia.com).\n    The drag-and-pop interface used in the experiment\n    was configured to a  30 degree target sector, 35\n    pixel target distance, and a maximum number of 5\n    tip icons.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    To each desktop layout we added 10 document\n    icons in the lower right quadrant of the screen.\n    These appeared in six different arrangements (Figure\n    8 shows 2 of them). The participants’ task was to\n    drag these icons into a given target folder or application.\n    Icons of image files, for example, were to be\n    filed in a folder labeled “My Pictures” and all Word\n    documents should be dropped onto the Word application.\n    To counterbalance for order effects, we required\n    participants to file the documents in a randomized\n    order. That is, for each movement, the item\n    to be filed was highlighted along with the target\n    icon. All other document icons were frozen, so that\n    participants could only move the highlighted icon.\n    As soon as participants began moving an item, all\n    highlighting was removed, forcing participants to\n    remember the destination item. We did this to assure\n    that participants would have to re-identify tip icons\n    when using the drag-and-pop interface, just as they\n    would in a real-world task.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants were allowed several minutes to\n    practice moving and filing icons in the prototype to\n    get them accustomed to both the DynaWall display\n    and the drag-and-pop interface. Once it was clear\n    that users understood how to use the display and the\n    interfaces, they were allowed to go on to the study.\n    Participants filed 2 sets of icons for each interface\n    (drag-and-pop and control), for each of the three\n    desktops. Thus participants filed 2 x 10 icons x 2\n    interface x 3 desktops for a total of 120 movements.\n    To mitigate learning effects associated with new\n    desktop arrangements or a new interface, we omitted\n    the first 5 trials for any desktop-interface combination\n    from our analyses, yielding ~15 correct trials\n    per cell or 90 movements per participant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4 Results\n    5.4.1 Task performance\n    Task performance was evaluated through speed and\n    accuracy measurements. Error rates were considerably\n    larger for drag-and-pop than for the control\n    (6.7% vs. 1%). We observed two things that made\n    this type of error more likely in the drag-and-pop\n    condition. First, in the drag-and-pop condition candidate\n    targets were brought closer together, making\n    it easier to accidentally drop an item on the wrong\n    target. Second, because drag-and-pop targets had\n    been translated away from their “home” location,\n    participants would sometimes forget which item was\n    in fact the target, especially if visually similar icons\n    (e.g., other folders) had created tip icons as well.\n    All data analyses for movement times were performed\n    on the median movement times for each participant\n    in each condition to normalize the typical\n    skewing associated with response time data. Summary\n    statistics report the means of these times.\n    Target icons could be located in the same display\n    unit as the icon to be filed, in a neighbor display\n    unit, or in the display unit at the other end of the\n    display wall, requiring users to cross 0, 1, or 2 bezels\n    in order to file the icon. To test the effect of\n    bezel crossing on performance, we ran a 2 (Condition)\n    x 3 (Bezels Crossed) within subjects ANOVA\n    on the median movement data. This revealed a significant\n    main effect for condition, F(1,6) = 18.2,\n    p<\\0.01 Collapsed across all distances, drag-and-pop was significantly faster than the control. There was also a\n        significant main effect of bezels crossed, F(2,12)=19.5, p<\\0.01; movement time increased as the number of\n        bezels participants had to cross to get to the target icon increased. As hypothesized, we also saw a significant\n        interaction between condition and number of bezels crossed, F(2,12)=15.2, p<\\0.01. As seen in Figure 10, an\n        increase in the number of crossed bezels resulted in only a small increase in movement time for drag-and-pop,\n        whereas it had a huge effect for the control interface. When no bezels had to be crossed, drag-and-pop appeared\n        to be slightly slower than control, although follow-up t-tests showed that this difference was not significant,\n        t(6)=1.73, ns. When 1 or 2 bezels had to be crossed, drag-and-pop was significantly faster than drag-and-drop\n        (t(6)=4.02, p<\\0.01 & t(6)=4.12, p<\\0.01, respectively). With 1 bezel crossed, dragand- pop was twice as fast as\n        the control and with 2 bezels it was 3.7 times as fast. "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 11 shows a scatter plot of movement time\n            versus target distance for both conditions. The best\n            linear fit for drag-and-drop was f(x)=0.007x-1.76,\n            r2=0.23. The linear fit for drag-and-pop was\n            f(x)=4.19, r2<\\0.0001. This reinforces what can be seen in Figure 10—movement time increases with distance\n                for the control interface, but stays relatively constant for the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4.2 Questionnaire and subjective feedback\n                    At the end of the study, participants answered a\n                    short questionnaire about their experience using the\n                    DynaWall and drag-and-pop. Participants were very\n                    enthusiastic about drag-and-pop. On a 7 point Likert\n                    scale (where 7=strongly agree and 1=strongly disagree),\n                    there was a mean > 6 for questions such as,\n                    “I liked using drag-and-pop”, “I always understood\n                    what was happening when drag-and-pop was on,”and “I would use drag-and-pop for large displays.”\n                    There was a mean of less than 3 for “It took a long\n                    time to get used to drag-and-pop” and “It was hard\n                    to control what the targets did when drag-and-pop\n                    was on.” Participants reported the drag-and-pop\n                    interface to cause less manual stress and fatigue than\n                    the control interface.\n                    The most common problem with drag-and-pop\n                    was in getting the right group of targets to pop up,\n                    and several participants requested a wider angle for\n                    destination targets. This relates to an observation we\n                    made about how people interact with touch-sensitive\n                    wall-displays. On the wall display, participants had\n                    to employ their whole arm to make a movement,\n                    resulting in targeting motions in the shape of arcs.\n                    This means that the initial direction of the movement\n                    was not in the direction of the target. To accommodate\n                    such arcs in the future, we have adapted the\n                    target selection algorithm of drag-and-pop by giving\n                    the target sector extra tolerance for movements towards\n                    the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"6 Conclusions and future work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n                    The substantial time-savings found in the user study\n                    confirm our expectations. Although when used\n                    within a single screen unit drag-and-pop does not\n                    seem to by faster than traditional drag and drop (first\n                    pair of bars in Figure 10; drag-and-pop’s capability\n                    of bridging distance to the target seems to be nullified\n                    by the need for re-orientation), its advantages\n                    on very large screens and its capability of bridging\n                    across display units are apparent. On the usability\n                    side, we were glad to see that participants had no\n                    trouble learning how to use the technique and that\n                    they described the technique as understandable and\n                    predictable. The single biggest shortcoming, the\n                    target selection, is the subjects of current work. In\n                    addition to the changes described above, we consider\n                    dropping the notion of a fixed target sector size\n                    and replace it with a mechanism that adjusts the sector\n                    size dynamically based on the number of matching\n                    targets.\n                    Given the recent advent of commercially available\n                    tablet computers, our next step will be to explore\n                    how drag-and-pop and especially drag-andpick\n                    can help tablet computer users work with external\n                    monitors. While this paper focused on icons, we\n                    plan to explore ways of operating menus, sliders,\n                    and entire applications using the techniques described\n                    in this article."}]}],"_id":"nMkJlX9jG2GjYz09"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n    "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing\n    remote screen content on touch- and pen-operated systems\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated\n        display systems. They provide users with access to screen content that would otherwise be impossible\n        or hard to reach, e.g., because it is located behind a bezel or far away from the user. Drag-and-pop is an extension\n        of traditional drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop\n        responds by temporarily moving potential target icons towards the user’s current cursor location, thereby allowing\n        the user to interact with these icons using comparably small hand movements. Drag-and-Pick extends the\n        drag-and-pop interaction style such that it allows activating icons, e.g., to open folders or launch applications.\n        In\n        this paper, we report the results of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’\n        (4.50m) wide interactive display wall. Participants where able to file icons up to 3.7 times faster when using the\n        drag-and-pop interface.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen,\n        heterogeneous display.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    With the emergence of pen- and touch-operated personal\n    digital assistants (PDAs), tablet computers,\n    and wall-size displays (e.g., Liveboard, Elrod et al.,\n    1992; Smartboard, http://www.smarttech.com),\n    touch and pen input have gained popularity. Over\n    the past years, more complex display systems have\n    been created by combining multiple such display\n    units. Wall-size touch displays have been combined\n    into display walls, such as the DynaWall (Streitz\n    2001), or the iRoom Smartboard wall (Johanson,\n    2002b). Recent PDAs and tablet computers allow\n    connecting additional displays, such as another tablet\n    or a monitor in order to extend the device’s internal\n    display space.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple\n    display units bring up a new class of input challenges\n    that cannot always be solved with existing\n    techniques, because many of the existing techniques\n    were designed for indirect input devices, such as\n    mice, track pads, or joysticks. Indirect input devices\n    can be used on arbitrary display configurations, because\n    they can simply be mapped to the respective\n    topology (e.g., PointRight, Johanson 2002a). Touch/\n    pen input, however, is based on the immediate correspondence between input space and display\n    space and thus requires users to adapt their input\n    behavior to the physicality of the display system.\n    Here are three examples where this can become\n    problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 1: External monitors. One or more display\n    units within a display system may not be\n    equipped with a touch or pen sensor. Connecting an\n    external monitor to a tablet computer or PDA, for\n    example, allows users to see more material, but requires\n    them to use an indirect input device, such as a\n    mouse, when interacting with content on the external\n    monitor. Since some tablet-specific tasks, such as\n    scribbling, are hard to accomplish with a mouse,\n    users find themselves continuously switching between\n    pen and mouse."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 2: Interactions across display units.\n    Some interaction techniques, such as drag-and-drop,\n    require users to interact with two or more icons in a\n    single pen-down interaction. If these icons are distributed\n    across physically separate pen/touch input\n    display units, users first have to bring all involved\n    icons to the same display unit, a potentially timeconsuming\n    activity (Figure 2a-c)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 3: Bridging long distances. Accessing\n    icons located far away from the user, e.g., on the\n    opposite side of a 15’ DynaWall, requires users to\n    physically walk over, the time for which may in\n    some circumstances increase linearly with distance\n    (Guiard et at, 2001). In addition, drag interactions\n    get more error-prone with distance, because users\n    drop objects accidentally when failing to continuously\n    keep the pen tip in contact with the display\n    surface (Rekimoto 1997)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"2 Drag-and-pop & drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-pop and drag-and-pick are interaction\n    techniques that address these issues. We will begin\n    by giving an overview; more detailed descriptions of\n    both techniques can be found in Section 4"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"extends traditional drag-and-drop\n    as illustrated by Figure 1. (a) The user intends to\n    delete a Word memo by dragging it into the recycle\n    bin. (b) As the user starts dragging the memo’s icon\n    towards the recycle bin, icons that are of compatible\n    type and located in the direction of the user’s drag\n    motion “pop up”. This means that for each of these\n    icons a link icon is created (tip icon) that appears in\n    front of the user’s cursor. Tip icons are connected to\n    the original icon (base icon) using a rubber band.\n    (c) The user drags the memo over the recycle bin\n    and releases the mouse button. The recycle bin accepts\n    the memo. Alternatively, the user could have\n    dropped the memo over the word processor or the\n    web browser icon, which would have launched the\n    respective application with the memo. (d) When the\n    user drops the icon, all tip icons disappear instantly.\n    Figure 2d shows how drag-and-pop simplifies\n    dropping icons onto targets located at the other side"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction\n    concept such that it allows activating icons,\n    e.g., to open a folder or to launch a program. While\n    drag-and-pop is initiated by the user dragging an\n    icon, drag-and-pick starts with the user performing a\n    drag interaction on empty screen space. The system’s\n    response to this drag interaction is similar to\n    drag-and-pop, but with two differences. First, all\n    icons located in the direction of the drag motion will\n    pop up, not only those of compatible type (Figure 3).\n    Second, as the user drags the mouse cursor over one\n    of the targets and releases the mouse button, the\n    folder, file, or application associated with the icon is\n    activated as if it had been double clicked.\n    Figure 4 shows how this allows users to use the\n    pen for launching an application, the icon of which\n    is located on a monitor not supporting pen input.\n    In principle, drag-and-pick can be applied to any\n    type of widget, e.g., any buttons and menus located\n    on a non-pen accessible monitor. In this paper, however,\n    we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"3 Related work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-drop is a well-know interaction technique\n    for transferring or copying information using a\n    pointing device, while avoiding the use of a hidden\n    clipboard (Wagner, 1995; Beaudouin-Lafon, 2000).\n    Hyperdragging (Rekimoto, 1999), allows extending\n    drag-and-drop across physically separate displays\n    (Scenario 2), but requires an indirect input device,\n    such as a mouse. Most techniques compatible with\n    pen usage are based on point-and-click, e.g., pickand-\n    drop (Rekimoto, 1997) and take-and-put (Streitz\n    et al., 2001). These techniques, however, cannot be\n    used to access material on a display unit not providing\n    pen support (Scenario 1)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A different set of interaction techniques have\n    been proposed to help users overcome large distances\n    (Scenario 3). Manual And Gaze Input Cascaded\n    (MAGIC) pointing (Zhai et al., 1999) uses eye\n    tracking to move the cursor to the target area, from\n    where the user guides the cursor manually (which\n    requires an indirect input device). Gesture input\n    techniques allow selecting a target and a command\n    in a single interaction and are generally compatible\n    with pen input (Rubine, 1991). ‘Throwing’ allows users to accelerate an object with a small gesture; the\n    object then continues its trajectory based on its inertia\n    (Gei ler, 1998). The imprecision of human motor\n    skills has prevented throwing from being used\n    for reliable target acquisition. Myers et al. (2002)\n    used laser pointers to acquire targets on a Smartboard,\n    but found them to be slower than touch input.\n    A variety of mouse-based interaction techniques\n    use destination prediction to simplify navigation\n    (e.g., Jul, 2002). Dulberg et al. (1999) proposed a\n    flying click or flick for snapping the mouse to target\n    locations. Swaminathan and Sato (1997) proposed\n    making relevant controls on the screen “sticky”.\n    As an alternative way of launching applications,\n    today’s operating systems offer menus containing\n    lists of available application or documents. A ‘send\n    to’ option (Microsoft Windows) allows sending an\n    icon to a target selected from a predefined list.\n    Compared to 2D desktops, which typically use a\n    larger amount of screen space than pull-down or\n    pop-up menus, menus are limited to a smaller selection\n    of choices unless they use a hierarchical menu\n    organization, which makes their usage less transparent\n    and often less efficient. Furthermore, invoking a\n    content-menu may require hitting a qualifier key,\n    which can be problematic on touch-based systems."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4 Design and algorithms"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    In this section, we will take a more detailed look at\n    the design and algorithms behind drag-and-pop/pick.\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.1 Selecting candidates"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    In order to reduce clutter, drag-and-pop creates tip\n    icons only for a subset of the icons on the screen.\n    Drag-and-pop’s candidate selection algorithm is\n    initialized with the entire set of icons on the screen;\n    it then successively eliminates candidates using the\n    following four rules.\n    First, icons of incompatible type are eliminated.\n    If the user drags a text file, the icon of a text processor\n    can create a tip icon; the recycle bin icon can\n    create a tip icon; the icon of another text file, however,\n    cannot, because dragging two text files onto\n    each other is usually not associated with any behavior.\n    Drag-and-pick bypasses this selection step in\n    order to allow users to activate any type of icon.\n    Second, icons located between the cursor and the\n    location where the tip icons cluster will appear (see\n    following section) are eliminated. This rule avoids\n    creating tip icons that move away from the cursor.\n    Third, only icons that are located within a certain\n    angle from the initial drag direction (the target sector)\n    are considered. The initial drag direction is determined\n    the moment the user drags an icon further than a given threshold (default 15 pixels). During\n    preliminary testing on a Smartboard, we got good\n    results with first-time users when using sector sizes\n    of  30 to  45 degrees. The sector size could be reduced\n    to sector sizes of  20 degrees as users gained\n    more experience.\n    Forth, if the number of qualifying icons is above\n    some hard limit, drag-and-pop eliminates tip icon\n    candidates until the hard limit is met. Icons are removed\n    in an order starting at the outside of the target\n    sector moving inwards. This rule assures the scalability\n    of drag-and-pop to densely populated displays,\n    but requires drag-and-pop users working with\n    densely populated screens to aim more precisely.\n    We typically use hard limits between 5 and 10.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.2 Computing the tip icon layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Once tip icon candidates have been selected, dragand-\n    pop determines where on the screen to place the\n    tip icons. In order to avoid interference between tip\n    icons, the location of all tip icons is computed in a\n    centralized fashion.\n    Our drag-and-pop prototype uses the following\n    algorithm that is illustrated by Figure 5: (1) Snap\n    icons to a grid and store them in a two-dimensional\n    array, with each array element representing one cell\n    of the grid. If two or more icons fall into the same\n    cell, refine the grid. (2) Shrink the icon layout by\n    eliminating all array columns and rows that contain\n    no icons. (3) Translate icon positions back to 2D\n    space by mapping the array onto a regular grid. By\n    default, the output grid is chosen to be slightly\n    tighter than the input grid, which gives extra compression.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We chose this algorithm, because it preserves\n    alignment, proximity, and spatial arrangement between\n    icons, which allows users to use their spatial\n    memory when identifying the desired target within\n    the tip icon cluster. This is especially useful when\n    tip icons look alike (e.g., a folder in a cluster of\n    folders). In order to help users distinguish local icon clusters from surrounding icons more easily, the\n    algorithm may be adjusted to shrink empty rows and\n    columns during layout computation instead of removing\n    them entirely."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed,\n    drag-and-pop positions it on the screen such that the\n    center of the layout’s bounding box is located at the\n    direct extension of the user’s current mouse motion.\n    The distance of the tip icon cluster to the user’s current\n    cursor position is configurable. For inexperienced\n    users, we got best results with distances of\n    around 100 pixels; shorter distances made these users\n    likely to overshoot the cluster. For more experienced\n    users, we were able to reduce the distance to\n    values around 30 pixels, which allowed these users\n    to operate drag-and-pop with less effort, in a more\n    “menu-like” fashion. In order to reduce visual interference\n    between tip icons and icons on the desktop,\n    drag-and-pop diminishes desktop icons while tip\n    icons are visible."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.3 The rubber band"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    When the tip icon cluster is displayed, users need to\n    re-identify their targets within the tip icon cluster in\n    order to be able to successfully acquire them.\n    Our first implementation of drag-and-pop created\n    tip icons on top of their bases and used slow-inslow-\n    out animation (Shneiderman 1998) to move tip\n    icons to their final location. While this approach\n    allowed users to locate the final position of the desired\n    tip icon by visually tracking it on its way from\n    basis to final position, it also required users to either\n    wait for the animation to complete or to acquire a\n    moving target. We therefore chose to abandon the\n    animation and immediately display tip icons at their\n    final destinations.\n    In lieu of the animation, we provided tip icons\n    with rubber bands. The design prototype of the rubber\n    band is shown in Figure 6. For performance reasons,\n    our prototype, which is shown in all other\n    screenshots, uses rubber bands of a lower level of\n    graphical detail, i.e., a tape and three lines in the\n    color scheme of the corresponding icon.\n    The purpose of the rubber band is to offer the\n    functionality of the animation, but without the problems\n    alluded to above. The rubber band, decorated\n    with the respective icon’s texture, can be thought of\n    as having been created by taking a photograph of the\n    tip icon animation with a very long shutter speed\n    (so-called motion blur, e.g., Dachille and Kaufman,\n    2000). Like the animation, the rubber band allows\n    users to trace the path from base to tip icon. However,\n    users can do this at their own pace and the customized\n    texturing of the rubber band allows users to\n    start tracing it anywhere, not only at the base."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The rubber band is provided with a narrow midriff\n    section, suggesting that the rubber band is elastic.\n    This design was chosen to help users understand\n    that tip icons have retracted to their bases when they\n    disappear at the end of the interaction. This feature\n    may also help users find their way to the tip icon\n    faster, because it provides users with a visual cue\n    about how far away the tip icon is located. A thick\n    rubber band section implies that the tip icon (or\n    base) is close; a thin rubber band section indicates\n    that the target is further away."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.4 Aborting drag-and-pop interactions"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    As soon as tip icons and rubber bands are shown on\n    the screen, drag-and-pop waits for the user to acquire\n    one of the tip icons to complete the ongoing\n    drag-and-pop or drag-and-pick interaction. There are\n    two cases, however, in which users will want to\n    abort the interaction without acquiring a tip icon.\n    The first case is when the user dragged the\n    mouse at a wrong angle so that the desired target\n    icon did not pop up. In this case, the user may either\n    drop the icon and try again or complete the interaction\n    as a regular drag-and-drop interaction, i.e., by\n    dropping the icon onto the target icon’s base instead.\n    The other case occurs if the user is intending to\n    perform a regular mouse drag operation, for example\n    to rearrange icons on the desktop or to capture a set\n    of icons using a lasso operation. For these cases,\n    drag-and-pop allows users to terminate tip icons onthe-\n    fly and to complete the interaction without dragand-\n    pop/pick. To abort, users have to move the\n    mouse cursor away from the tip icon cluster while\n    still keeping the mouse depressed. This can be done\n    by overshooting the cluster or by changing mouse\n    direction. In particular, this allows users to access\n    the underlying drag-and-drop and lasso-select functionality\n    by introducing a simple zigzag gesture into\n    their cursor path. The zigzag contains at least one motion segment moving away from the tip icons,\n    thus terminating tip icons as soon as they appear.\n    The algorithm: the tip icon cluster is kept alive as\n    long as at least one of the following three rules is\n    successful. The first rule checks whether the mouse\n    cursor has moved closer to the center of at least one\n    of the icons in the tip icon cluster. This rule makes\n    sure that the cluster does not disappear while users\n    approach their targets. The second rule checks if the\n    cursor is in the direct vicinity of an icon. This rule\n    provides tolerance against users overshooting a tip\n    icon while acquiring it. The third and last rule keeps\n    the cluster alive if the cursor is stationary or if it is\n    moving backwards very slowly (up to 5 pxl/frame).\n    This rule makes drag-and-pop insensitive to jitter.\n    Figure 7 illustrates the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5 User study"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    In this section, we report the results of a user study\n    comparing drag-and-pop with the traditional dragand-\n    drop technique. To examine the effects of bezelcrossing\n    as well as distance, as described in Scenarios\n    2 and 3, we chose to run the study on a tiled\n    wall-size display. During the study, in which participants\n    filed icons into folders or dragged them\n    onto the icons of matching applications, we recorded\n    the time and accuracy of these movements. Our\n    main hypothesis was that participants would perform\n    faster when using the drag-and-pop interface, primarily\n    because it would avoid the need for crossing\n    the bezels, but also because it would bridge the\n    space to very distant icons more efficiently.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.1 Desktop layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    To obtain a representative set of icon arrangements\n    for the study, we gathered desktop screenshots from\n    25 coworkers who volunteered their participation\n    (15 single, 6 dual, and 4 triple monitor users). Overall\n    resolutions ranged from 800,000 pixels to\n    3,900,000 pixels (66% more than the display wall\n    used in the experiment).\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We clustered the obtained desktops by number\n    of icons and arrangement pattern. Then we chose\n    representatives from each of the three resulting main\n    clusters for the study (Figure 8). The “sparse” desktop\n    reflected the desktops of roughly two thirds of\n    the participants. It contained only 11 icons, most of\n    which were lined up in the top left corner of the\n    screen. The “frame” desktop reflected the desktops\n    of three of the participants. It contained 28 icons\n    arranged around the top, left, and right edge of the\n    screen. The “cluttered” desktop, finally, contained\n    35 icons that were spread primarily across the top\n    and left half of the screen. Five participants had chosen\n    this style of arranging their icons.\n    Icon layouts were stretched to fit the aspect ratio\n    of the display wall used in the experiment. An area\n    at the bottom right of the screen was reserved for the\n    starting locations of the icons to be filed during the\n    study (dashed shape in Figure 8)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.2 Participants"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Eight colleagues with no experience using drag-andpop\n    were recruited for this experiment. Due to technical\n    problems, the data from one of these participants\n    had to be dropped leaving us with 7. There\n    were 2 female and 5 male participants ranging in age\n    between 18 and 35. All were right handed with normal\n    or corrected-to-normal vision."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.3 Method"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    The test was run on the DynaWall (Streitz, 2001), a\n    display wall consisting of three Smartboard units\n    (Figure 9). Each Smartboard consisted of a backprojected\n    72”display with resistive touch input, so\n    that the entire display was 15’ (4.50m) long and 45” (1.12m) high. Display units could be operated by\n    touching the display, but for easier handling participants\n    were provided with color-free felt pens. Each\n    of the three display units ran at a resolution of\n    1024x768 pixels, offering an overall resolution of\n    3072x768 pixels. The three display units were connected\n    to a single PC equipped with two Matrox\n    Millennium graphics cards and running WindowsXP.\n    During the experiment, the DynaWall ran\n    a simulated Windows desktop. We compared dragand-\n    pop to a control condition of drag-and-drop.\n    Since our preliminary Windows-based version of\n    drag-and-pop did not support the full functionality\n    required for the study, we implemented a simulation\n    using Macromedia Flash (www.macromedia.com).\n    The drag-and-pop interface used in the experiment\n    was configured to a  30 degree target sector, 35\n    pixel target distance, and a maximum number of 5\n    tip icons.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    To each desktop layout we added 10 document\n    icons in the lower right quadrant of the screen.\n    These appeared in six different arrangements (Figure\n    8 shows 2 of them). The participants’ task was to\n    drag these icons into a given target folder or application.\n    Icons of image files, for example, were to be\n    filed in a folder labeled “My Pictures” and all Word\n    documents should be dropped onto the Word application.\n    To counterbalance for order effects, we required\n    participants to file the documents in a randomized\n    order. That is, for each movement, the item\n    to be filed was highlighted along with the target\n    icon. All other document icons were frozen, so that\n    participants could only move the highlighted icon.\n    As soon as participants began moving an item, all\n    highlighting was removed, forcing participants to\n    remember the destination item. We did this to assure\n    that participants would have to re-identify tip icons\n    when using the drag-and-pop interface, just as they\n    would in a real-world task.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants were allowed several minutes to\n    practice moving and filing icons in the prototype to\n    get them accustomed to both the DynaWall display\n    and the drag-and-pop interface. Once it was clear\n    that users understood how to use the display and the\n    interfaces, they were allowed to go on to the study.\n    Participants filed 2 sets of icons for each interface\n    (drag-and-pop and control), for each of the three\n    desktops. Thus participants filed 2 x 10 icons x 2\n    interface x 3 desktops for a total of 120 movements.\n    To mitigate learning effects associated with new\n    desktop arrangements or a new interface, we omitted\n    the first 5 trials for any desktop-interface combination\n    from our analyses, yielding ~15 correct trials\n    per cell or 90 movements per participant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4 Results\n    5.4.1 Task performance\n    Task performance was evaluated through speed and\n    accuracy measurements. Error rates were considerably\n    larger for drag-and-pop than for the control\n    (6.7% vs. 1%). We observed two things that made\n    this type of error more likely in the drag-and-pop\n    condition. First, in the drag-and-pop condition candidate\n    targets were brought closer together, making\n    it easier to accidentally drop an item on the wrong\n    target. Second, because drag-and-pop targets had\n    been translated away from their “home” location,\n    participants would sometimes forget which item was\n    in fact the target, especially if visually similar icons\n    (e.g., other folders) had created tip icons as well.\n    All data analyses for movement times were performed\n    on the median movement times for each participant\n    in each condition to normalize the typical\n    skewing associated with response time data. Summary\n    statistics report the means of these times.\n    Target icons could be located in the same display\n    unit as the icon to be filed, in a neighbor display\n    unit, or in the display unit at the other end of the\n    display wall, requiring users to cross 0, 1, or 2 bezels\n    in order to file the icon. To test the effect of\n    bezel crossing on performance, we ran a 2 (Condition)\n    x 3 (Bezels Crossed) within subjects ANOVA\n    on the median movement data. This revealed a significant\n    main effect for condition, F(1,6) = 18.2,\n    p<\\0.01 Collapsed across all distances, drag-and-pop was significantly faster than the control. There was also a\n        significant main effect of bezels crossed, F(2,12)=19.5, p<\\0.01; movement time increased as the number of\n        bezels participants had to cross to get to the target icon increased. As hypothesized, we also saw a significant\n        interaction between condition and number of bezels crossed, F(2,12)=15.2, p<\\0.01. As seen in Figure 10, an\n        increase in the number of crossed bezels resulted in only a small increase in movement time for drag-and-pop,\n        whereas it had a huge effect for the control interface. When no bezels had to be crossed, drag-and-pop appeared\n        to be slightly slower than control, although follow-up t-tests showed that this difference was not significant,\n        t(6)=1.73, ns. When 1 or 2 bezels had to be crossed, drag-and-pop was significantly faster than drag-and-drop\n        (t(6)=4.02, p<\\0.01 & t(6)=4.12, p<\\0.01, respectively). With 1 bezel crossed, dragand- pop was twice as fast as\n        the control and with 2 bezels it was 3.7 times as fast. "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 11 shows a scatter plot of movement time\n            versus target distance for both conditions. The best\n            linear fit for drag-and-drop was f(x)=0.007x-1.76,\n            r2=0.23. The linear fit for drag-and-pop was\n            f(x)=4.19, r2<\\0.0001. This reinforces what can be seen in Figure 10—movement time increases with distance\n                for the control interface, but stays relatively constant for the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4.2 Questionnaire and subjective feedback\n                    At the end of the study, participants answered a\n                    short questionnaire about their experience using the\n                    DynaWall and drag-and-pop. Participants were very\n                    enthusiastic about drag-and-pop. On a 7 point Likert\n                    scale (where 7=strongly agree and 1=strongly disagree),\n                    there was a mean > 6 for questions such as,\n                    “I liked using drag-and-pop”, “I always understood\n                    what was happening when drag-and-pop was on,”and “I would use drag-and-pop for large displays.”\n                    There was a mean of less than 3 for “It took a long\n                    time to get used to drag-and-pop” and “It was hard\n                    to control what the targets did when drag-and-pop\n                    was on.” Participants reported the drag-and-pop\n                    interface to cause less manual stress and fatigue than\n                    the control interface.\n                    The most common problem with drag-and-pop\n                    was in getting the right group of targets to pop up,\n                    and several participants requested a wider angle for\n                    destination targets. This relates to an observation we\n                    made about how people interact with touch-sensitive\n                    wall-displays. On the wall display, participants had\n                    to employ their whole arm to make a movement,\n                    resulting in targeting motions in the shape of arcs.\n                    This means that the initial direction of the movement\n                    was not in the direction of the target. To accommodate\n                    such arcs in the future, we have adapted the\n                    target selection algorithm of drag-and-pop by giving\n                    the target sector extra tolerance for movements towards\n                    the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"6 Conclusions and future work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n                    The substantial time-savings found in the user study\n                    confirm our expectations. Although when used\n                    within a single screen unit drag-and-pop does not\n                    seem to by faster than traditional drag and drop (first\n                    pair of bars in Figure 10; drag-and-pop’s capability\n                    of bridging distance to the target seems to be nullified\n                    by the need for re-orientation), its advantages\n                    on very large screens and its capability of bridging\n                    across display units are apparent. On the usability\n                    side, we were glad to see that participants had no\n                    trouble learning how to use the technique and that\n                    they described the technique as understandable and\n                    predictable. The single biggest shortcoming, the\n                    target selection, is the subjects of current work. In\n                    addition to the changes described above, we consider\n                    dropping the notion of a fixed target sector size\n                    and replace it with a mechanism that adjusts the sector\n                    size dynamically based on the number of matching\n                    targets.\n                    Given the recent advent of commercially available\n                    tablet computers, our next step will be to explore\n                    how drag-and-pop and especially drag-andpick\n                    can help tablet computer users work with external\n                    monitors. While this paper focused on icons, we\n                    plan to explore ways of operating menus, sliders,\n                    and entire applications using the techniques described\n                    in this article."}]}],"_id":"sVJLZwpiwRvGhtsL"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n    "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n"}]},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"AN EMPIRICAL COMPARISON\n    OF PIE vs. LINEAR MENUS\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Menus are largely formatted in a linear fashion listing\n    items from the top to bottom of the screen or window.\n    Pull down menus are a common example of this\n    format. Bitmapped computer displays, however, allow\n    greater freedom in the placement, font, and general\n    presentation of menus. A pie menu is a format\n    where the items are placed along the circumference of\n    a circle at equal radial distances from the center. Pie\n    menus gain over traditional linear menus by reducing\n    target seek time, lowering error rates by fixing the distance\n    factor and increasing the target size in Fitts’s\n    Law, minimizing the drift distance after target selection,\n    and are, in general, subjectively equivalent to the\n    linear style.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"KEYWORDS"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" : menus, user interface, empirical studies,\n    directional selection\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "}]},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM1.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"INTRODUCTION\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    In presenting a list of choices to the user, most computer\n    system designers have been limited, largely by\n    the available hardware and software, to a linear format.\n    The items are listed from top to bottom, sometimes\n    with an index number for each to the item. OCcasionally,\n    the lists are multi-columned, have multiple\n    items per line, or are even hierarchical (i.e. indented\n    sub-choices), but for the most part lie in a strictly\n    one dimensional structure. hlany of these menus are\n    static on the display screen or activated from mouse\n    actions in two formats: pull-down (menu appears at a\n    fixed label on screen when mouse directed) or pop-up\n    (menu appears anywhere within a fixed area, occasionally\n    the whole screen) [ll]. Some systems have used\n    the two dimensional nature of the computer display\n    to the advantage of certain menu applications. Many\n    flight simulation programs, for example, lay out directional\n    headings in a typical compass format.\n"},{"nodeType":1,"tagName":"p"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Item placement in menus has been an important research\n    topic for many years. Menu organization is\n    typically divided into three types [4]: alpha/numeric,\n    categorical (functional), and random ordering. It is\n    generally agreed that the performance of subjects (i.e.\n    time to seek a target) with different placement styles\n    converges with practice [2,10]. Further studies [9] revealed\n    that a functional placement of items is superior when the task domain is unambiguous to the user\n    whereas an alphabetic organization can be useful in\n    uncertain task descriptions. All of these studies have\n    concentrated on the linear display format.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"IIas defaulting to a linear format (Figure 1) made some\n    menus easier to use? Harder? By changing the menu\n    format, can users find the item they seek faster? Is a\n    particular menu format faster than other formats even\n    with practice? What type of formats should be tested?"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"These are important questions for the designers of many\n    systems. Software libraries of menu display routines\n    are widely used as a default by programmers of many\n    window systems and applications. Would it be worthwhile\n    to present items in variable formats or perhaps\n    in another fixed general format like the compass?"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A pie menu [7] is a system facility for pop-up menus\n    built into MIT’s X windows [5] window management\n    system, and Sun Microsystem’s NeWS window system\n    [G] and SunView window system. The pie menu interface\n    supplies a standard library of functions that\n    can be used by programmers to format and display\n    menus in a circular format. The system is written in\n    C and Forth and currently runs on a Sun Microsystems\n    workstation. Items in the menu are placed at equal radial distances along the circumference of a circlr\n    (Figure 2). The starting cursor position is at the\n    cellter of the menu as opposed to being at the menu\n    title or first item as in traditional pull-down menus.\n    The cursor is under the control of a three button optical\n    mouse on a fixed size moveable pad. "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/OP3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" Imaginative menus formats are an inevitable future\n    with the latest advances in window management systems.\n    Window imaging systems using technology from\n    laser printing protocol standards such as PostScript [I]\n    and Interpress [12] will make it possible to display a\n    large variety of non-rectangular shaped windows effectively\n    on a bitmapped display. There are some obvious\n    advantages to this organization for particular applicaImaginative menus formats are an inevitable future\n    with the latest advances in window management systems.\n    Window imaging systems using technology from\n    laser printing protocol standards such as PostScript [I]\n    and Interpress [12] will make it possible to display a\n    large variety of non-rectangular shaped windows effectively\n    on a bitmapped display. There are some obvious\n    advantages to this organization for particular applications:\n    compass directions, time, angular degrees, and\n    diametrically opposed or orthogonal function names\n    are some groupings of items that seem to fit well into\n    the mold of the pie menu design. Alternatively, items\n    with a. sequential nature may not benefit and may in\n    fact suffer from such a format. In addition, pie menus\n    consume greater screen area and become polynomially\n    larger than linear menus in both height and width with\n    increased item isize and number of items."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Distance to and size of the target are important factors\n    that give pie menus the advantage over traditional linear\n    menus. Even with linear menu initial cursor placement\n    schemes where the cursor may initially be in fhe\n    middle or at the last item selected, there remain target,\n    items at relatively great distances from the cursor\n    location. Pie rnenus enjoy a two fold advantage because\n    of their u:nique design: items are placed at equal\n    radial distances, from the center of the menu and the\n    user need only move the cursor by a small amount in\n    some direction for the system to recognize the intended\n    selection. The advantages of decreased distance and\n    increased target size can be seen as an effect on positioning\n    time as parameters to Fitts’s Law [3].\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    The distance to an item in any menu style can be defined\n    as the minimum distance needed to highlight the\n    item as selected. In both menu styles, this is defined\n    by a region rather than a point. This region is typically\n    of greater area than the actual target (Figure\n    3). Once the cursor has entered the region, the item\n    is highlighted as feedback to the user.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"EXPERIMENT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Introduction and hypothesis "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    This paper describes a controlled experiment to test\n    two hypotheses: that pie menus decrease the seek time\n    and error rates for menu items and that pie menus\n    are especially useful in menu applications suited for a\n    circular format, diametrically opposed item sets (e.g.\n    open/close), directions (e.g. up/down) or even linear\n    sets of items and conversely linear menus are useful for\n    sets of linear items (e.g. one,two,three,etc.)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The experiment is a 2x3 randomized block design. Each\n    cell is an element of the cross product of menu and\n    task type. A typical pie task would be the compass\n    example because it seems best suited functionally for\n    pie menus. List of elements, like OPEN/CLOSE and\n    UP/DOWN, whose meanings are antonyms are also\n    classified as pie tasks. Lists, like numbers, letters and\n    ordinals, are best suited for linear menus and are thus\n    classified as linear tasks. Groups of menu items that\n    have no relation to each other fall in the unclassified\n    category. Table 1 shows an example of the groupings."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"There are a total of 15 menus, a group of 5 for each task\n    type. Subjects perform the experiment for all cells in\n    the experiment matrix in random order in accordance\n    with a randomized block design [S]. The subjects see\n    each of the 15 menus four times, a total of twice in each\n    menu format. Each cell in the experiment consists\n    of 10 menus. Each subject therefore sees a total of\n    GO menus. Ta.rgets are uniformly distributed over the\n    eight possible items."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Pilot study results\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    A pilot study of 16 subjects showed that users were approximately\n    15% faster with the pie menus and that\n    errors were less frequent with pie menus. Statistically\n    significant differences were found for item seek time\n    but not task type. Subjects were split on their subjective\n    preference of pie and linear menus. Some commented\n    that they were able to visually isolate an item\n    easier with linear menus and that it was hard to control\n    the selection in pie menus because of the sensitivity\n    of the pie menu selection mechanism. These subjects\n    tended to be the most mouse naive of all whereas\n    those who had heard of or seen a mouse/cursor controlled\n    system but had not used one extensively tended\n    to prefer pie menus. The most rnouse naive users,\n    while finding linear menus easier, tended to be bctter\n    at pie menus and commented that with practice,\n    they would probably be superior and in fact prefer the\n    pie menus because of their speed and minimization\n    of hand movement with the mouse. Not surprisingly,\n    therefore, most of those preferring linear menus did\n    not have a strong preference on the scaled subjective\n    questionnaire."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Subjects\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Subjects were volunteers from the University of RIaryland\n    Psychology Department Subject Pool. All 33\n    subjects were undergraduate students with little or no\n    mouse experience. They were rewarded with 1 extra\n    credit point for participating."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Materials"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    AS stated, pie menus run on a Sun Rlicrosystems Workstation\n    as pa.rt of an enhanced version of RfIT’s X windows system. The screen is a 19-inch bitmapped high\n    resolution black-and-white display. Cursor location is\n    controlled by a three button optical mouse on a moveable\n    mousepad made of a specially formatted reflective\n    material."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Procedures and problems"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Some changes were made from the pilot design of the\n    experiment: a better distribution of menu targets and\n    doubled number of menu trials, though the total number\n    of menus remained constant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The process of selecting items from a pop-up menu,\n    regardless of format, can be characterized in three\n    stages: invocation, browsing, an cl confirmation. To\n    make a selection, the user invokes the menu by pressing\n    a mouse button (invoca2ion), continues to hold the\n    mouse button down and moves to an item which is\n    then highlighted (b rozusilzg) and releases the mouse\n    button confirming the selection (confirmation)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The typical sequence of events for a subject is as follows:\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    The target is displayed to the user in a fixed\n    text window at the top of the screen. The cursor\n    associated with the mouse is marked by a small\n    hash mark “x” on the display screen.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    The user invokes the menu by pressing and holding\n    any one of three mouse buttons. The menu\n    appears with the cursor location unchanged (escept\n    near screen boundaries where the cursor\n    must “jump awa.y” to accomodate the menu).\n    The cursor is located in the center or menu title\n    region of pie and linear menus respectively.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    With the mouse button still depressed, the user\n    moves the cursor with the mouse towards the\n    textual target as indicated. Selections highlight\n    as the cursor moves into distinct activation regions.\n    As noted, the activations regions for pie\n    menus are “pie” shaped sections that extend to\n    the screen boundaries and are rectangular sections\n    extending horizontally towards the screen\n    boundaries for linear menus.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Once selection is made, the user releases the mouse\n    button to confirm the selection. The menu disappears\n    from the display screen. The cursor remains\n    at the screen position relative to the selection\n    location. If the selection is correct, the process\n    begins again with a new target and possibly\n    a new menu style. Otherwise, if the selection is\n    not the requested target, an audible “beep” tone\n    is heard and the user attempts the task aga.in.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Basically, the computer posts the target name at the\n    top of the screen, the user invokes the current menu,\n    moves to the target item, and confirms the selection\n    by releasing the mouse button. This sequence, called\n    a task, is repeated GO times by each subject. Each\n    subject saw 6 sequences of .lO menus each. In each ten\n    menu sequence, the menu type was the same, either\n    pie or linear, and since there are only 5 menus per\n    task type, each menu appears twice in the sequence.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The 10 menu sequences correspond to the cells in the\n    experiment table design. Each subject performed a sequenc.\n    e for all 6 cells in random order. 60 data point.s\n    are collected per subject. A total of 33 subjects performed\n    the experiment for a total of 19SO data points. "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    For each task, the time from the first mouse button\n    down to the correct target selection is the seek time for\n    the item. If the user selected the wrong item, the time\n    is included in this interval. The number of errors made\n    as well as the sub-interval times when errors are made\n    is recorded during the experiment by the system. All\n    subjects performed the test adequately and no person\n    failed to finish the assignment."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"RESULTS AND DISCUSSION"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    A repeated measures analysis of variance was performed\n    on the data. Table 2 shows the means per cell, per row,\n    and per column. Table 3 displays the repeated measures\n    ANOVA results. A Tukey analysis reveals that\n    there is a statistical significant difference (P < 0.01) between overall menu type performance and task type\n        performance in target seek times. Pie tasks and linear tasks did not significantly differ from each other, but\n        both organizations are an improvement over the unclassified menu tasks. Slight statistical significant\n        difference (P=0.075) b et ween cells in the experiment design is also observed. No other interaction was\n        observed to be significant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The statistically significant difference between menu\n            type performance is the central result of this study.\n            The task type difference reiterates earlier study results\n            [2,9] that showed that some organization is helpful.\n            Furthermore, the slight interaction between menu\n            types and task types tends to confirm the hypothesis\n            that certain task groupings perform well with particular\n            menu formats. The reason for a lack of strong\n            correlation is evident in the lower mean for pie menus\n            even on linearly grouped tasks."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 4 displays the target location by item plotted\n            against the mean seektime. The mean seektime across\n            target location for pie menus is fairly constant. As expected\n            for linear menus, the mean seek time increases\n            proportionally to the distance of the target from the\n            initial cursor location. Analysis of seektime v,s. number\n            of menus seen shows that no strict convergence occurs\n            between the two menu styles, though mean seektimes\n            did decrease for both pie and linear menus with\n            practice."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"With error times removed from the results (measuring\n            time from menu invocation to first correct clioi.ce), the\n            menu styles compared relatively the same as the comparison\n            which includes error times because of the error\n            rates."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"An analysis of seek time based on Fitts’s Law T =\n            KO + Klog2(D/S + 0.5) where T = time to position\n            cursor using mouse (seek time), Ko = constant time\n            to adjust grasp on mouse, Ir’ = constant normalization\n            factor (positioning device dependent), S = size of\n            target in pixeZs2, D = distance in screen pixels, helps\n            explain our results because the ratio of the distance\n            (D) to target size (S) is smaller for pie menus. The\n            fixed target distance and increased size of targets for\n            pie menus decreases the mean positioning time as compared\n            with linear menus. In our experiment, the activation\n            region for an item constitutes the target. All\n            subjects were informed of the fact that their target\n            was not necessarily the text, but the region containing\n            the text target item. This was clearly understood by\n            all participants. The font size for text items in both"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n            "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 5 displays the target location plotted against\n            the total number of errors across all subjects. Pie and\n            linear menus seem to suffer from a similar phenomenon\n            - errors are made more often on items in the central they might prefer the pie menu structure. Those who\n            preferred pie menus generally felt fairly confident in\n            their assessment and this is reflected in the questionnaires."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n            "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One subject complained of having a problem with nlenu\n            drift which is the phenomenon which occurs as the result\n            of the cursor relocating to the relative screen location\n            of the last selected target. With linear menus,\n            this tends to “drift” the cursor towards the bottom of\n            the screen. This may explain the higher error rate for\n            linear menus, but the same problem occurs to a lesser\n            degree with pie menus. This, in fact, we believe to be\n            another positive feature of pie menus: the cursor drift\n            distance is minimized. Most subjects had no problems\n            coping with drift in either menu style. One area of\n            further research is measuring the extent and effect of\n            this problem."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n            "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"CONCLUSIONS"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n            What does this mean? Should we program pie menus\n            into our bitmapped window systems tomorrow and expect\n            a 15-20% increase in productivity since users can\n            select items slightly faster with pie menus. Pie menus\n            seem promising, but more experiments are needed before\n            issuing a strong recommendation."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"First, this experiment only addresses fixed length menus,\n            in particular, menus consisting of 8 items - no more,\n            no less. Secondly, there remains the problem of increased\n            screen real estate usage, In one trial a subject\n            complained because the pie menu obscured his view of\n            the target prompt message. Finally, the questionnaire\n            showed that the subjects were almost evenly divided\n            between pie and linear menus in subjective satisfaction.\n            Many found it difficult to “home in on” a particular\n            item because of the unusual activation region\n            characteristics of the pie menu."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One assumption of this study concerns the use of a\n            mouse/cursor control device and the use of pop-up\n            style menus (as opposed to menus invoked from a fsed\n            screen location or permanent menus). Certainly, pie\n            menus can and in fact have been incorporated to use\n            keyed input [7] and fixed “pull-down” style presentation\n            (the pie menu becomes a semicircle menu). These\n            variations are areas for further research."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n            "},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/PM10.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"One continuing issue with pie menus is the limit on\n            the number of items that can be placed in a circular format before the size of the menu window is\n            impractical.\n            Perhaps, like the limiting factors in linear\n            menus concerning their lengths, pie menus reach a sim.-\n            ilar “breaking point” beyond which other menu styles\n            would be more useful. Hierarchical organization, arbitrarily\n            shaped windows (Figure S), numeric item assignment\n            and other menu refinements as well as further\n            analysis is contained in [7]. Pie menus offer a novel alternative\n            worthy of further exploration."}]}],"_id":"b4gxzlOJY0xfHxZp"}
{"nodeType":1,"tagName":"div","attributes":[["id","content"],["class","document"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n\n    "},{"nodeType":1,"tagName":"meta"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["content","IE=edge"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"meta","attributes":[["name","viewport"],["content","width=device-width, initial-scale=1.0"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"title","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Document"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"h1","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-Pop and Drag-and-Pick: techniques for accessing\n    remote screen content on touch- and pen-operated systems\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"ABSTRACT"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-pop and drag-and-pick are interaction techniques designed for users of pen- and touchoperated\n        display systems. They provide users with access to screen content that would otherwise be impossible\n        or hard to reach, e.g., because it is located behind a bezel or far away from the user. Drag-and-pop is an extension\n        of traditional drag-and-drop. As the user starts dragging an icon towards some target icon, drag-and-pop\n        responds by temporarily moving potential target icons towards the user’s current cursor location, thereby allowing\n        the user to interact with these icons using comparably small hand movements. Drag-and-Pick extends the\n        drag-and-pop interaction style such that it allows activating icons, e.g., to open folders or launch applications.\n        In\n        this paper, we report the results of a user study comparing drag-and-pop with traditional drag-and-drop on a 15’\n        (4.50m) wide interactive display wall. Participants where able to file icons up to 3.7 times faster when using the\n        drag-and-pop interface.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Keywords"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n        Drag-and-drop, drag-and-pick, interaction technique, pen input, touchscreen,\n        heterogeneous display.\n    "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Introduction"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    With the emergence of pen- and touch-operated personal\n    digital assistants (PDAs), tablet computers,\n    and wall-size displays (e.g., Liveboard, Elrod et al.,\n    1992; Smartboard, http://www.smarttech.com),\n    touch and pen input have gained popularity. Over\n    the past years, more complex display systems have\n    been created by combining multiple such display\n    units. Wall-size touch displays have been combined\n    into display walls, such as the DynaWall (Streitz\n    2001), or the iRoom Smartboard wall (Johanson,\n    2002b). Recent PDAs and tablet computers allow\n    connecting additional displays, such as another tablet\n    or a monitor in order to extend the device’s internal\n    display space.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP1.png"],["width",358],["height",326],["align","bottom"]]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Touch/pen-operated screens that consist of multiple\n    display units bring up a new class of input challenges\n    that cannot always be solved with existing\n    techniques, because many of the existing techniques\n    were designed for indirect input devices, such as\n    mice, track pads, or joysticks. Indirect input devices\n    can be used on arbitrary display configurations, because\n    they can simply be mapped to the respective\n    topology (e.g., PointRight, Johanson 2002a). Touch/\n    pen input, however, is based on the immediate correspondence between input space and display\n    space and thus requires users to adapt their input\n    behavior to the physicality of the display system.\n    Here are three examples where this can become\n    problematic."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 1: External monitors. One or more display\n    units within a display system may not be\n    equipped with a touch or pen sensor. Connecting an\n    external monitor to a tablet computer or PDA, for\n    example, allows users to see more material, but requires\n    them to use an indirect input device, such as a\n    mouse, when interacting with content on the external\n    monitor. Since some tablet-specific tasks, such as\n    scribbling, are hard to accomplish with a mouse,\n    users find themselves continuously switching between\n    pen and mouse."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 2: Interactions across display units.\n    Some interaction techniques, such as drag-and-drop,\n    require users to interact with two or more icons in a\n    single pen-down interaction. If these icons are distributed\n    across physically separate pen/touch input\n    display units, users first have to bring all involved\n    icons to the same display unit, a potentially timeconsuming\n    activity (Figure 2a-c)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Scenario 3: Bridging long distances. Accessing\n    icons located far away from the user, e.g., on the\n    opposite side of a 15’ DynaWall, requires users to\n    physically walk over, the time for which may in\n    some circumstances increase linearly with distance\n    (Guiard et at, 2001). In addition, drag interactions\n    get more error-prone with distance, because users\n    drop objects accidentally when failing to continuously\n    keep the pen tip in contact with the display\n    surface (Rekimoto 1997)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"2 Drag-and-pop & drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-pop and drag-and-pick are interaction\n    techniques that address these issues. We will begin\n    by giving an overview; more detailed descriptions of\n    both techniques can be found in Section 4"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pop"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"extends traditional drag-and-drop\n    as illustrated by Figure 1. (a) The user intends to\n    delete a Word memo by dragging it into the recycle\n    bin. (b) As the user starts dragging the memo’s icon\n    towards the recycle bin, icons that are of compatible\n    type and located in the direction of the user’s drag\n    motion “pop up”. This means that for each of these\n    icons a link icon is created (tip icon) that appears in\n    front of the user’s cursor. Tip icons are connected to\n    the original icon (base icon) using a rubber band.\n    (c) The user drags the memo over the recycle bin\n    and releases the mouse button. The recycle bin accepts\n    the memo. Alternatively, the user could have\n    dropped the memo over the word processor or the\n    web browser icon, which would have launched the\n    respective application with the memo. (d) When the\n    user drops the icon, all tip icons disappear instantly.\n    Figure 2d shows how drag-and-pop simplifies\n    dropping icons onto targets located at the other side"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP2.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Drag-and-pick"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"modifies the drag-and-pop interaction\n    concept such that it allows activating icons,\n    e.g., to open a folder or to launch a program. While\n    drag-and-pop is initiated by the user dragging an\n    icon, drag-and-pick starts with the user performing a\n    drag interaction on empty screen space. The system’s\n    response to this drag interaction is similar to\n    drag-and-pop, but with two differences. First, all\n    icons located in the direction of the drag motion will\n    pop up, not only those of compatible type (Figure 3).\n    Second, as the user drags the mouse cursor over one\n    of the targets and releases the mouse button, the\n    folder, file, or application associated with the icon is\n    activated as if it had been double clicked.\n    Figure 4 shows how this allows users to use the\n    pen for launching an application, the icon of which\n    is located on a monitor not supporting pen input.\n    In principle, drag-and-pick can be applied to any\n    type of widget, e.g., any buttons and menus located\n    on a non-pen accessible monitor. In this paper, however,\n    we will focus on the manipulation of icons."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"3 Related work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Drag-and-drop is a well-know interaction technique\n    for transferring or copying information using a\n    pointing device, while avoiding the use of a hidden\n    clipboard (Wagner, 1995; Beaudouin-Lafon, 2000).\n    Hyperdragging (Rekimoto, 1999), allows extending\n    drag-and-drop across physically separate displays\n    (Scenario 2), but requires an indirect input device,\n    such as a mouse. Most techniques compatible with\n    pen usage are based on point-and-click, e.g., pickand-\n    drop (Rekimoto, 1997) and take-and-put (Streitz\n    et al., 2001). These techniques, however, cannot be\n    used to access material on a display unit not providing\n    pen support (Scenario 1)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP3.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP4.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"A different set of interaction techniques have\n    been proposed to help users overcome large distances\n    (Scenario 3). Manual And Gaze Input Cascaded\n    (MAGIC) pointing (Zhai et al., 1999) uses eye\n    tracking to move the cursor to the target area, from\n    where the user guides the cursor manually (which\n    requires an indirect input device). Gesture input\n    techniques allow selecting a target and a command\n    in a single interaction and are generally compatible\n    with pen input (Rubine, 1991). ‘Throwing’ allows users to accelerate an object with a small gesture; the\n    object then continues its trajectory based on its inertia\n    (Gei ler, 1998). The imprecision of human motor\n    skills has prevented throwing from being used\n    for reliable target acquisition. Myers et al. (2002)\n    used laser pointers to acquire targets on a Smartboard,\n    but found them to be slower than touch input.\n    A variety of mouse-based interaction techniques\n    use destination prediction to simplify navigation\n    (e.g., Jul, 2002). Dulberg et al. (1999) proposed a\n    flying click or flick for snapping the mouse to target\n    locations. Swaminathan and Sato (1997) proposed\n    making relevant controls on the screen “sticky”.\n    As an alternative way of launching applications,\n    today’s operating systems offer menus containing\n    lists of available application or documents. A ‘send\n    to’ option (Microsoft Windows) allows sending an\n    icon to a target selected from a predefined list.\n    Compared to 2D desktops, which typically use a\n    larger amount of screen space than pull-down or\n    pop-up menus, menus are limited to a smaller selection\n    of choices unless they use a hierarchical menu\n    organization, which makes their usage less transparent\n    and often less efficient. Furthermore, invoking a\n    content-menu may require hitting a qualifier key,\n    which can be problematic on touch-based systems."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4 Design and algorithms"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    In this section, we will take a more detailed look at\n    the design and algorithms behind drag-and-pop/pick.\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.1 Selecting candidates"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" \n    In order to reduce clutter, drag-and-pop creates tip\n    icons only for a subset of the icons on the screen.\n    Drag-and-pop’s candidate selection algorithm is\n    initialized with the entire set of icons on the screen;\n    it then successively eliminates candidates using the\n    following four rules.\n    First, icons of incompatible type are eliminated.\n    If the user drags a text file, the icon of a text processor\n    can create a tip icon; the recycle bin icon can\n    create a tip icon; the icon of another text file, however,\n    cannot, because dragging two text files onto\n    each other is usually not associated with any behavior.\n    Drag-and-pick bypasses this selection step in\n    order to allow users to activate any type of icon.\n    Second, icons located between the cursor and the\n    location where the tip icons cluster will appear (see\n    following section) are eliminated. This rule avoids\n    creating tip icons that move away from the cursor.\n    Third, only icons that are located within a certain\n    angle from the initial drag direction (the target sector)\n    are considered. The initial drag direction is determined\n    the moment the user drags an icon further than a given threshold (default 15 pixels). During\n    preliminary testing on a Smartboard, we got good\n    results with first-time users when using sector sizes\n    of  30 to  45 degrees. The sector size could be reduced\n    to sector sizes of  20 degrees as users gained\n    more experience.\n    Forth, if the number of qualifying icons is above\n    some hard limit, drag-and-pop eliminates tip icon\n    candidates until the hard limit is met. Icons are removed\n    in an order starting at the outside of the target\n    sector moving inwards. This rule assures the scalability\n    of drag-and-pop to densely populated displays,\n    but requires drag-and-pop users working with\n    densely populated screens to aim more precisely.\n    We typically use hard limits between 5 and 10.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.2 Computing the tip icon layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Once tip icon candidates have been selected, dragand-\n    pop determines where on the screen to place the\n    tip icons. In order to avoid interference between tip\n    icons, the location of all tip icons is computed in a\n    centralized fashion.\n    Our drag-and-pop prototype uses the following\n    algorithm that is illustrated by Figure 5: (1) Snap\n    icons to a grid and store them in a two-dimensional\n    array, with each array element representing one cell\n    of the grid. If two or more icons fall into the same\n    cell, refine the grid. (2) Shrink the icon layout by\n    eliminating all array columns and rows that contain\n    no icons. (3) Translate icon positions back to 2D\n    space by mapping the array onto a regular grid. By\n    default, the output grid is chosen to be slightly\n    tighter than the input grid, which gives extra compression.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP5.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We chose this algorithm, because it preserves\n    alignment, proximity, and spatial arrangement between\n    icons, which allows users to use their spatial\n    memory when identifying the desired target within\n    the tip icon cluster. This is especially useful when\n    tip icons look alike (e.g., a folder in a cluster of\n    folders). In order to help users distinguish local icon clusters from surrounding icons more easily, the\n    algorithm may be adjusted to shrink empty rows and\n    columns during layout computation instead of removing\n    them entirely."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"After the tip icon layout has been computed,\n    drag-and-pop positions it on the screen such that the\n    center of the layout’s bounding box is located at the\n    direct extension of the user’s current mouse motion.\n    The distance of the tip icon cluster to the user’s current\n    cursor position is configurable. For inexperienced\n    users, we got best results with distances of\n    around 100 pixels; shorter distances made these users\n    likely to overshoot the cluster. For more experienced\n    users, we were able to reduce the distance to\n    values around 30 pixels, which allowed these users\n    to operate drag-and-pop with less effort, in a more\n    “menu-like” fashion. In order to reduce visual interference\n    between tip icons and icons on the desktop,\n    drag-and-pop diminishes desktop icons while tip\n    icons are visible."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.3 The rubber band"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    When the tip icon cluster is displayed, users need to\n    re-identify their targets within the tip icon cluster in\n    order to be able to successfully acquire them.\n    Our first implementation of drag-and-pop created\n    tip icons on top of their bases and used slow-inslow-\n    out animation (Shneiderman 1998) to move tip\n    icons to their final location. While this approach\n    allowed users to locate the final position of the desired\n    tip icon by visually tracking it on its way from\n    basis to final position, it also required users to either\n    wait for the animation to complete or to acquire a\n    moving target. We therefore chose to abandon the\n    animation and immediately display tip icons at their\n    final destinations.\n    In lieu of the animation, we provided tip icons\n    with rubber bands. The design prototype of the rubber\n    band is shown in Figure 6. For performance reasons,\n    our prototype, which is shown in all other\n    screenshots, uses rubber bands of a lower level of\n    graphical detail, i.e., a tape and three lines in the\n    color scheme of the corresponding icon.\n    The purpose of the rubber band is to offer the\n    functionality of the animation, but without the problems\n    alluded to above. The rubber band, decorated\n    with the respective icon’s texture, can be thought of\n    as having been created by taking a photograph of the\n    tip icon animation with a very long shutter speed\n    (so-called motion blur, e.g., Dachille and Kaufman,\n    2000). Like the animation, the rubber band allows\n    users to trace the path from base to tip icon. However,\n    users can do this at their own pace and the customized\n    texturing of the rubber band allows users to\n    start tracing it anywhere, not only at the base."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"The rubber band is provided with a narrow midriff\n    section, suggesting that the rubber band is elastic.\n    This design was chosen to help users understand\n    that tip icons have retracted to their bases when they\n    disappear at the end of the interaction. This feature\n    may also help users find their way to the tip icon\n    faster, because it provides users with a visual cue\n    about how far away the tip icon is located. A thick\n    rubber band section implies that the tip icon (or\n    base) is close; a thin rubber band section indicates\n    that the target is further away."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP6.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"4.4 Aborting drag-and-pop interactions"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    As soon as tip icons and rubber bands are shown on\n    the screen, drag-and-pop waits for the user to acquire\n    one of the tip icons to complete the ongoing\n    drag-and-pop or drag-and-pick interaction. There are\n    two cases, however, in which users will want to\n    abort the interaction without acquiring a tip icon.\n    The first case is when the user dragged the\n    mouse at a wrong angle so that the desired target\n    icon did not pop up. In this case, the user may either\n    drop the icon and try again or complete the interaction\n    as a regular drag-and-drop interaction, i.e., by\n    dropping the icon onto the target icon’s base instead.\n    The other case occurs if the user is intending to\n    perform a regular mouse drag operation, for example\n    to rearrange icons on the desktop or to capture a set\n    of icons using a lasso operation. For these cases,\n    drag-and-pop allows users to terminate tip icons onthe-\n    fly and to complete the interaction without dragand-\n    pop/pick. To abort, users have to move the\n    mouse cursor away from the tip icon cluster while\n    still keeping the mouse depressed. This can be done\n    by overshooting the cluster or by changing mouse\n    direction. In particular, this allows users to access\n    the underlying drag-and-drop and lasso-select functionality\n    by introducing a simple zigzag gesture into\n    their cursor path. The zigzag contains at least one motion segment moving away from the tip icons,\n    thus terminating tip icons as soon as they appear.\n    The algorithm: the tip icon cluster is kept alive as\n    long as at least one of the following three rules is\n    successful. The first rule checks whether the mouse\n    cursor has moved closer to the center of at least one\n    of the icons in the tip icon cluster. This rule makes\n    sure that the cluster does not disappear while users\n    approach their targets. The second rule checks if the\n    cursor is in the direct vicinity of an icon. This rule\n    provides tolerance against users overshooting a tip\n    icon while acquiring it. The third and last rule keeps\n    the cluster alive if the cursor is stationary or if it is\n    moving backwards very slowly (up to 5 pxl/frame).\n    This rule makes drag-and-pop insensitive to jitter.\n    Figure 7 illustrates the resulting behavior."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP7.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5 User study"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    In this section, we report the results of a user study\n    comparing drag-and-pop with the traditional dragand-\n    drop technique. To examine the effects of bezelcrossing\n    as well as distance, as described in Scenarios\n    2 and 3, we chose to run the study on a tiled\n    wall-size display. During the study, in which participants\n    filed icons into folders or dragged them\n    onto the icons of matching applications, we recorded\n    the time and accuracy of these movements. Our\n    main hypothesis was that participants would perform\n    faster when using the drag-and-pop interface, primarily\n    because it would avoid the need for crossing\n    the bezels, but also because it would bridge the\n    space to very distant icons more efficiently.\n    "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.1 Desktop layout"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    To obtain a representative set of icon arrangements\n    for the study, we gathered desktop screenshots from\n    25 coworkers who volunteered their participation\n    (15 single, 6 dual, and 4 triple monitor users). Overall\n    resolutions ranged from 800,000 pixels to\n    3,900,000 pixels (66% more than the display wall\n    used in the experiment).\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"We clustered the obtained desktops by number\n    of icons and arrangement pattern. Then we chose\n    representatives from each of the three resulting main\n    clusters for the study (Figure 8). The “sparse” desktop\n    reflected the desktops of roughly two thirds of\n    the participants. It contained only 11 icons, most of\n    which were lined up in the top left corner of the\n    screen. The “frame” desktop reflected the desktops\n    of three of the participants. It contained 28 icons\n    arranged around the top, left, and right edge of the\n    screen. The “cluttered” desktop, finally, contained\n    35 icons that were spread primarily across the top\n    and left half of the screen. Five participants had chosen\n    this style of arranging their icons.\n    Icon layouts were stretched to fit the aspect ratio\n    of the display wall used in the experiment. An area\n    at the bottom right of the screen was reserved for the\n    starting locations of the icons to be filed during the\n    study (dashed shape in Figure 8)."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP8.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.2 Participants"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n    Eight colleagues with no experience using drag-andpop\n    were recruited for this experiment. Due to technical\n    problems, the data from one of these participants\n    had to be dropped leaving us with 7. There\n    were 2 female and 5 male participants ranging in age\n    between 18 and 35. All were right handed with normal\n    or corrected-to-normal vision."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.3 Method"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n    The test was run on the DynaWall (Streitz, 2001), a\n    display wall consisting of three Smartboard units\n    (Figure 9). Each Smartboard consisted of a backprojected\n    72”display with resistive touch input, so\n    that the entire display was 15’ (4.50m) long and 45” (1.12m) high. Display units could be operated by\n    touching the display, but for easier handling participants\n    were provided with color-free felt pens. Each\n    of the three display units ran at a resolution of\n    1024x768 pixels, offering an overall resolution of\n    3072x768 pixels. The three display units were connected\n    to a single PC equipped with two Matrox\n    Millennium graphics cards and running WindowsXP.\n    During the experiment, the DynaWall ran\n    a simulated Windows desktop. We compared dragand-\n    pop to a control condition of drag-and-drop.\n    Since our preliminary Windows-based version of\n    drag-and-pop did not support the full functionality\n    required for the study, we implemented a simulation\n    using Macromedia Flash (www.macromedia.com).\n    The drag-and-pop interface used in the experiment\n    was configured to a  30 degree target sector, 35\n    pixel target distance, and a maximum number of 5\n    tip icons.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP9.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"\n    To each desktop layout we added 10 document\n    icons in the lower right quadrant of the screen.\n    These appeared in six different arrangements (Figure\n    8 shows 2 of them). The participants’ task was to\n    drag these icons into a given target folder or application.\n    Icons of image files, for example, were to be\n    filed in a folder labeled “My Pictures” and all Word\n    documents should be dropped onto the Word application.\n    To counterbalance for order effects, we required\n    participants to file the documents in a randomized\n    order. That is, for each movement, the item\n    to be filed was highlighted along with the target\n    icon. All other document icons were frozen, so that\n    participants could only move the highlighted icon.\n    As soon as participants began moving an item, all\n    highlighting was removed, forcing participants to\n    remember the destination item. We did this to assure\n    that participants would have to re-identify tip icons\n    when using the drag-and-pop interface, just as they\n    would in a real-world task.\n"}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Participants were allowed several minutes to\n    practice moving and filing icons in the prototype to\n    get them accustomed to both the DynaWall display\n    and the drag-and-pop interface. Once it was clear\n    that users understood how to use the display and the\n    interfaces, they were allowed to go on to the study.\n    Participants filed 2 sets of icons for each interface\n    (drag-and-pop and control), for each of the three\n    desktops. Thus participants filed 2 x 10 icons x 2\n    interface x 3 desktops for a total of 120 movements.\n    To mitigate learning effects associated with new\n    desktop arrangements or a new interface, we omitted\n    the first 5 trials for any desktop-interface combination\n    from our analyses, yielding ~15 correct trials\n    per cell or 90 movements per participant."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4 Results\n    5.4.1 Task performance\n    Task performance was evaluated through speed and\n    accuracy measurements. Error rates were considerably\n    larger for drag-and-pop than for the control\n    (6.7% vs. 1%). We observed two things that made\n    this type of error more likely in the drag-and-pop\n    condition. First, in the drag-and-pop condition candidate\n    targets were brought closer together, making\n    it easier to accidentally drop an item on the wrong\n    target. Second, because drag-and-pop targets had\n    been translated away from their “home” location,\n    participants would sometimes forget which item was\n    in fact the target, especially if visually similar icons\n    (e.g., other folders) had created tip icons as well.\n    All data analyses for movement times were performed\n    on the median movement times for each participant\n    in each condition to normalize the typical\n    skewing associated with response time data. Summary\n    statistics report the means of these times.\n    Target icons could be located in the same display\n    unit as the icon to be filed, in a neighbor display\n    unit, or in the display unit at the other end of the\n    display wall, requiring users to cross 0, 1, or 2 bezels\n    in order to file the icon. To test the effect of\n    bezel crossing on performance, we ran a 2 (Condition)\n    x 3 (Bezels Crossed) within subjects ANOVA\n    on the median movement data. This revealed a significant\n    main effect for condition, F(1,6) = 18.2,\n    p<\\0.01 Collapsed across all distances, drag-and-pop was significantly faster than the control. There was also a\n        significant main effect of bezels crossed, F(2,12)=19.5, p<\\0.01; movement time increased as the number of\n        bezels participants had to cross to get to the target icon increased. As hypothesized, we also saw a significant\n        interaction between condition and number of bezels crossed, F(2,12)=15.2, p<\\0.01. As seen in Figure 10, an\n        increase in the number of crossed bezels resulted in only a small increase in movement time for drag-and-pop,\n        whereas it had a huge effect for the control interface. When no bezels had to be crossed, drag-and-pop appeared\n        to be slightly slower than control, although follow-up t-tests showed that this difference was not significant,\n        t(6)=1.73, ns. When 1 or 2 bezels had to be crossed, drag-and-pop was significantly faster than drag-and-drop\n        (t(6)=4.02, p<\\0.01 & t(6)=4.12, p<\\0.01, respectively). With 1 bezel crossed, dragand- pop was twice as fast as\n        the control and with 2 bezels it was 3.7 times as fast. "}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP10.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n        "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"Figure 11 shows a scatter plot of movement time\n            versus target distance for both conditions. The best\n            linear fit for drag-and-drop was f(x)=0.007x-1.76,\n            r2=0.23. The linear fit for drag-and-pop was\n            f(x)=4.19, r2<\\0.0001. This reinforces what can be seen in Figure 10—movement time increases with distance\n                for the control interface, but stays relatively constant for the drag-and-pop interface."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n\n"},{"nodeType":1,"tagName":"p","attributes":[["align","CENTER"]],"childNodes":[{"nodeType":1,"tagName":"img","attributes":[["src","http://localhost:3000/assets/DaP11.png"],["width",358],["height",326],["align","bottom"]]}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"5.4.2 Questionnaire and subjective feedback\n                    At the end of the study, participants answered a\n                    short questionnaire about their experience using the\n                    DynaWall and drag-and-pop. Participants were very\n                    enthusiastic about drag-and-pop. On a 7 point Likert\n                    scale (where 7=strongly agree and 1=strongly disagree),\n                    there was a mean > 6 for questions such as,\n                    “I liked using drag-and-pop”, “I always understood\n                    what was happening when drag-and-pop was on,”and “I would use drag-and-pop for large displays.”\n                    There was a mean of less than 3 for “It took a long\n                    time to get used to drag-and-pop” and “It was hard\n                    to control what the targets did when drag-and-pop\n                    was on.” Participants reported the drag-and-pop\n                    interface to cause less manual stress and fatigue than\n                    the control interface.\n                    The most common problem with drag-and-pop\n                    was in getting the right group of targets to pop up,\n                    and several participants requested a wider angle for\n                    destination targets. This relates to an observation we\n                    made about how people interact with touch-sensitive\n                    wall-displays. On the wall display, participants had\n                    to employ their whole arm to make a movement,\n                    resulting in targeting motions in the shape of arcs.\n                    This means that the initial direction of the movement\n                    was not in the direction of the target. To accommodate\n                    such arcs in the future, we have adapted the\n                    target selection algorithm of drag-and-pop by giving\n                    the target sector extra tolerance for movements towards\n                    the top of the screen."}]},{"nodeType":3,"nodeName":"#text","nodeValue":"\n\n                "},{"nodeType":1,"tagName":"p","childNodes":[{"nodeType":1,"tagName":"strong","childNodes":[{"nodeType":3,"nodeName":"#text","nodeValue":"6 Conclusions and future work"}]},{"nodeType":3,"nodeName":"#text","nodeValue":" "},{"nodeType":1,"tagName":"br"},{"nodeType":3,"nodeName":"#text","nodeValue":"\n                    The substantial time-savings found in the user study\n                    confirm our expectations. Although when used\n                    within a single screen unit drag-and-pop does not\n                    seem to by faster than traditional drag and drop (first\n                    pair of bars in Figure 10; drag-and-pop’s capability\n                    of bridging distance to the target seems to be nullified\n                    by the need for re-orientation), its advantages\n                    on very large screens and its capability of bridging\n                    across display units are apparent. On the usability\n                    side, we were glad to see that participants had no\n                    trouble learning how to use the technique and that\n                    they described the technique as understandable and\n                    predictable. The single biggest shortcoming, the\n                    target selection, is the subjects of current work. In\n                    addition to the changes described above, we consider\n                    dropping the notion of a fixed target sector size\n                    and replace it with a mechanism that adjusts the sector\n                    size dynamically based on the number of matching\n                    targets.\n                    Given the recent advent of commercially available\n                    tablet computers, our next step will be to explore\n                    how drag-and-pop and especially drag-andpick\n                    can help tablet computer users work with external\n                    monitors. While this paper focused on icons, we\n                    plan to explore ways of operating menus, sliders,\n                    and entire applications using the techniques described\n                    in this article."}]}],"_id":"CcOi0XAXb7PlwkYO"}
